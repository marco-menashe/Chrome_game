
LCD_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08005eb0  08005eb0  00006eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006104  08006104  000081dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006104  08006104  00007104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800610c  0800610c  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800610c  0800610c  0000710c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006114  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  080062f0  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080062f0  00008494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfae  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa8  00000000  00000000  000151ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00017168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be1  00000000  00000000  000180e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002785f  00000000  00000000  00018cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9b4  00000000  00000000  00040520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f14fd  00000000  00000000  0004fed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001413d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c60  00000000  00000000  00141414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00146074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e98 	.word	0x08005e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005e98 	.word	0x08005e98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LcdStrobe>:

const unsigned short LCDpinMapBoard[LCD_Interface_No] = {0x0080,0x0040,0x0020,0x0010}; // upper 4 nibbles
const unsigned short LCDpinMapLCM[LCD_Interface_No] = {0x0400,0x0010,0x0020,0x0008}; 	// PB10, PB4, PB5, PB3

void LcdStrobe()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LCD_EN, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800027a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800027e:	f002 f8fd 	bl	800247c <HAL_GPIO_WritePin>
	HAL_Delay(0.1);
 8000282:	2000      	movs	r0, #0
 8000284:	f001 fe1a 	bl	8001ebc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, LCD_EN, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800028e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000292:	f002 f8f3 	bl	800247c <HAL_GPIO_WritePin>
	HAL_Delay(0.1);
 8000296:	2000      	movs	r0, #0
 8000298:	f001 fe10 	bl	8001ebc <HAL_Delay>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <LcdWriteCmd>:

void LcdWriteCmd(unsigned short data)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f92b 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_RESET);		// clear RS, Low is for Cmd
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f002 f8de 	bl	800247c <HAL_GPIO_WritePin>
	LcdStrobe();
 80002c0:	f7ff ffd6 	bl	8000270 <LcdStrobe>

	data = (data << 4) & 0x00F0;						// load lower nibbles
 80002c4:	88fb      	ldrh	r3, [r7, #6]
 80002c6:	011b      	lsls	r3, r3, #4
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f919 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_RESET);		// clear RS, Low is for Cmd
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e0:	f002 f8cc 	bl	800247c <HAL_GPIO_WritePin>
	LcdStrobe();
 80002e4:	f7ff ffc4 	bl	8000270 <LcdStrobe>
	HAL_Delay(0.1);
 80002e8:	2000      	movs	r0, #0
 80002ea:	f001 fde7 	bl	8001ebc <HAL_Delay>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <LcdWriteData>:

void LcdWriteData(unsigned short data)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b082      	sub	sp, #8
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	4603      	mov	r3, r0
 80002fe:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f900 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800030e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000312:	f002 f8b3 	bl	800247c <HAL_GPIO_WritePin>
	LcdStrobe();
 8000316:	f7ff ffab 	bl	8000270 <LcdStrobe>

	data = (data << 4) & 0x00F0;						// load lower nibbles
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	011b      	lsls	r3, r3, #4
 800031e:	b29b      	uxth	r3, r3
 8000320:	b2db      	uxtb	r3, r3
 8000322:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	4618      	mov	r0, r3
 8000328:	f000 f8ee 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000336:	f002 f8a1 	bl	800247c <HAL_GPIO_WritePin>
	LcdStrobe();
 800033a:	f7ff ff99 	bl	8000270 <LcdStrobe>
	HAL_Delay(0.1);
 800033e:	2000      	movs	r0, #0
 8000340:	f001 fdbc 	bl	8001ebc <HAL_Delay>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <LcdClear>:

void LcdClear()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	LcdWriteCmd(0x01);
 8000350:	2001      	movs	r0, #1
 8000352:	f7ff ffa5 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 8000356:	2005      	movs	r0, #5
 8000358:	f001 fdb0 	bl	8001ebc <HAL_Delay>
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}

08000360 <LcdPutS>:

void LcdPutS(char *s)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	while (*s)
 8000368:	e006      	b.n	8000378 <LcdPutS+0x18>
	  LcdWriteData(*s++);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	1c5a      	adds	r2, r3, #1
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ffbf 	bl	80002f6 <LcdWriteData>
	while (*s)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d1f4      	bne.n	800036a <LcdPutS+0xa>
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <LcdPutCh>:

void LcdPutCh (char data)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b084      	sub	sp, #16
 800038e:	af00      	add	r7, sp, #0
 8000390:	4603      	mov	r3, r0
 8000392:	71fb      	strb	r3, [r7, #7]
	unsigned short sTemp = (unsigned short)data;
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	81fb      	strh	r3, [r7, #14]

	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(sTemp);
 8000398:	89fb      	ldrh	r3, [r7, #14]
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f8b4 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003aa:	f002 f867 	bl	800247c <HAL_GPIO_WritePin>
	LcdStrobe();
 80003ae:	f7ff ff5f 	bl	8000270 <LcdStrobe>

	sTemp = (sTemp << 4) & 0x00F0;						// load lower nibbles
 80003b2:	89fb      	ldrh	r3, [r7, #14]
 80003b4:	011b      	lsls	r3, r3, #4
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	81fb      	strh	r3, [r7, #14]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(sTemp);
 80003bc:	89fb      	ldrh	r3, [r7, #14]
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f8a2 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ce:	f002 f855 	bl	800247c <HAL_GPIO_WritePin>
	LcdStrobe();
 80003d2:	f7ff ff4d 	bl	8000270 <LcdStrobe>
	HAL_Delay(0.1);
 80003d6:	2000      	movs	r0, #0
 80003d8:	f001 fd70 	bl	8001ebc <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <LcdGoto>:

void LcdGoto(int row, int col)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
	char addr;
	if (row == 0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d101      	bne.n	80003f8 <LcdGoto+0x14>
		addr = 0x00;
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]
	if (row == 1)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d101      	bne.n	8000402 <LcdGoto+0x1e>
		addr = 0x40;
 80003fe:	2340      	movs	r3, #64	@ 0x40
 8000400:	73fb      	strb	r3, [r7, #15]

	addr += col;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	b2da      	uxtb	r2, r3
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	4413      	add	r3, r2
 800040a:	73fb      	strb	r3, [r7, #15]
	LcdWriteCmd(0x80 | addr);
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000412:	b2db      	uxtb	r3, r3
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff43 	bl	80002a0 <LcdWriteCmd>
}
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <LcdInit>:

void LcdInit()
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
	unsigned short data;

	data = 0x0000;
 8000428:	2300      	movs	r3, #0
 800042a:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 800042c:	88fb      	ldrh	r3, [r7, #6]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f86a 	bl	8000508 <LcdPortPinConvert>
	HAL_Delay(50);
 8000434:	2032      	movs	r0, #50	@ 0x32
 8000436:	f001 fd41 	bl	8001ebc <HAL_Delay>

	data = 0x0030;
 800043a:	2330      	movs	r3, #48	@ 0x30
 800043c:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 800043e:	88fb      	ldrh	r3, [r7, #6]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f861 	bl	8000508 <LcdPortPinConvert>
	LcdStrobe();
 8000446:	f7ff ff13 	bl	8000270 <LcdStrobe>
	HAL_Delay(30);
 800044a:	201e      	movs	r0, #30
 800044c:	f001 fd36 	bl	8001ebc <HAL_Delay>
	LcdStrobe();
 8000450:	f7ff ff0e 	bl	8000270 <LcdStrobe>
	HAL_Delay(20);
 8000454:	2014      	movs	r0, #20
 8000456:	f001 fd31 	bl	8001ebc <HAL_Delay>
	LcdStrobe();
 800045a:	f7ff ff09 	bl	8000270 <LcdStrobe>
	HAL_Delay(20);
 800045e:	2014      	movs	r0, #20
 8000460:	f001 fd2c 	bl	8001ebc <HAL_Delay>

	data = 0x0020;
 8000464:	2320      	movs	r3, #32
 8000466:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000468:	88fb      	ldrh	r3, [r7, #6]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f84c 	bl	8000508 <LcdPortPinConvert>
	LcdStrobe();
 8000470:	f7ff fefe 	bl	8000270 <LcdStrobe>
	HAL_Delay(5);
 8000474:	2005      	movs	r0, #5
 8000476:	f001 fd21 	bl	8001ebc <HAL_Delay>
	LcdWriteCmd(0x28);
 800047a:	2028      	movs	r0, #40	@ 0x28
 800047c:	f7ff ff10 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 8000480:	2005      	movs	r0, #5
 8000482:	f001 fd1b 	bl	8001ebc <HAL_Delay>
	LcdWriteCmd(0x0F);
 8000486:	200f      	movs	r0, #15
 8000488:	f7ff ff0a 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 800048c:	2005      	movs	r0, #5
 800048e:	f001 fd15 	bl	8001ebc <HAL_Delay>
	LcdWriteCmd(0x01);
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff ff04 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 8000498:	2005      	movs	r0, #5
 800049a:	f001 fd0f 	bl	8001ebc <HAL_Delay>
	LcdWriteCmd(0x06);
 800049e:	2006      	movs	r0, #6
 80004a0:	f7ff fefe 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 80004a4:	2005      	movs	r0, #5
 80004a6:	f001 fd09 	bl	8001ebc <HAL_Delay>

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <LcdCreateChar>:

void LcdCreateChar(uint8_t location, uint8_t charmap[])
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b084      	sub	sp, #16
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	6039      	str	r1, [r7, #0]
 80004bc:	71fb      	strb	r3, [r7, #7]
    location &= 0x7; // Only 8 locations (0-7)
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	f003 0307 	and.w	r3, r3, #7
 80004c4:	71fb      	strb	r3, [r7, #7]
    LcdWriteCmd(0x40 | (location << 3)); // Set CGRAM address
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004d2:	b21b      	sxth	r3, r3
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fee2 	bl	80002a0 <LcdWriteCmd>

    for (int i = 0; i < 8; i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e009      	b.n	80004f6 <LcdCreateChar+0x44>
        LcdWriteData(charmap[i]);
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff03 	bl	80002f6 <LcdWriteData>
    for (int i = 0; i < 8; i++)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	ddf2      	ble.n	80004e2 <LcdCreateChar+0x30>
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <LcdPortPinConvert>:


void LcdPortPinConvert(unsigned short data)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
	unsigned short sIndex;

	for (sIndex=0; sIndex<LCD_Interface_No; sIndex++)
 8000512:	2300      	movs	r3, #0
 8000514:	81fb      	strh	r3, [r7, #14]
 8000516:	e021      	b.n	800055c <LcdPortPinConvert+0x54>
	{
		if (data & LCDpinMapBoard[sIndex])
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <LcdPortPinConvert+0x68>)
 800051c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	4013      	ands	r3, r2
 8000524:	b29b      	uxth	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00a      	beq.n	8000540 <LcdPortPinConvert+0x38>
			GPIOB->ODR |= LCDpinMapLCM[sIndex];
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <LcdPortPinConvert+0x6c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	89fa      	ldrh	r2, [r7, #14]
 8000530:	4911      	ldr	r1, [pc, #68]	@ (8000578 <LcdPortPinConvert+0x70>)
 8000532:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000536:	4611      	mov	r1, r2
 8000538:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <LcdPortPinConvert+0x6c>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	e00a      	b.n	8000556 <LcdPortPinConvert+0x4e>
		else
			GPIOB->ODR &= ~LCDpinMapLCM[sIndex];
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <LcdPortPinConvert+0x6c>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	89fa      	ldrh	r2, [r7, #14]
 8000546:	490c      	ldr	r1, [pc, #48]	@ (8000578 <LcdPortPinConvert+0x70>)
 8000548:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800054c:	43d2      	mvns	r2, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <LcdPortPinConvert+0x6c>)
 8000552:	400b      	ands	r3, r1
 8000554:	6153      	str	r3, [r2, #20]
	for (sIndex=0; sIndex<LCD_Interface_No; sIndex++)
 8000556:	89fb      	ldrh	r3, [r7, #14]
 8000558:	3301      	adds	r3, #1
 800055a:	81fb      	strh	r3, [r7, #14]
 800055c:	89fb      	ldrh	r3, [r7, #14]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d9da      	bls.n	8000518 <LcdPortPinConvert+0x10>
	}
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	08005ed4 	.word	0x08005ed4
 8000574:	48000400 	.word	0x48000400
 8000578:	08005edc 	.word	0x08005edc

0800057c <TIMER2_HANDLE>:
#define _TIMER_C
#include "TIMER.h"
void TIMER2_HANDLE(void) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
    unsigned short sIndex;
    //__disable_irq();
    for (sIndex = 0; sIndex < NUMBER_OF_TIMERS; sIndex++) {
 8000582:	2300      	movs	r3, #0
 8000584:	80fb      	strh	r3, [r7, #6]
 8000586:	e011      	b.n	80005ac <TIMER2_HANDLE+0x30>
        if (sTimer[sIndex] != 0) sTimer[sIndex]--;
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <TIMER2_HANDLE+0x44>)
 800058c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <TIMER2_HANDLE+0x2a>
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	4a0a      	ldr	r2, [pc, #40]	@ (80005c0 <TIMER2_HANDLE+0x44>)
 8000598:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800059c:	3a01      	subs	r2, #1
 800059e:	b291      	uxth	r1, r2
 80005a0:	4a07      	ldr	r2, [pc, #28]	@ (80005c0 <TIMER2_HANDLE+0x44>)
 80005a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < NUMBER_OF_TIMERS; sIndex++) {
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	3301      	adds	r3, #1
 80005aa:	80fb      	strh	r3, [r7, #6]
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d9ea      	bls.n	8000588 <TIMER2_HANDLE+0xc>
    }
    //__enable_irq();
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	200001f8 	.word	0x200001f8

080005c4 <HAL_TIM_PeriodElapsedCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM5_Init(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { TIMER2_HANDLE(); }
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	f7ff ffd6 	bl	800057c <TIMER2_HANDLE>
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <main>:
void updateCellsEnv(void);
void updatePlayerPos(void);



int main(void) {
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b09c      	sub	sp, #112	@ 0x70
 80005dc:	af02      	add	r7, sp, #8




	HAL_Init();
 80005de:	f001 fbf8 	bl	8001dd2 <HAL_Init>
    SystemClock_Config();
 80005e2:	f001 f85d 	bl	80016a0 <SystemClock_Config>
    MX_GPIO_Init();
 80005e6:	f001 f989 	bl	80018fc <MX_GPIO_Init>
    MX_TIM2_Init();
 80005ea:	f001 f8e9 	bl	80017c0 <MX_TIM2_Init>
    MX_SPI1_Init();
 80005ee:	f001 f8a9 	bl	8001744 <MX_SPI1_Init>
    MX_TIM5_Init();
 80005f2:	f001 f933 	bl	800185c <MX_TIM5_Init>


	HAL_TIM_Base_Start_IT(&htim2);
 80005f6:	4897      	ldr	r0, [pc, #604]	@ (8000854 <main+0x27c>)
 80005f8:	f003 fd70 	bl	80040dc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 80005fc:	4896      	ldr	r0, [pc, #600]	@ (8000858 <main+0x280>)
 80005fe:	f003 fd05 	bl	800400c <HAL_TIM_Base_Start>

	char highScoreString[4];
	strncpy(highScoreString, EEPROM_READ_PASS(0x0C), sizeof(highScoreString) - 1);
 8000602:	200c      	movs	r0, #12
 8000604:	f000 fa3c 	bl	8000a80 <EEPROM_READ_PASS>
 8000608:	4601      	mov	r1, r0
 800060a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800060e:	2203      	movs	r2, #3
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fb99 	bl	8004d48 <strncpy>
	highScoreString[3] = '\0';  // Ensure null termination
 8000616:	2300      	movs	r3, #0
 8000618:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	int highScore = atoi(highScoreString);
 800061c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f9a9 	bl	8004978 <atoi>
 8000626:	6678      	str	r0, [r7, #100]	@ 0x64
//	uint32_t highScore = 0;
	int currentScore = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	663b      	str	r3, [r7, #96]	@ 0x60

	unsigned short sIndex;


    // Clear all debounced records, Previous, Low2High
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 800062c:	2300      	movs	r3, #0
 800062e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000632:	e016      	b.n	8000662 <main+0x8a>
        sKeyDebouncedCol[sIndex] = 0x0000;
 8000634:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000638:	4a88      	ldr	r2, [pc, #544]	@ (800085c <main+0x284>)
 800063a:	2100      	movs	r1, #0
 800063c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyPreviousCol[sIndex] = 0x0000;
 8000640:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000644:	4a86      	ldr	r2, [pc, #536]	@ (8000860 <main+0x288>)
 8000646:	2100      	movs	r1, #0
 8000648:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyLow2HighCol[sIndex] = 0x0000;
 800064c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000650:	4a84      	ldr	r2, [pc, #528]	@ (8000864 <main+0x28c>)
 8000652:	2100      	movs	r1, #0
 8000654:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000658:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800065c:	3301      	adds	r3, #1
 800065e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000662:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000666:	2b02      	cmp	r3, #2
 8000668:	d9e4      	bls.n	8000634 <main+0x5c>
    }

    LcdInit(); 				// LcdPutS("KeyPad LCD:");
 800066a:	f7ff feda 	bl	8000422 <LcdInit>
    LcdWriteCmd(0x000C);  	// CURSOR OFF
 800066e:	200c      	movs	r0, #12
 8000670:	f7ff fe16 	bl	80002a0 <LcdWriteCmd>

    LcdCreateChar(FULL_IDX, full_rect);
 8000674:	497c      	ldr	r1, [pc, #496]	@ (8000868 <main+0x290>)
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff ff1b 	bl	80004b2 <LcdCreateChar>
    LcdCreateChar(TOP_HALF_IDX, top_half);
 800067c:	497b      	ldr	r1, [pc, #492]	@ (800086c <main+0x294>)
 800067e:	2002      	movs	r0, #2
 8000680:	f7ff ff17 	bl	80004b2 <LcdCreateChar>
    LcdCreateChar(BOT_HALF_IDX, bottom_half);
 8000684:	497a      	ldr	r1, [pc, #488]	@ (8000870 <main+0x298>)
 8000686:	2001      	movs	r0, #1
 8000688:	f7ff ff13 	bl	80004b2 <LcdCreateChar>

    char topbuff[17] = "";
 800068c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	741a      	strb	r2, [r3, #16]
    char bottombuff[17] = "";
 800069c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	741a      	strb	r2, [r3, #16]

    char endMessage[17] = "--- Game Over --";
 80006ac:	4b71      	ldr	r3, [pc, #452]	@ (8000874 <main+0x29c>)
 80006ae:	f107 0418 	add.w	r4, r7, #24
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	682b      	ldr	r3, [r5, #0]
 80006ba:	7023      	strb	r3, [r4, #0]
    char endScore[17];

    if (highScore < 0 || highScore > 99999) highScore = 0;
 80006bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db03      	blt.n	80006ca <main+0xf2>
 80006c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006c4:	4a6c      	ldr	r2, [pc, #432]	@ (8000878 <main+0x2a0>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	dd01      	ble.n	80006ce <main+0xf6>
 80006ca:	2300      	movs	r3, #0
 80006cc:	667b      	str	r3, [r7, #100]	@ 0x64

    while (1) {
    	// check for game end condition
    	if (flags & GAME_END) {
 80006ce:	4b6b      	ldr	r3, [pc, #428]	@ (800087c <main+0x2a4>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d03d      	beq.n	8000756 <main+0x17e>
    		LcdClear();
 80006da:	f7ff fe37 	bl	800034c <LcdClear>
    		LcdGoto(0, 0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fe7f 	bl	80003e4 <LcdGoto>
    		LcdPutS(endMessage);
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fe38 	bl	8000360 <LcdPutS>
    		LcdGoto(1, 0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff fe76 	bl	80003e4 <LcdGoto>
			LcdPutS(endScore);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fe30 	bl	8000360 <LcdPutS>
			snprintf(endScore, sizeof(endScore), "H: %d C: %d", highScore, currentScore);
 8000700:	1d38      	adds	r0, r7, #4
 8000702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000708:	4a5d      	ldr	r2, [pc, #372]	@ (8000880 <main+0x2a8>)
 800070a:	2111      	movs	r1, #17
 800070c:	f004 f938 	bl	8004980 <sniprintf>
    		if(highScore < currentScore){
 8000710:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000714:	429a      	cmp	r2, r3
 8000716:	da1c      	bge.n	8000752 <main+0x17a>
    			char currentScoreString[4];
    			sprintf(currentScoreString, "%d", currentScore);
 8000718:	463b      	mov	r3, r7
 800071a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800071c:	4959      	ldr	r1, [pc, #356]	@ (8000884 <main+0x2ac>)
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f964 	bl	80049ec <siprintf>
				EEPROM_SEND(0x0C,currentScoreString[0],currentScoreString[1]);					// Address at 0x0C is randomly chosen.
 8000724:	783b      	ldrb	r3, [r7, #0]
 8000726:	787a      	ldrb	r2, [r7, #1]
 8000728:	4619      	mov	r1, r3
 800072a:	200c      	movs	r0, #12
 800072c:	f000 fa54 	bl	8000bd8 <EEPROM_SEND>
				EEPROM_SEND(0x0E,currentScoreString[2],currentScoreString[3]);
 8000730:	78bb      	ldrb	r3, [r7, #2]
 8000732:	78fa      	ldrb	r2, [r7, #3]
 8000734:	4619      	mov	r1, r3
 8000736:	200e      	movs	r0, #14
 8000738:	f000 fa4e 	bl	8000bd8 <EEPROM_SEND>
				EEPROM_SEND(0x010,currentScoreString[4],currentScoreString[5]);
 800073c:	793b      	ldrb	r3, [r7, #4]
 800073e:	797a      	ldrb	r2, [r7, #5]
 8000740:	4619      	mov	r1, r3
 8000742:	2010      	movs	r0, #16
 8000744:	f000 fa48 	bl	8000bd8 <EEPROM_SEND>
				EEPROM_SEND(0x012,'\0','\0');
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2012      	movs	r0, #18
 800074e:	f000 fa43 	bl	8000bd8 <EEPROM_SEND>
    		}
    		return 0;
 8000752:	2300      	movs	r3, #0
 8000754:	e0e4      	b.n	8000920 <main+0x348>
    	}

        // Check if need to scan and process keys
        if ((sTimer[KEY_SCAN_TIMER] == 0) && !(flags & GAME_END) ) {
 8000756:	4b4c      	ldr	r3, [pc, #304]	@ (8000888 <main+0x2b0>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10c      	bne.n	8000778 <main+0x1a0>
 800075e:	4b47      	ldr	r3, [pc, #284]	@ (800087c <main+0x2a4>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	2b00      	cmp	r3, #0
 8000768:	d106      	bne.n	8000778 <main+0x1a0>
            Keypadscan();
 800076a:	f000 fb9f 	bl	8000eac <Keypadscan>
            KeyProcess();
 800076e:	f000 fd87 	bl	8001280 <KeyProcess>
            sTimer[KEY_SCAN_TIMER] = KEY_SCAN_TIME;
 8000772:	4b45      	ldr	r3, [pc, #276]	@ (8000888 <main+0x2b0>)
 8000774:	220a      	movs	r2, #10
 8000776:	801a      	strh	r2, [r3, #0]
        }

        if ((sTimer[SCORE_TIMER] == 0)){
 8000778:	4b43      	ldr	r3, [pc, #268]	@ (8000888 <main+0x2b0>)
 800077a:	891b      	ldrh	r3, [r3, #8]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d105      	bne.n	800078c <main+0x1b4>
        	currentScore++;
 8000780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000782:	3301      	adds	r3, #1
 8000784:	663b      	str	r3, [r7, #96]	@ 0x60
        	sTimer[SCORE_TIMER] = SCORE_TIME;
 8000786:	4b40      	ldr	r3, [pc, #256]	@ (8000888 <main+0x2b0>)
 8000788:	220a      	movs	r2, #10
 800078a:	811a      	strh	r2, [r3, #8]
        }

        // frame logic goes here
        if ((sTimer[LCD_SCROLL_TIMER] == 0) && !(flags & GAME_END)) {
 800078c:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <main+0x2b0>)
 800078e:	885b      	ldrh	r3, [r3, #2]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d19c      	bne.n	80006ce <main+0xf6>
 8000794:	4b39      	ldr	r3, [pc, #228]	@ (800087c <main+0x2a4>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	d196      	bne.n	80006ce <main+0xf6>
        	// update the environment cells first
        	updateCellsEnv();
 80007a0:	f000 faa0 	bl	8000ce4 <updateCellsEnv>

        	// update player position based on logic
        	updatePlayerPos();
 80007a4:	f000 f8c4 	bl	8000930 <updatePlayerPos>

        	// check for game end
        	if(character.row0Occupied && envCells[0].environmentOccupied)
 80007a8:	4b38      	ldr	r3, [pc, #224]	@ (800088c <main+0x2b4>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00b      	beq.n	80007c8 <main+0x1f0>
 80007b0:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <main+0x2b8>)
 80007b2:	795b      	ldrb	r3, [r3, #5]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d007      	beq.n	80007c8 <main+0x1f0>
        	{
        		flags |= GAME_END;
 80007b8:	4b30      	ldr	r3, [pc, #192]	@ (800087c <main+0x2a4>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <main+0x2a4>)
 80007c4:	801a      	strh	r2, [r3, #0]
        		continue;
 80007c6:	e0aa      	b.n	800091e <main+0x346>
        	} else if (character.row1Occupied && envCells[ROWLENGTH].environmentOccupied) {
 80007c8:	4b30      	ldr	r3, [pc, #192]	@ (800088c <main+0x2b4>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00c      	beq.n	80007ea <main+0x212>
 80007d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <main+0x2b8>)
 80007d2:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d007      	beq.n	80007ea <main+0x212>
        		flags |= GAME_END;
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <main+0x2a4>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b25      	ldr	r3, [pc, #148]	@ (800087c <main+0x2a4>)
 80007e6:	801a      	strh	r2, [r3, #0]
        		continue;
 80007e8:	e099      	b.n	800091e <main+0x346>
        	}

        	// game hasn't ended so we update player on screen
        	// fill 0 with character if present otherwise with env
        	if (character.row0Occupied) {
 80007ea:	4b28      	ldr	r3, [pc, #160]	@ (800088c <main+0x2b4>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00a      	beq.n	8000808 <main+0x230>
        		LcdGoto(0,0);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fdf5 	bl	80003e4 <LcdGoto>
        		LcdPutCh(character.topState);
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <main+0x2b4>)
 80007fc:	88db      	ldrh	r3, [r3, #6]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fdc2 	bl	800038a <LcdPutCh>
 8000806:	e008      	b.n	800081a <main+0x242>
        	} else {
        		LcdGoto(0,0);
 8000808:	2100      	movs	r1, #0
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff fdea 	bl	80003e4 <LcdGoto>
        		LcdPutCh(envCells[0].state);
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <main+0x2b8>)
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fdb8 	bl	800038a <LcdPutCh>
        	}
        	if (character.row1Occupied) {
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <main+0x2b4>)
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d00a      	beq.n	8000838 <main+0x260>
        		LcdGoto(1,0);
 8000822:	2100      	movs	r1, #0
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff fddd 	bl	80003e4 <LcdGoto>
        		LcdPutCh(character.botState);
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <main+0x2b4>)
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fdaa 	bl	800038a <LcdPutCh>
 8000836:	e009      	b.n	800084c <main+0x274>
        	} else {
        		LcdGoto(1,0);
 8000838:	2100      	movs	r1, #0
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fdd2 	bl	80003e4 <LcdGoto>
        		LcdPutCh(envCells[ROWLENGTH].state);
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <main+0x2b8>)
 8000842:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fd9f 	bl	800038a <LcdPutCh>
        	}

            // now fill buffers with rest of environment and display
        	for (int i = 0; i < ROWLENGTH-1; i++) {
 800084c:	2300      	movs	r3, #0
 800084e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000850:	e044      	b.n	80008dc <main+0x304>
 8000852:	bf00      	nop
 8000854:	20000230 	.word	0x20000230
 8000858:	200002e0 	.word	0x200002e0
 800085c:	20000214 	.word	0x20000214
 8000860:	20000220 	.word	0x20000220
 8000864:	20000228 	.word	0x20000228
 8000868:	2000016c 	.word	0x2000016c
 800086c:	20000164 	.word	0x20000164
 8000870:	2000015c 	.word	0x2000015c
 8000874:	08005ec0 	.word	0x08005ec0
 8000878:	0001869f 	.word	0x0001869f
 800087c:	20000202 	.word	0x20000202
 8000880:	08005eb0 	.word	0x08005eb0
 8000884:	08005ebc 	.word	0x08005ebc
 8000888:	200001f8 	.word	0x200001f8
 800088c:	20000150 	.word	0x20000150
 8000890:	20000090 	.word	0x20000090
        		topbuff[i] = envCells[i+1].state;
 8000894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	4923      	ldr	r1, [pc, #140]	@ (8000928 <main+0x350>)
 800089a:	4613      	mov	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	440b      	add	r3, r1
 80008a4:	3304      	adds	r3, #4
 80008a6:	7819      	ldrb	r1, [r3, #0]
 80008a8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80008ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008ae:	4413      	add	r3, r2
 80008b0:	460a      	mov	r2, r1
 80008b2:	701a      	strb	r2, [r3, #0]
        		bottombuff[i] = envCells[ROWLENGTH+i+1].state;
 80008b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008b6:	f103 0211 	add.w	r2, r3, #17
 80008ba:	491b      	ldr	r1, [pc, #108]	@ (8000928 <main+0x350>)
 80008bc:	4613      	mov	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4413      	add	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	440b      	add	r3, r1
 80008c6:	3304      	adds	r3, #4
 80008c8:	7819      	ldrb	r1, [r3, #0]
 80008ca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80008ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008d0:	4413      	add	r3, r2
 80008d2:	460a      	mov	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
        	for (int i = 0; i < ROWLENGTH-1; i++) {
 80008d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008d8:	3301      	adds	r3, #1
 80008da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80008dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80008de:	2b0e      	cmp	r3, #14
 80008e0:	ddd8      	ble.n	8000894 <main+0x2bc>
        	}

        	// end with null
        	topbuff[ROWLENGTH-1] = '\0';
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        	bottombuff[ROWLENGTH-1] = '\0';
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

            HAL_Delay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f001 fae4 	bl	8001ebc <HAL_Delay>
            LcdGoto(0, 1);
 80008f4:	2101      	movs	r1, #1
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff fd74 	bl	80003e4 <LcdGoto>
            LcdPutS(topbuff);
 80008fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fd2d 	bl	8000360 <LcdPutS>

            LcdGoto(1, 1);
 8000906:	2101      	movs	r1, #1
 8000908:	2001      	movs	r0, #1
 800090a:	f7ff fd6b 	bl	80003e4 <LcdGoto>
            LcdPutS(bottombuff);
 800090e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fd24 	bl	8000360 <LcdPutS>

            // Reset the LCD_SCROLL_TIMER to control the game speed
            sTimer[LCD_SCROLL_TIMER] = LCD_SCROLL_TIME;
 8000918:	4b04      	ldr	r3, [pc, #16]	@ (800092c <main+0x354>)
 800091a:	2264      	movs	r2, #100	@ 0x64
 800091c:	805a      	strh	r2, [r3, #2]
    	if (flags & GAME_END) {
 800091e:	e6d6      	b.n	80006ce <main+0xf6>
        }
	}
}
 8000920:	4618      	mov	r0, r3
 8000922:	3768      	adds	r7, #104	@ 0x68
 8000924:	46bd      	mov	sp, r7
 8000926:	bdb0      	pop	{r4, r5, r7, pc}
 8000928:	20000090 	.word	0x20000090
 800092c:	200001f8 	.word	0x200001f8

08000930 <updatePlayerPos>:


void updatePlayerPos() {
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	if (character.jumping) {
 8000934:	4b51      	ldr	r3, [pc, #324]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	2b00      	cmp	r3, #0
 800093a:	f000 809b 	beq.w	8000a74 <updatePlayerPos+0x144>

		// If we have reached the last frame of animation set back to ground and ready to jump again
		if (character.jumpFrame >= JUMPFRAMES) {
 800093e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000940:	889b      	ldrh	r3, [r3, #4]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d912      	bls.n	800096c <updatePlayerPos+0x3c>
			character.jumping = false;
 8000946:	4b4d      	ldr	r3, [pc, #308]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000948:	2200      	movs	r2, #0
 800094a:	709a      	strb	r2, [r3, #2]
			character.jumpFrame = 0;
 800094c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a7c <updatePlayerPos+0x14c>)
 800094e:	2200      	movs	r2, #0
 8000950:	809a      	strh	r2, [r3, #4]
			character.topState = (unsigned short)' ';
 8000952:	4b4a      	ldr	r3, [pc, #296]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000954:	2220      	movs	r2, #32
 8000956:	80da      	strh	r2, [r3, #6]
			character.botState = FULL_IDX;
 8000958:	4b48      	ldr	r3, [pc, #288]	@ (8000a7c <updatePlayerPos+0x14c>)
 800095a:	2200      	movs	r2, #0
 800095c:	811a      	strh	r2, [r3, #8]
			character.row0Occupied = false;
 800095e:	4b47      	ldr	r3, [pc, #284]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
			character.row1Occupied = true;
 8000964:	4b45      	ldr	r3, [pc, #276]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000966:	2201      	movs	r2, #1
 8000968:	705a      	strb	r2, [r3, #1]
			return;
 800096a:	e083      	b.n	8000a74 <updatePlayerPos+0x144>
		}

		switch (character.jumpFrame) {
 800096c:	4b43      	ldr	r3, [pc, #268]	@ (8000a7c <updatePlayerPos+0x14c>)
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d86c      	bhi.n	8000a4e <updatePlayerPos+0x11e>
 8000974:	a201      	add	r2, pc, #4	@ (adr r2, 800097c <updatePlayerPos+0x4c>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	08000991 	.word	0x08000991
 8000980:	080009b7 	.word	0x080009b7
 8000984:	080009dd 	.word	0x080009dd
 8000988:	08000a03 	.word	0x08000a03
 800098c:	08000a29 	.word	0x08000a29
			case 0:
				// we are now in takeoff (to give grave making bottom hitbox off)
				character.jumpFrame += 1;
 8000990:	4b3a      	ldr	r3, [pc, #232]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000992:	889b      	ldrh	r3, [r3, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b38      	ldr	r3, [pc, #224]	@ (8000a7c <updatePlayerPos+0x14c>)
 800099a:	809a      	strh	r2, [r3, #4]
				character.topState = TOP_HALF_IDX;
 800099c:	4b37      	ldr	r3, [pc, #220]	@ (8000a7c <updatePlayerPos+0x14c>)
 800099e:	2202      	movs	r2, #2
 80009a0:	80da      	strh	r2, [r3, #6]
				character.botState = BOT_HALF_IDX;
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = true;
 80009a8:	4b34      	ldr	r3, [pc, #208]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = false;
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	705a      	strb	r2, [r3, #1]
				break;
 80009b4:	e05e      	b.n	8000a74 <updatePlayerPos+0x144>
			case 1:
				// we are now in flight
				character.jumpFrame += 1;
 80009b6:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009b8:	889b      	ldrh	r3, [r3, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b29a      	uxth	r2, r3
 80009be:	4b2f      	ldr	r3, [pc, #188]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009c0:	809a      	strh	r2, [r3, #4]
				character.topState = FULL_IDX;
 80009c2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	80da      	strh	r2, [r3, #6]
				character.botState = (unsigned short)' ';
 80009c8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009ca:	2220      	movs	r2, #32
 80009cc:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = true;
 80009ce:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = false;
 80009d4:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	705a      	strb	r2, [r3, #1]
				break;
 80009da:	e04b      	b.n	8000a74 <updatePlayerPos+0x144>
			case 2:
				// we are now in flight
				character.jumpFrame += 1;
 80009dc:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009de:	889b      	ldrh	r3, [r3, #4]
 80009e0:	3301      	adds	r3, #1
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009e6:	809a      	strh	r2, [r3, #4]
				character.topState = FULL_IDX;
 80009e8:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	80da      	strh	r2, [r3, #6]
				character.botState = (unsigned short)' ';
 80009ee:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009f0:	2220      	movs	r2, #32
 80009f2:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = true;
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = false;
 80009fa:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <updatePlayerPos+0x14c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	705a      	strb	r2, [r3, #1]
				break;
 8000a00:	e038      	b.n	8000a74 <updatePlayerPos+0x144>
			case 3:
				// we are now in flight
				character.jumpFrame += 1;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a04:	889b      	ldrh	r3, [r3, #4]
 8000a06:	3301      	adds	r3, #1
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a0c:	809a      	strh	r2, [r3, #4]
				character.topState = FULL_IDX;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	80da      	strh	r2, [r3, #6]
				character.botState = (unsigned short)' ';
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a16:	2220      	movs	r2, #32
 8000a18:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = true;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = false;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	705a      	strb	r2, [r3, #1]
				break;
 8000a26:	e025      	b.n	8000a74 <updatePlayerPos+0x144>
			case 4:
				// we are now in landing
				character.jumpFrame += 1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a2a:	889b      	ldrh	r3, [r3, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a32:	809a      	strh	r2, [r3, #4]
				character.topState = TOP_HALF_IDX;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	80da      	strh	r2, [r3, #6]
				character.botState = BOT_HALF_IDX;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = false;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = true;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	705a      	strb	r2, [r3, #1]
				break;
 8000a4c:	e012      	b.n	8000a74 <updatePlayerPos+0x144>
			default:
				// we are now on the ground
				character.jumping = false;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	709a      	strb	r2, [r3, #2]
				character.jumpFrame = 0;
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	809a      	strh	r2, [r3, #4]
				character.topState = (unsigned short)' ';
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	80da      	strh	r2, [r3, #6]
				character.botState = FULL_IDX;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = false;
 8000a66:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = true;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <updatePlayerPos+0x14c>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	705a      	strb	r2, [r3, #1]
				break;
 8000a72:	bf00      	nop
		}

	}
}
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20000150 	.word	0x20000150

08000a80 <EEPROM_READ_PASS>:

char *EEPROM_READ_PASS(unsigned short addr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
	static char xyz[20];

	uint8_t i;

	// Read two bytes. Check separately until null is found
	for (i=0; i<10; i++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	77fb      	strb	r3, [r7, #31]
 8000a8e:	e038      	b.n	8000b02 <EEPROM_READ_PASS+0x82>
	{
	  EEPROM_READ_FUN(addr + (2 * i));		// read two bytes
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	7ffb      	ldrb	r3, [r7, #31]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f842 	bl	8000b28 <EEPROM_READ_FUN>

	  if (EE_Data[0] != '\0')
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <EEPROM_READ_PASS+0xa0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00c      	beq.n	8000ac6 <EEPROM_READ_PASS+0x46>
		temp[2*i] = EE_Data[0];
 8000aac:	7ffb      	ldrb	r3, [r7, #31]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b20 <EEPROM_READ_PASS+0xa0>)
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	3320      	adds	r3, #32
 8000ab6:	443b      	add	r3, r7
 8000ab8:	f803 2c18 	strb.w	r2, [r3, #-24]
	  {
		temp[2*i] = '\0';
		break;
	  }

	  if (EE_Data[1] != '\0')
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <EEPROM_READ_PASS+0xa0>)
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d012      	beq.n	8000aea <EEPROM_READ_PASS+0x6a>
 8000ac4:	e007      	b.n	8000ad6 <EEPROM_READ_PASS+0x56>
		temp[2*i] = '\0';
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	3320      	adds	r3, #32
 8000acc:	443b      	add	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f803 2c18 	strb.w	r2, [r3, #-24]
		break;
 8000ad4:	e018      	b.n	8000b08 <EEPROM_READ_PASS+0x88>
	  	temp[2*i+1] = EE_Data[1];
 8000ad6:	7ffb      	ldrb	r3, [r7, #31]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a10      	ldr	r2, [pc, #64]	@ (8000b20 <EEPROM_READ_PASS+0xa0>)
 8000ade:	7852      	ldrb	r2, [r2, #1]
 8000ae0:	3320      	adds	r3, #32
 8000ae2:	443b      	add	r3, r7
 8000ae4:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000ae8:	e008      	b.n	8000afc <EEPROM_READ_PASS+0x7c>
	  else
	  {
	    temp[2*i+1] = '\0';
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	3301      	adds	r3, #1
 8000af0:	3320      	adds	r3, #32
 8000af2:	443b      	add	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	f803 2c18 	strb.w	r2, [r3, #-24]
	  	break;
 8000afa:	e005      	b.n	8000b08 <EEPROM_READ_PASS+0x88>
	for (i=0; i<10; i++)
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	3301      	adds	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	d9c3      	bls.n	8000a90 <EEPROM_READ_PASS+0x10>
	  }
	}

	strcpy(xyz,temp);
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <EEPROM_READ_PASS+0xa4>)
 8000b10:	f004 f95b 	bl	8004dca <strcpy>
	return xyz;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <EEPROM_READ_PASS+0xa4>)
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000204 	.word	0x20000204
 8000b24:	2000032c 	.word	0x2000032c

08000b28 <EEPROM_READ_FUN>:

void EEPROM_READ_FUN(uint8_t EE_Addr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[2];

    HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_SET);         // Chip Select Enable
 8000b32:	2201      	movs	r2, #1
 8000b34:	2140      	movs	r1, #64	@ 0x40
 8000b36:	4825      	ldr	r0, [pc, #148]	@ (8000bcc <EEPROM_READ_FUN+0xa4>)
 8000b38:	f001 fca0 	bl	800247c <HAL_GPIO_WritePin>
    buf[0] = EEPROM_START;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	733b      	strb	r3, [r7, #12]
    buf[1] = (EEPROM_READ | (EE_Addr & 0x3F));
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, buf, 2, 100);
 8000b54:	f107 010c 	add.w	r1, r7, #12
 8000b58:	2364      	movs	r3, #100	@ 0x64
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	481c      	ldr	r0, [pc, #112]	@ (8000bd0 <EEPROM_READ_FUN+0xa8>)
 8000b5e:	f002 fb74 	bl	800324a <HAL_SPI_Transmit>

    HAL_SPI_Receive(&hspi1, EE_Data, 3, 100);
 8000b62:	2364      	movs	r3, #100	@ 0x64
 8000b64:	2203      	movs	r2, #3
 8000b66:	491b      	ldr	r1, [pc, #108]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000b68:	4819      	ldr	r0, [pc, #100]	@ (8000bd0 <EEPROM_READ_FUN+0xa8>)
 8000b6a:	f002 fce4 	bl	8003536 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_RESET);           // Chip Select disable
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2140      	movs	r1, #64	@ 0x40
 8000b72:	4816      	ldr	r0, [pc, #88]	@ (8000bcc <EEPROM_READ_FUN+0xa4>)
 8000b74:	f001 fc82 	bl	800247c <HAL_GPIO_WritePin>
    Delay_1_plus_us();
 8000b78:	f000 f892 	bl	8000ca0 <Delay_1_plus_us>

    EE_Data[0] <<= 1;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000b86:	701a      	strb	r2, [r3, #0]
    if (EE_Data[1] & 0x80)
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000b8a:	785b      	ldrb	r3, [r3, #1]
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	da06      	bge.n	8000ba0 <EEPROM_READ_FUN+0x78>
    	EE_Data[0] |= 0x01;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000b9e:	701a      	strb	r2, [r3, #0]

    EE_Data[1] <<= 1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000baa:	705a      	strb	r2, [r3, #1]
        if (EE_Data[2] & 0x80)
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000bae:	789b      	ldrb	r3, [r3, #2]
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	da06      	bge.n	8000bc4 <EEPROM_READ_FUN+0x9c>
        EE_Data[1] |= 0x01;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <EEPROM_READ_FUN+0xac>)
 8000bc2:	705a      	strb	r2, [r3, #1]
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	2000027c 	.word	0x2000027c
 8000bd4:	20000204 	.word	0x20000204

08000bd8 <EEPROM_SEND>:


void EEPROM_SEND(char EE_Addr, char EE_Data1, char EE_Data2)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	460b      	mov	r3, r1
 8000be4:	71bb      	strb	r3, [r7, #6]
 8000be6:	4613      	mov	r3, r2
 8000be8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[4];

    HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_SET);         // Chip Select Enable
 8000bea:	2201      	movs	r2, #1
 8000bec:	2140      	movs	r1, #64	@ 0x40
 8000bee:	482a      	ldr	r0, [pc, #168]	@ (8000c98 <EEPROM_SEND+0xc0>)
 8000bf0:	f001 fc44 	bl	800247c <HAL_GPIO_WritePin>
    buf[0] = EEPROM_START;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	733b      	strb	r3, [r7, #12]
    buf[1] = EEPROM_EWEN; //EEPROM_EWEN;
 8000bf8:	233f      	movs	r3, #63	@ 0x3f
 8000bfa:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, buf, 2, 100);
 8000bfc:	f107 010c 	add.w	r1, r7, #12
 8000c00:	2364      	movs	r3, #100	@ 0x64
 8000c02:	2202      	movs	r2, #2
 8000c04:	4825      	ldr	r0, [pc, #148]	@ (8000c9c <EEPROM_SEND+0xc4>)
 8000c06:	f002 fb20 	bl	800324a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_RESET);       // Chip Select disable
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2140      	movs	r1, #64	@ 0x40
 8000c0e:	4822      	ldr	r0, [pc, #136]	@ (8000c98 <EEPROM_SEND+0xc0>)
 8000c10:	f001 fc34 	bl	800247c <HAL_GPIO_WritePin>

    Delay_1_plus_us();
 8000c14:	f000 f844 	bl	8000ca0 <Delay_1_plus_us>

    HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_SET);         // Chip Select Enable
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2140      	movs	r1, #64	@ 0x40
 8000c1c:	481e      	ldr	r0, [pc, #120]	@ (8000c98 <EEPROM_SEND+0xc0>)
 8000c1e:	f001 fc2d 	bl	800247c <HAL_GPIO_WritePin>
    buf[0] = EEPROM_START;
 8000c22:	2301      	movs	r3, #1
 8000c24:	733b      	strb	r3, [r7, #12]
    buf[1] = (0x40 | (EE_Addr & 0x03F));        // WRITE command OR with 6-bit address
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	737b      	strb	r3, [r7, #13]
    buf[2] = EE_Data1;
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	73bb      	strb	r3, [r7, #14]
    buf[3] = EE_Data2;
 8000c3e:	797b      	ldrb	r3, [r7, #5]
 8000c40:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi1, buf, 4, 100);
 8000c42:	f107 010c 	add.w	r1, r7, #12
 8000c46:	2364      	movs	r3, #100	@ 0x64
 8000c48:	2204      	movs	r2, #4
 8000c4a:	4814      	ldr	r0, [pc, #80]	@ (8000c9c <EEPROM_SEND+0xc4>)
 8000c4c:	f002 fafd 	bl	800324a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_RESET);       // Chip Select disable
 8000c50:	2200      	movs	r2, #0
 8000c52:	2140      	movs	r1, #64	@ 0x40
 8000c54:	4810      	ldr	r0, [pc, #64]	@ (8000c98 <EEPROM_SEND+0xc0>)
 8000c56:	f001 fc11 	bl	800247c <HAL_GPIO_WritePin>

    HAL_Delay(20);
 8000c5a:	2014      	movs	r0, #20
 8000c5c:	f001 f92e 	bl	8001ebc <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_SET);         // Chip Select Enable
 8000c60:	2201      	movs	r2, #1
 8000c62:	2140      	movs	r1, #64	@ 0x40
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <EEPROM_SEND+0xc0>)
 8000c66:	f001 fc09 	bl	800247c <HAL_GPIO_WritePin>
    buf[0] = EEPROM_START;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	733b      	strb	r3, [r7, #12]
    buf[1] = EEPROM_EWDS;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, buf, 2, 100);
 8000c72:	f107 010c 	add.w	r1, r7, #12
 8000c76:	2364      	movs	r3, #100	@ 0x64
 8000c78:	2202      	movs	r2, #2
 8000c7a:	4808      	ldr	r0, [pc, #32]	@ (8000c9c <EEPROM_SEND+0xc4>)
 8000c7c:	f002 fae5 	bl	800324a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_RESET);           // Chip Select disable
 8000c80:	2200      	movs	r2, #0
 8000c82:	2140      	movs	r1, #64	@ 0x40
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <EEPROM_SEND+0xc0>)
 8000c86:	f001 fbf9 	bl	800247c <HAL_GPIO_WritePin>

    Delay_1_plus_us();
 8000c8a:	f000 f809 	bl	8000ca0 <Delay_1_plus_us>

}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	2000027c 	.word	0x2000027c

08000ca0 <Delay_1_plus_us>:


void Delay_1_plus_us()
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
    uint32_t time5now = htim5.Instance->CNT;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <Delay_1_plus_us+0x40>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cac:	607b      	str	r3, [r7, #4]
    while (htim5.Instance->CNT == time5now)
 8000cae:	bf00      	nop
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <Delay_1_plus_us+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d0f9      	beq.n	8000cb0 <Delay_1_plus_us+0x10>
        ; ;
    time5now = htim5.Instance->CNT;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <Delay_1_plus_us+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc2:	607b      	str	r3, [r7, #4]

    while (htim5.Instance->CNT == time5now)
 8000cc4:	bf00      	nop
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <Delay_1_plus_us+0x40>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d0f9      	beq.n	8000cc6 <Delay_1_plus_us+0x26>
        ; ;
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	200002e0 	.word	0x200002e0

08000ce4 <updateCellsEnv>:



void updateCellsEnv() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
	// update the frames by moving each to the left
	// '0' is leftmost index
	for (int i = 0; i < ROWLENGTH-1; i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	e058      	b.n	8000da2 <updateCellsEnv+0xbe>
		envCells[i].state = envCells[i + 1].state;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	496a      	ldr	r1, [pc, #424]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	440b      	add	r3, r1
 8000d00:	3304      	adds	r3, #4
 8000d02:	7818      	ldrb	r0, [r3, #0]
 8000d04:	4966      	ldr	r1, [pc, #408]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	440b      	add	r3, r1
 8000d12:	3304      	adds	r3, #4
 8000d14:	4602      	mov	r2, r0
 8000d16:	701a      	strb	r2, [r3, #0]
		envCells[i].environmentOccupied = envCells[i + 1].environmentOccupied;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	4960      	ldr	r1, [pc, #384]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	440b      	add	r3, r1
 8000d28:	3305      	adds	r3, #5
 8000d2a:	7818      	ldrb	r0, [r3, #0]
 8000d2c:	495c      	ldr	r1, [pc, #368]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	440b      	add	r3, r1
 8000d3a:	3305      	adds	r3, #5
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	701a      	strb	r2, [r3, #0]
		envCells[ROWLENGTH + i].state = envCells[ROWLENGTH + i + 1].state;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f103 0111 	add.w	r1, r3, #17
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f103 0210 	add.w	r2, r3, #16
 8000d4c:	4854      	ldr	r0, [pc, #336]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000d4e:	460b      	mov	r3, r1
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	440b      	add	r3, r1
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4403      	add	r3, r0
 8000d58:	3304      	adds	r3, #4
 8000d5a:	7818      	ldrb	r0, [r3, #0]
 8000d5c:	4950      	ldr	r1, [pc, #320]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	440b      	add	r3, r1
 8000d68:	3304      	adds	r3, #4
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	701a      	strb	r2, [r3, #0]
		envCells[ROWLENGTH + i].environmentOccupied = envCells[ROWLENGTH + i + 1].environmentOccupied;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f103 0111 	add.w	r1, r3, #17
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f103 0210 	add.w	r2, r3, #16
 8000d7a:	4849      	ldr	r0, [pc, #292]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	440b      	add	r3, r1
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4403      	add	r3, r0
 8000d86:	3305      	adds	r3, #5
 8000d88:	7818      	ldrb	r0, [r3, #0]
 8000d8a:	4945      	ldr	r1, [pc, #276]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	440b      	add	r3, r1
 8000d96:	3305      	adds	r3, #5
 8000d98:	4602      	mov	r2, r0
 8000d9a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ROWLENGTH-1; i++) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0e      	cmp	r3, #14
 8000da6:	dda3      	ble.n	8000cf0 <updateCellsEnv+0xc>
	}

	// now update the last cell randomly:
	// first check if it's ok for an obstacle to appear
	if (envCells[ROWLENGTH - 2].environmentOccupied ||
 8000da8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000daa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d122      	bne.n	8000df8 <updateCellsEnv+0x114>
		envCells[ROWLENGTH - 3].environmentOccupied ||
 8000db2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000db4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
	if (envCells[ROWLENGTH - 2].environmentOccupied ||
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d11d      	bne.n	8000df8 <updateCellsEnv+0x114>
		envCells[ROWLENGTH - 4].environmentOccupied ||
 8000dbc:	4b38      	ldr	r3, [pc, #224]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000dbe:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
		envCells[ROWLENGTH - 3].environmentOccupied ||
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d118      	bne.n	8000df8 <updateCellsEnv+0x114>
		envCells[ROWLENGTH - 5].environmentOccupied ||
 8000dc6:	4b36      	ldr	r3, [pc, #216]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000dc8:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
		envCells[ROWLENGTH - 4].environmentOccupied ||
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d113      	bne.n	8000df8 <updateCellsEnv+0x114>
		envCells[NUMCELLS  - 2].environmentOccupied ||
 8000dd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000dd2:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
		envCells[ROWLENGTH - 5].environmentOccupied ||
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10e      	bne.n	8000df8 <updateCellsEnv+0x114>
		envCells[NUMCELLS  - 3].environmentOccupied ||
 8000dda:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000ddc:	f893 30b3 	ldrb.w	r3, [r3, #179]	@ 0xb3
		envCells[NUMCELLS  - 2].environmentOccupied ||
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d109      	bne.n	8000df8 <updateCellsEnv+0x114>
		envCells[NUMCELLS  - 4].environmentOccupied ||
 8000de4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000de6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
		envCells[NUMCELLS  - 3].environmentOccupied ||
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <updateCellsEnv+0x114>
		envCells[NUMCELLS  - 5].environmentOccupied) {
 8000dee:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000df0:	f893 30a7 	ldrb.w	r3, [r3, #167]	@ 0xa7
		envCells[NUMCELLS  - 4].environmentOccupied ||
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d010      	beq.n	8000e1a <updateCellsEnv+0x136>
		envCells[ROWLENGTH - 1].state = ' ';
 8000df8:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
		envCells[ROWLENGTH - 1].environmentOccupied = false;
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
		envCells[NUMCELLS  - 1].state = ' ';
 8000e08:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
		envCells[NUMCELLS  - 1].environmentOccupied = false;
 8000e10:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
			envCells[ROWLENGTH - 1].environmentOccupied = false;
			envCells[NUMCELLS  - 1].state = ' ';
			envCells[NUMCELLS  - 1].environmentOccupied = false;
		}
	}
}
 8000e18:	e03d      	b.n	8000e96 <updateCellsEnv+0x1b2>
		if (rand() < (0.3 * RAND_MAX)) {
 8000e1a:	f003 fe09 	bl	8004a30 <rand>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a20      	ldr	r2, [pc, #128]	@ (8000ea4 <updateCellsEnv+0x1c0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	dc10      	bgt.n	8000e48 <updateCellsEnv+0x164>
			envCells[ROWLENGTH - 1].state = ' ';
 8000e26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e28:	2220      	movs	r2, #32
 8000e2a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			envCells[ROWLENGTH - 1].environmentOccupied = false;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			envCells[NUMCELLS  - 1].state = BOT_OBSTACLE;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e38:	224f      	movs	r2, #79	@ 0x4f
 8000e3a:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
			envCells[NUMCELLS  - 1].environmentOccupied = true;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
}
 8000e46:	e026      	b.n	8000e96 <updateCellsEnv+0x1b2>
		} else if (rand() < (0.1 * RAND_MAX)) {
 8000e48:	f003 fdf2 	bl	8004a30 <rand>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <updateCellsEnv+0x1c4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	dc10      	bgt.n	8000e76 <updateCellsEnv+0x192>
			envCells[ROWLENGTH - 1].state = TOP_OBSTACLE;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e56:	2256      	movs	r2, #86	@ 0x56
 8000e58:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			envCells[ROWLENGTH - 1].environmentOccupied = true;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			envCells[NUMCELLS  - 1].state = ' ';
 8000e64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e66:	2220      	movs	r2, #32
 8000e68:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
			envCells[NUMCELLS  - 1].environmentOccupied = false;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
}
 8000e74:	e00f      	b.n	8000e96 <updateCellsEnv+0x1b2>
			envCells[ROWLENGTH - 1].state = ' ';
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e78:	2220      	movs	r2, #32
 8000e7a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			envCells[ROWLENGTH - 1].environmentOccupied = false;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			envCells[NUMCELLS  - 1].state = ' ';
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e88:	2220      	movs	r2, #32
 8000e8a:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
			envCells[NUMCELLS  - 1].environmentOccupied = false;
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <updateCellsEnv+0x1bc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000090 	.word	0x20000090
 8000ea4:	26666666 	.word	0x26666666
 8000ea8:	0ccccccc 	.word	0x0ccccccc

08000eac <Keypadscan>:




void Keypadscan() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
    unsigned short sIndex;
    unsigned short Temp;
    // Clear all key records
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	80fb      	strh	r3, [r7, #6]
 8000eb6:	e007      	b.n	8000ec8 <Keypadscan+0x1c>
        sKeyCurrentCol[sIndex] = 0x00;
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	4a91      	ldr	r2, [pc, #580]	@ (8001100 <Keypadscan+0x254>)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	80fb      	strh	r3, [r7, #6]
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d9f4      	bls.n	8000eb8 <Keypadscan+0xc>
    }
    // Read all 3 column
    for (sIndex = 0; sIndex < Number_of_Keys; sIndex++) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	e0bf      	b.n	8001054 <Keypadscan+0x1a8>
        GPIOA->ODR &= ~(PA4 | PA1 | PA0);
 8000ed4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ede:	f023 0313 	bic.w	r3, r3, #19
 8000ee2:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= sKeyControl[sIndex].sKeySend;
 8000ee4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ee8:	6959      	ldr	r1, [r3, #20]
 8000eea:	88fa      	ldrh	r2, [r7, #6]
 8000eec:	4885      	ldr	r0, [pc, #532]	@ (8001104 <Keypadscan+0x258>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4403      	add	r3, r0
 8000ef8:	3304      	adds	r3, #4
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6153      	str	r3, [r2, #20]
        HAL_Delay(0.5);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 ffd9 	bl	8001ebc <HAL_Delay>
        switch (sKeyControl[sIndex].sKeyCommand) {
 8000f0a:	88fa      	ldrh	r2, [r7, #6]
 8000f0c:	497d      	ldr	r1, [pc, #500]	@ (8001104 <Keypadscan+0x258>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	330a      	adds	r3, #10
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	2b0b      	cmp	r3, #11
 8000f1e:	bf8c      	ite	hi
 8000f20:	2201      	movhi	r2, #1
 8000f22:	2200      	movls	r2, #0
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	f040 8091 	bne.w	800104e <Keypadscan+0x1a2>
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	f240 6266 	movw	r2, #1638	@ 0x666
 8000f36:	401a      	ands	r2, r3
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2201      	movne	r2, #1
 8000f3e:	2200      	moveq	r2, #0
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d138      	bne.n	8000fb8 <Keypadscan+0x10c>
 8000f46:	f640 0288 	movw	r2, #2184	@ 0x888
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	bf14      	ite	ne
 8000f50:	2201      	movne	r2, #1
 8000f52:	2200      	moveq	r2, #0
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d152      	bne.n	8001000 <Keypadscan+0x154>
 8000f5a:	f240 1211 	movw	r2, #273	@ 0x111
 8000f5e:	401a      	ands	r2, r3
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	bf14      	ite	ne
 8000f64:	2301      	movne	r3, #1
 8000f66:	2300      	moveq	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d06f      	beq.n	800104e <Keypadscan+0x1a2>
            case ONE_command:
            case TWO_command:
            case THREE_command:
                if (GPIOA->IDR & sKeyControl[sIndex].sKeyRead)
 8000f6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f72:	6919      	ldr	r1, [r3, #16]
 8000f74:	88fa      	ldrh	r2, [r7, #6]
 8000f76:	4863      	ldr	r0, [pc, #396]	@ (8001104 <Keypadscan+0x258>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4403      	add	r3, r0
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	400b      	ands	r3, r1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d05e      	beq.n	8001048 <Keypadscan+0x19c>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000f8a:	88fa      	ldrh	r2, [r7, #6]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000f8c:	88f9      	ldrh	r1, [r7, #6]
 8000f8e:	485d      	ldr	r0, [pc, #372]	@ (8001104 <Keypadscan+0x258>)
 8000f90:	460b      	mov	r3, r1
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	440b      	add	r3, r1
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4403      	add	r3, r0
 8000f9a:	3306      	adds	r3, #6
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000fa0:	4958      	ldr	r1, [pc, #352]	@ (8001104 <Keypadscan+0x258>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	3302      	adds	r3, #2
 8000fae:	881a      	ldrh	r2, [r3, #0]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000fb0:	4b53      	ldr	r3, [pc, #332]	@ (8001100 <Keypadscan+0x254>)
 8000fb2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
                break;
 8000fb6:	e047      	b.n	8001048 <Keypadscan+0x19c>
            case FIVE_command:
            case SIX_command:
            case SEVEN_command:
            case EIGHT_command:
            case NINE_command:
                if (GPIOC->IDR & sKeyControl[sIndex].sKeyRead)
 8000fb8:	4b53      	ldr	r3, [pc, #332]	@ (8001108 <Keypadscan+0x25c>)
 8000fba:	6919      	ldr	r1, [r3, #16]
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	4851      	ldr	r0, [pc, #324]	@ (8001104 <Keypadscan+0x258>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4403      	add	r3, r0
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	400b      	ands	r3, r1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d03c      	beq.n	800104c <Keypadscan+0x1a0>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000fd4:	88f9      	ldrh	r1, [r7, #6]
 8000fd6:	484b      	ldr	r0, [pc, #300]	@ (8001104 <Keypadscan+0x258>)
 8000fd8:	460b      	mov	r3, r1
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	440b      	add	r3, r1
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4403      	add	r3, r0
 8000fe2:	3306      	adds	r3, #6
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000fe8:	4946      	ldr	r1, [pc, #280]	@ (8001104 <Keypadscan+0x258>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	881a      	ldrh	r2, [r3, #0]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000ff8:	4b41      	ldr	r3, [pc, #260]	@ (8001100 <Keypadscan+0x254>)
 8000ffa:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
                break;
 8000ffe:	e025      	b.n	800104c <Keypadscan+0x1a0>
            case STAR_command:
            case ZERO_command:
            case POUND_command:
                if (GPIOB->IDR & sKeyControl[sIndex].sKeyRead)
 8001000:	4b42      	ldr	r3, [pc, #264]	@ (800110c <Keypadscan+0x260>)
 8001002:	6919      	ldr	r1, [r3, #16]
 8001004:	88fa      	ldrh	r2, [r7, #6]
 8001006:	483f      	ldr	r0, [pc, #252]	@ (8001104 <Keypadscan+0x258>)
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4403      	add	r3, r0
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	400b      	ands	r3, r1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d019      	beq.n	800104e <Keypadscan+0x1a2>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
                        sKeyControl[sIndex].sKeyReadTempPos;
 800101a:	88fa      	ldrh	r2, [r7, #6]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 800101c:	88f9      	ldrh	r1, [r7, #6]
 800101e:	4839      	ldr	r0, [pc, #228]	@ (8001104 <Keypadscan+0x258>)
 8001020:	460b      	mov	r3, r1
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	440b      	add	r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4403      	add	r3, r0
 800102a:	3306      	adds	r3, #6
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
                        sKeyControl[sIndex].sKeyReadTempPos;
 8001030:	4934      	ldr	r1, [pc, #208]	@ (8001104 <Keypadscan+0x258>)
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	3302      	adds	r3, #2
 800103e:	881a      	ldrh	r2, [r3, #0]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <Keypadscan+0x254>)
 8001042:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 8001046:	e002      	b.n	800104e <Keypadscan+0x1a2>
                break;
 8001048:	bf00      	nop
 800104a:	e000      	b.n	800104e <Keypadscan+0x1a2>
                break;
 800104c:	bf00      	nop
    for (sIndex = 0; sIndex < Number_of_Keys; sIndex++) {
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	3301      	adds	r3, #1
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	2b0b      	cmp	r3, #11
 8001058:	f67f af3c 	bls.w	8000ed4 <Keypadscan+0x28>
        }
    }
    // Check if a key is steadily read
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 800105c:	2300      	movs	r3, #0
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	e012      	b.n	8001088 <Keypadscan+0x1dc>
        if ((sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex]) &&
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	4a26      	ldr	r2, [pc, #152]	@ (8001100 <Keypadscan+0x254>)
 8001066:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	4928      	ldr	r1, [pc, #160]	@ (8001110 <Keypadscan+0x264>)
 800106e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001072:	429a      	cmp	r2, r3
 8001074:	d105      	bne.n	8001082 <Keypadscan+0x1d6>
            (sKeyCurrentCol[sIndex] != 0x0000))
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <Keypadscan+0x254>)
 800107a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        if ((sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex]) &&
 800107e:	2b00      	cmp	r3, #0
 8001080:	d106      	bne.n	8001090 <Keypadscan+0x1e4>
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	3301      	adds	r3, #1
 8001086:	80fb      	strh	r3, [r7, #6]
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d9e9      	bls.n	8001062 <Keypadscan+0x1b6>
 800108e:	e000      	b.n	8001092 <Keypadscan+0x1e6>
            break;
 8001090:	bf00      	nop
    }
    if (sIndex < Number_of_Cols) {
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	2b02      	cmp	r3, #2
 8001096:	f200 80ae 	bhi.w	80011f6 <Keypadscan+0x34a>
        // Check for push on/ push off (Low To High)
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 800109a:	2300      	movs	r3, #0
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	e017      	b.n	80010d0 <Keypadscan+0x224>
            Temp = sKeyCurrentCol[sIndex] ^ sKeyPreviousCol[sIndex];
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <Keypadscan+0x254>)
 80010a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	491a      	ldr	r1, [pc, #104]	@ (8001114 <Keypadscan+0x268>)
 80010ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010b0:	4053      	eors	r3, r2
 80010b2:	80bb      	strh	r3, [r7, #4]
            sKeyLow2HighCol[sIndex] = (sKeyCurrentCol[sIndex] & Temp);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <Keypadscan+0x254>)
 80010b8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	88ba      	ldrh	r2, [r7, #4]
 80010c0:	400a      	ands	r2, r1
 80010c2:	b291      	uxth	r1, r2
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <Keypadscan+0x26c>)
 80010c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	3301      	adds	r3, #1
 80010ce:	80fb      	strh	r3, [r7, #6]
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d9e4      	bls.n	80010a0 <Keypadscan+0x1f4>
        }
        // Update Previous records
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	e00a      	b.n	80010f2 <Keypadscan+0x246>
            sKeyPreviousCol[sIndex] = sKeyCurrentCol[sIndex];
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	4907      	ldr	r1, [pc, #28]	@ (8001100 <Keypadscan+0x254>)
 80010e2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80010e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <Keypadscan+0x268>)
 80010e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	3301      	adds	r3, #1
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d9f1      	bls.n	80010dc <Keypadscan+0x230>
        }
        // Find which key is JUST depressed (Low To High) or KeyRepeat detected
        for (sIndex = 0; sIndex < Number_of_Keys; sIndex++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	e077      	b.n	80011ee <Keypadscan+0x342>
 80010fe:	bf00      	nop
 8001100:	2000020c 	.word	0x2000020c
 8001104:	20000000 	.word	0x20000000
 8001108:	48000800 	.word	0x48000800
 800110c:	48000400 	.word	0x48000400
 8001110:	20000214 	.word	0x20000214
 8001114:	20000220 	.word	0x20000220
 8001118:	20000228 	.word	0x20000228
            if (sKeyLow2HighCol[sKeyControl[sIndex].sKeyCol] &
 800111c:	88fa      	ldrh	r2, [r7, #6]
 800111e:	494f      	ldr	r1, [pc, #316]	@ (800125c <Keypadscan+0x3b0>)
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	3306      	adds	r3, #6
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4b4b      	ldr	r3, [pc, #300]	@ (8001260 <Keypadscan+0x3b4>)
 8001132:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
                sKeyControl[sIndex].sKeyReadTempPos) {
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	4848      	ldr	r0, [pc, #288]	@ (800125c <Keypadscan+0x3b0>)
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4403      	add	r3, r0
 8001144:	3302      	adds	r3, #2
 8001146:	881b      	ldrh	r3, [r3, #0]
            if (sKeyLow2HighCol[sKeyControl[sIndex].sKeyCol] &
 8001148:	400b      	ands	r3, r1
 800114a:	b29b      	uxth	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d020      	beq.n	8001192 <Keypadscan+0x2e6>
                sKeyIssued = sKeyControl[sIndex].sKeyCommand;
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	4942      	ldr	r1, [pc, #264]	@ (800125c <Keypadscan+0x3b0>)
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	330a      	adds	r3, #10
 8001160:	881a      	ldrh	r2, [r3, #0]
 8001162:	4b40      	ldr	r3, [pc, #256]	@ (8001264 <Keypadscan+0x3b8>)
 8001164:	801a      	strh	r2, [r3, #0]
                sKeyStatus |= (KeyDetect | KeyLow2High);
 8001166:	4b40      	ldr	r3, [pc, #256]	@ (8001268 <Keypadscan+0x3bc>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	f043 0303 	orr.w	r3, r3, #3
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b3d      	ldr	r3, [pc, #244]	@ (8001268 <Keypadscan+0x3bc>)
 8001172:	801a      	strh	r2, [r3, #0]
                sTimer[KEY_WAIT_REPEAT_TIMER] = KEY_WAIT_REPEAT_TIME;
 8001174:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <Keypadscan+0x3c0>)
 8001176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800117a:	809a      	strh	r2, [r3, #4]
                sKeyStatus |= KeyRepeat;   // a new key comes in, set the repeat flag
 800117c:	4b3a      	ldr	r3, [pc, #232]	@ (8001268 <Keypadscan+0x3bc>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	b29a      	uxth	r2, r3
 8001186:	4b38      	ldr	r3, [pc, #224]	@ (8001268 <Keypadscan+0x3bc>)
 8001188:	801a      	strh	r2, [r3, #0]
                sIndexCopy = sIndex;  // save a copy of sIndex for push & held use
 800118a:	4a39      	ldr	r2, [pc, #228]	@ (8001270 <Keypadscan+0x3c4>)
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	8013      	strh	r3, [r2, #0]
				break;
 8001190:	e049      	b.n	8001226 <Keypadscan+0x37a>
            } else if ((sKeyStatus & KeyRepeat) &&
 8001192:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <Keypadscan+0x3bc>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d020      	beq.n	80011e0 <Keypadscan+0x334>
                       (sTimer[KEY_WAIT_REPEAT_TIMER] == 0)) {
 800119e:	4b33      	ldr	r3, [pc, #204]	@ (800126c <Keypadscan+0x3c0>)
 80011a0:	889b      	ldrh	r3, [r3, #4]
            } else if ((sKeyStatus & KeyRepeat) &&
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11c      	bne.n	80011e0 <Keypadscan+0x334>
                if (sTimer[KEY_REPEAT_TIMER] == 0) {
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <Keypadscan+0x3c0>)
 80011a8:	88db      	ldrh	r3, [r3, #6]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d11c      	bne.n	80011e8 <Keypadscan+0x33c>
                    sKeyIssued = sKeyControl[sIndexCopy].sKeyCommand;
 80011ae:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <Keypadscan+0x3c4>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4a29      	ldr	r2, [pc, #164]	@ (800125c <Keypadscan+0x3b0>)
 80011b6:	460b      	mov	r3, r1
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	440b      	add	r3, r1
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	330a      	adds	r3, #10
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <Keypadscan+0x3b8>)
 80011c6:	801a      	strh	r2, [r3, #0]
                    sKeyStatus |= (KeyDetect | KeyToBeRepeated);
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <Keypadscan+0x3bc>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	f043 0309 	orr.w	r3, r3, #9
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <Keypadscan+0x3bc>)
 80011d4:	801a      	strh	r2, [r3, #0]
                    sTimer[KEY_REPEAT_TIMER] = KEY_REPEAT_TIME;
 80011d6:	4b25      	ldr	r3, [pc, #148]	@ (800126c <Keypadscan+0x3c0>)
 80011d8:	f240 124d 	movw	r2, #333	@ 0x14d
 80011dc:	80da      	strh	r2, [r3, #6]
                if (sTimer[KEY_REPEAT_TIMER] == 0) {
 80011de:	e003      	b.n	80011e8 <Keypadscan+0x33c>
                }
            } else
                sKeyIssued = 0xFFFF;
 80011e0:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <Keypadscan+0x3b8>)
 80011e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e6:	801a      	strh	r2, [r3, #0]
        for (sIndex = 0; sIndex < Number_of_Keys; sIndex++) {
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	3301      	adds	r3, #1
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	2b0b      	cmp	r3, #11
 80011f2:	d993      	bls.n	800111c <Keypadscan+0x270>
 80011f4:	e017      	b.n	8001226 <Keypadscan+0x37a>
        }
    } else {
        sKeyStatus &= ~(KeyDetect | KeyLow2High | KeyToBeRepeated | KeyRepeat);
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <Keypadscan+0x3bc>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	f023 030f 	bic.w	r3, r3, #15
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <Keypadscan+0x3bc>)
 8001202:	801a      	strh	r2, [r3, #0]
        sTimer[KEY_REPEAT_TIMER] = 0;  // Reset repeat timer if no key
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <Keypadscan+0x3c0>)
 8001206:	2200      	movs	r2, #0
 8001208:	80da      	strh	r2, [r3, #6]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 800120a:	2300      	movs	r3, #0
 800120c:	80fb      	strh	r3, [r7, #6]
 800120e:	e007      	b.n	8001220 <Keypadscan+0x374>
            sKeyPreviousCol[sIndex] = 0;
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4a18      	ldr	r2, [pc, #96]	@ (8001274 <Keypadscan+0x3c8>)
 8001214:	2100      	movs	r1, #0
 8001216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	3301      	adds	r3, #1
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d9f4      	bls.n	8001210 <Keypadscan+0x364>
    }
    // Transfer Current reading to debounced reading
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8001226:	2300      	movs	r3, #0
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	e00f      	b.n	800124c <Keypadscan+0x3a0>
        sKeyDebouncedCol[sIndex] = sKeyCurrentCol[sIndex];
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	4911      	ldr	r1, [pc, #68]	@ (8001278 <Keypadscan+0x3cc>)
 8001232:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <Keypadscan+0x3d0>)
 8001238:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyLow2HighCol[sIndex] = 0;
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	4a08      	ldr	r2, [pc, #32]	@ (8001260 <Keypadscan+0x3b4>)
 8001240:	2100      	movs	r1, #0
 8001242:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	3301      	adds	r3, #1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d9ec      	bls.n	800122c <Keypadscan+0x380>
    }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000228 	.word	0x20000228
 8001264:	2000021a 	.word	0x2000021a
 8001268:	20000208 	.word	0x20000208
 800126c:	200001f8 	.word	0x200001f8
 8001270:	2000021c 	.word	0x2000021c
 8001274:	20000220 	.word	0x20000220
 8001278:	2000020c 	.word	0x2000020c
 800127c:	20000214 	.word	0x20000214

08001280 <KeyProcess>:
void KeyProcess() {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
    uint16_t sIndex;
    if ((sKeyStatus & KeyDetect) && (sKeyIssued != 0xFFFF)) {
 8001286:	4b9f      	ldr	r3, [pc, #636]	@ (8001504 <KeyProcess+0x284>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8133 	beq.w	80014fa <KeyProcess+0x27a>
 8001294:	4b9c      	ldr	r3, [pc, #624]	@ (8001508 <KeyProcess+0x288>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800129c:	4293      	cmp	r3, r2
 800129e:	f000 812c 	beq.w	80014fa <KeyProcess+0x27a>
        switch (sKeyIssued) {
 80012a2:	4b99      	ldr	r3, [pc, #612]	@ (8001508 <KeyProcess+0x288>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2b0b      	cmp	r3, #11
 80012a8:	f200 80f9 	bhi.w	800149e <KeyProcess+0x21e>
 80012ac:	a201      	add	r2, pc, #4	@ (adr r2, 80012b4 <KeyProcess+0x34>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012e5 	.word	0x080012e5
 80012b8:	0800130b 	.word	0x0800130b
 80012bc:	08001331 	.word	0x08001331
 80012c0:	08001357 	.word	0x08001357
 80012c4:	0800137d 	.word	0x0800137d
 80012c8:	080013a3 	.word	0x080013a3
 80012cc:	080013c7 	.word	0x080013c7
 80012d0:	080013eb 	.word	0x080013eb
 80012d4:	0800140f 	.word	0x0800140f
 80012d8:	08001433 	.word	0x08001433
 80012dc:	08001457 	.word	0x08001457
 80012e0:	0800147b 	.word	0x0800147b
            case ONE_command: {
                if (sKeyStatus & KeyLow2High)
 80012e4:	4b87      	ldr	r3, [pc, #540]	@ (8001504 <KeyProcess+0x284>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <KeyProcess+0x76>
                    key1();
 80012f0:	f000 f90e 	bl	8001510 <key1>
                else if (sKeyStatus & KeyToBeRepeated)
                    key1R();
                break;
 80012f4:	e0d5      	b.n	80014a2 <KeyProcess+0x222>
                else if (sKeyStatus & KeyToBeRepeated)
 80012f6:	4b83      	ldr	r3, [pc, #524]	@ (8001504 <KeyProcess+0x284>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80cf 	beq.w	80014a2 <KeyProcess+0x222>
                    key1R();
 8001304:	f000 f968 	bl	80015d8 <key1R>
                break;
 8001308:	e0cb      	b.n	80014a2 <KeyProcess+0x222>
            }
            case FOUR_command: {
                if (sKeyStatus & KeyLow2High)
 800130a:	4b7e      	ldr	r3, [pc, #504]	@ (8001504 <KeyProcess+0x284>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <KeyProcess+0x9c>
                    key4();
 8001316:	f000 f910 	bl	800153a <key4>
                else if (sKeyStatus & KeyToBeRepeated)
                    key4R();
                break;
 800131a:	e0c4      	b.n	80014a6 <KeyProcess+0x226>
                else if (sKeyStatus & KeyToBeRepeated)
 800131c:	4b79      	ldr	r3, [pc, #484]	@ (8001504 <KeyProcess+0x284>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80be 	beq.w	80014a6 <KeyProcess+0x226>
                    key4R();
 800132a:	f000 f96a 	bl	8001602 <key4R>
                break;
 800132e:	e0ba      	b.n	80014a6 <KeyProcess+0x226>
            }
            case SEVEN_command: {
                if (sKeyStatus & KeyLow2High)
 8001330:	4b74      	ldr	r3, [pc, #464]	@ (8001504 <KeyProcess+0x284>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <KeyProcess+0xc2>
                    key7();
 800133c:	f000 f912 	bl	8001564 <key7>
                else if (sKeyStatus & KeyToBeRepeated)
                    key7R();
                break;
 8001340:	e0b3      	b.n	80014aa <KeyProcess+0x22a>
                else if (sKeyStatus & KeyToBeRepeated)
 8001342:	4b70      	ldr	r3, [pc, #448]	@ (8001504 <KeyProcess+0x284>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80ad 	beq.w	80014aa <KeyProcess+0x22a>
                    key7R();
 8001350:	f000 f96c 	bl	800162c <key7R>
                break;
 8001354:	e0a9      	b.n	80014aa <KeyProcess+0x22a>
            }
            case STAR_command: {
                if (sKeyStatus & KeyLow2High)
 8001356:	4b6b      	ldr	r3, [pc, #428]	@ (8001504 <KeyProcess+0x284>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <KeyProcess+0xe8>
                    keyS();
 8001362:	f000 f92b 	bl	80015bc <keyS>
                else if (sKeyStatus & KeyToBeRepeated)
                    keySR();
                break;
 8001366:	e0a2      	b.n	80014ae <KeyProcess+0x22e>
                else if (sKeyStatus & KeyToBeRepeated)
 8001368:	4b66      	ldr	r3, [pc, #408]	@ (8001504 <KeyProcess+0x284>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 809c 	beq.w	80014ae <KeyProcess+0x22e>
                    keySR();
 8001376:	f000 f985 	bl	8001684 <keySR>
                break;
 800137a:	e098      	b.n	80014ae <KeyProcess+0x22e>
            }
            case TWO_command: {
                if (sKeyStatus & KeyLow2High)
 800137c:	4b61      	ldr	r3, [pc, #388]	@ (8001504 <KeyProcess+0x284>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <KeyProcess+0x10e>
                    key2();
 8001388:	f000 f8c9 	bl	800151e <key2>
                else if (sKeyStatus & KeyToBeRepeated)
                    key2R();
                break;
 800138c:	e091      	b.n	80014b2 <KeyProcess+0x232>
                else if (sKeyStatus & KeyToBeRepeated)
 800138e:	4b5d      	ldr	r3, [pc, #372]	@ (8001504 <KeyProcess+0x284>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 808b 	beq.w	80014b2 <KeyProcess+0x232>
                    key2R();
 800139c:	f000 f923 	bl	80015e6 <key2R>
                break;
 80013a0:	e087      	b.n	80014b2 <KeyProcess+0x232>
            }
            case FIVE_command: {
                if (sKeyStatus & KeyLow2High)
 80013a2:	4b58      	ldr	r3, [pc, #352]	@ (8001504 <KeyProcess+0x284>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <KeyProcess+0x134>
                    key5();
 80013ae:	f000 f8cb 	bl	8001548 <key5>
                else if (sKeyStatus & KeyToBeRepeated)
                    key5R();
                break;
 80013b2:	e080      	b.n	80014b6 <KeyProcess+0x236>
                else if (sKeyStatus & KeyToBeRepeated)
 80013b4:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <KeyProcess+0x284>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d07a      	beq.n	80014b6 <KeyProcess+0x236>
                    key5R();
 80013c0:	f000 f926 	bl	8001610 <key5R>
                break;
 80013c4:	e077      	b.n	80014b6 <KeyProcess+0x236>
            }
            case EIGHT_command: {
                if (sKeyStatus & KeyLow2High)
 80013c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001504 <KeyProcess+0x284>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <KeyProcess+0x158>
                    key8();
 80013d2:	f000 f8ce 	bl	8001572 <key8>
                else if (sKeyStatus & KeyToBeRepeated)
                    key8R();
                break;
 80013d6:	e070      	b.n	80014ba <KeyProcess+0x23a>
                else if (sKeyStatus & KeyToBeRepeated)
 80013d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001504 <KeyProcess+0x284>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d06a      	beq.n	80014ba <KeyProcess+0x23a>
                    key8R();
 80013e4:	f000 f929 	bl	800163a <key8R>
                break;
 80013e8:	e067      	b.n	80014ba <KeyProcess+0x23a>
            }
            case ZERO_command: {
                if (sKeyStatus & KeyLow2High)
 80013ea:	4b46      	ldr	r3, [pc, #280]	@ (8001504 <KeyProcess+0x284>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <KeyProcess+0x17c>
                    key0();
 80013f6:	f000 f8cb 	bl	8001590 <key0>
                else if (sKeyStatus & KeyToBeRepeated)
                    key0R();
                break;
 80013fa:	e060      	b.n	80014be <KeyProcess+0x23e>
                else if (sKeyStatus & KeyToBeRepeated)
 80013fc:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <KeyProcess+0x284>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d05a      	beq.n	80014be <KeyProcess+0x23e>
                    key0R();
 8001408:	f000 f926 	bl	8001658 <key0R>
                break;
 800140c:	e057      	b.n	80014be <KeyProcess+0x23e>
            }
            case THREE_command: {
                if (sKeyStatus & KeyLow2High)
 800140e:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <KeyProcess+0x284>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <KeyProcess+0x1a0>
                    key3();
 800141a:	f000 f887 	bl	800152c <key3>
                else if (sKeyStatus & KeyToBeRepeated)
                    key3R();
                break;
 800141e:	e050      	b.n	80014c2 <KeyProcess+0x242>
                else if (sKeyStatus & KeyToBeRepeated)
 8001420:	4b38      	ldr	r3, [pc, #224]	@ (8001504 <KeyProcess+0x284>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d04a      	beq.n	80014c2 <KeyProcess+0x242>
                    key3R();
 800142c:	f000 f8e2 	bl	80015f4 <key3R>
                break;
 8001430:	e047      	b.n	80014c2 <KeyProcess+0x242>
            }
            case SIX_command: {
                if (sKeyStatus & KeyLow2High)
 8001432:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <KeyProcess+0x284>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <KeyProcess+0x1c4>
                    key6();
 800143e:	f000 f88a 	bl	8001556 <key6>
                else if (sKeyStatus & KeyToBeRepeated)
                    key6R();
                break;
 8001442:	e040      	b.n	80014c6 <KeyProcess+0x246>
                else if (sKeyStatus & KeyToBeRepeated)
 8001444:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <KeyProcess+0x284>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d03a      	beq.n	80014c6 <KeyProcess+0x246>
                    key6R();
 8001450:	f000 f8e5 	bl	800161e <key6R>
                break;
 8001454:	e037      	b.n	80014c6 <KeyProcess+0x246>
            }
            case NINE_command: {
                if (sKeyStatus & KeyLow2High)
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <KeyProcess+0x284>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <KeyProcess+0x1e8>
                    key9();
 8001462:	f000 f88d 	bl	8001580 <key9>
                else if (sKeyStatus & KeyToBeRepeated)
                    key9R();
                break;
 8001466:	e030      	b.n	80014ca <KeyProcess+0x24a>
                else if (sKeyStatus & KeyToBeRepeated)
 8001468:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <KeyProcess+0x284>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d02a      	beq.n	80014ca <KeyProcess+0x24a>
                    key9R();
 8001474:	f000 f8e8 	bl	8001648 <key9R>
                break;
 8001478:	e027      	b.n	80014ca <KeyProcess+0x24a>
            }
            case POUND_command: {
                if (sKeyStatus & KeyLow2High)
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <KeyProcess+0x284>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <KeyProcess+0x20c>
                    keyP();
 8001486:	f000 f8a0 	bl	80015ca <keyP>
                else if (sKeyStatus & KeyToBeRepeated)
                    keyPR();
                break;
 800148a:	e020      	b.n	80014ce <KeyProcess+0x24e>
                else if (sKeyStatus & KeyToBeRepeated)
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <KeyProcess+0x284>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01a      	beq.n	80014ce <KeyProcess+0x24e>
                    keyPR();
 8001498:	f000 f8fb 	bl	8001692 <keyPR>
                break;
 800149c:	e017      	b.n	80014ce <KeyProcess+0x24e>
            }
            default:
                break;
 800149e:	bf00      	nop
 80014a0:	e016      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014a2:	bf00      	nop
 80014a4:	e014      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014a6:	bf00      	nop
 80014a8:	e012      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014aa:	bf00      	nop
 80014ac:	e010      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014ae:	bf00      	nop
 80014b0:	e00e      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014b2:	bf00      	nop
 80014b4:	e00c      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014b6:	bf00      	nop
 80014b8:	e00a      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014ba:	bf00      	nop
 80014bc:	e008      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014be:	bf00      	nop
 80014c0:	e006      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014c2:	bf00      	nop
 80014c4:	e004      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014c6:	bf00      	nop
 80014c8:	e002      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014ca:	bf00      	nop
 80014cc:	e000      	b.n	80014d0 <KeyProcess+0x250>
                break;
 80014ce:	bf00      	nop
        }
        sKeyStatus &= ~(KeyDetect | KeyLow2High | KeyToBeRepeated);
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <KeyProcess+0x284>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	f023 030b 	bic.w	r3, r3, #11
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <KeyProcess+0x284>)
 80014dc:	801a      	strh	r2, [r3, #0]
        // Clear all Low-2-High and High-2-Low records
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80014de:	2300      	movs	r3, #0
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	e007      	b.n	80014f4 <KeyProcess+0x274>
            sKeyLow2HighCol[sIndex] = 0x0000;
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <KeyProcess+0x28c>)
 80014e8:	2100      	movs	r1, #0
 80014ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	3301      	adds	r3, #1
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d9f4      	bls.n	80014e4 <KeyProcess+0x264>
    }
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000208 	.word	0x20000208
 8001508:	2000021a 	.word	0x2000021a
 800150c:	20000228 	.word	0x20000228

08001510 <key1>:



void key1() {
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <key2>:
void key2() {
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <key3>:
void key3() {
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <key4>:
void key4() {
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <key5>:
void key5() {
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <key6>:
void key6() {
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0


}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <key7>:
void key7() {
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <key8>:
void key8() {
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <key9>:
void key9() {
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <key0>:
void key0() {
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	// if character is not jumping set jumping to true and frame to 0
	if (!character.jumping) {
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <key0+0x28>)
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	f083 0301 	eor.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <key0+0x1e>
		character.jumping = true;
 80015a2:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <key0+0x28>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	709a      	strb	r2, [r3, #2]
		character.jumpFrame = 0;
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <key0+0x28>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	809a      	strh	r2, [r3, #4]
	}

}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	20000150 	.word	0x20000150

080015bc <keyS>:
void keyS() {
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <keyP>:
void keyP() {
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <key1R>:




void key1R() {
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <key2R>:
void key2R() {
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <key3R>:
void key3R() {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <key4R>:
void key4R() {
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <key5R>:
void key5R() {
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <key6R>:
void key6R() {
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <key7R>:
void key7R() {
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <key8R>:
void key8R() {
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <key9R>:
void key9R() {
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <key0R>:
void key0R() {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	// if character is not jumping set jumping to true and frame to 0
	if (!character.jumping) {
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <key0R+0x28>)
 800165e:	789b      	ldrb	r3, [r3, #2]
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <key0R+0x1e>
		character.jumping = true;
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <key0R+0x28>)
 800166c:	2201      	movs	r2, #1
 800166e:	709a      	strb	r2, [r3, #2]
		character.jumpFrame = 0;
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <key0R+0x28>)
 8001672:	2200      	movs	r2, #0
 8001674:	809a      	strh	r2, [r3, #4]
	}
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	20000150 	.word	0x20000150

08001684 <keySR>:
void keySR() {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <keyPR>:
void keyPR() {
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SystemClock_Config>:
  * @retval None
  */


void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b096      	sub	sp, #88	@ 0x58
 80016a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	2244      	movs	r2, #68	@ 0x44
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fb42 	bl	8004d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016c6:	f000 feff 	bl	80024c8 <HAL_PWREx_ControlVoltageScaling>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016d0:	f000 f9a0 	bl	8001a14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d4:	2302      	movs	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016de:	2310      	movs	r3, #16
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e6:	2302      	movs	r3, #2
 80016e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016ee:	230a      	movs	r3, #10
 80016f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016f2:	2307      	movs	r3, #7
 80016f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4618      	mov	r0, r3
 8001704:	f000 ff36 	bl	8002574 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800170e:	f000 f981 	bl	8001a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001716:	2303      	movs	r3, #3
 8001718:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	2104      	movs	r1, #4
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fafe 	bl	8002d2c <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001736:	f000 f96d 	bl	8001a14 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3758      	adds	r7, #88	@ 0x58
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800174a:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <MX_SPI1_Init+0x78>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001750:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800175e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001762:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176a:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001776:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800177a:	2238      	movs	r2, #56	@ 0x38
 800177c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001792:	2207      	movs	r2, #7
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_SPI1_Init+0x74>)
 80017a4:	f001 fcae 	bl	8003104 <HAL_SPI_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017ae:	f000 f931 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000027c 	.word	0x2000027c
 80017bc:	40013000 	.word	0x40013000

080017c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <MX_TIM2_Init+0x98>)
 80017e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <MX_TIM2_Init+0x98>)
 80017e8:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80017ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_TIM2_Init+0x98>)
 80017f0:	2210      	movs	r2, #16
 80017f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_TIM2_Init+0x98>)
 80017f6:	2213      	movs	r2, #19
 80017f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_TIM2_Init+0x98>)
 80017fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_TIM2_Init+0x98>)
 8001804:	2280      	movs	r2, #128	@ 0x80
 8001806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001808:	4813      	ldr	r0, [pc, #76]	@ (8001858 <MX_TIM2_Init+0x98>)
 800180a:	f002 fba7 	bl	8003f5c <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001814:	f000 f8fe 	bl	8001a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	4619      	mov	r1, r3
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <MX_TIM2_Init+0x98>)
 8001826:	f002 fdd0 	bl	80043ca <HAL_TIM_ConfigClockSource>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001830:	f000 f8f0 	bl	8001a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_TIM2_Init+0x98>)
 8001842:	f002 fff3 	bl	800482c <HAL_TIMEx_MasterConfigSynchronization>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800184c:	f000 f8e2 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000230 	.word	0x20000230

0800185c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800187a:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <MX_TIM5_Init+0x98>)
 800187c:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <MX_TIM5_Init+0x9c>)
 800187e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <MX_TIM5_Init+0x98>)
 8001882:	224f      	movs	r2, #79	@ 0x4f
 8001884:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <MX_TIM5_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <MX_TIM5_Init+0x98>)
 800188e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001892:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <MX_TIM5_Init+0x98>)
 8001896:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800189a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800189c:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <MX_TIM5_Init+0x98>)
 800189e:	2280      	movs	r2, #128	@ 0x80
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018a2:	4814      	ldr	r0, [pc, #80]	@ (80018f4 <MX_TIM5_Init+0x98>)
 80018a4:	f002 fb5a 	bl	8003f5c <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80018ae:	f000 f8b1 	bl	8001a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <MX_TIM5_Init+0x98>)
 80018c0:	f002 fd83 	bl	80043ca <HAL_TIM_ConfigClockSource>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80018ca:	f000 f8a3 	bl	8001a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <MX_TIM5_Init+0x98>)
 80018dc:	f002 ffa6 	bl	800482c <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80018e6:	f000 f895 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3720      	adds	r7, #32
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002e0 	.word	0x200002e0
 80018f8:	40000c00 	.word	0x40000c00

080018fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b3d      	ldr	r3, [pc, #244]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a3c      	ldr	r2, [pc, #240]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a36      	ldr	r2, [pc, #216]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a30      	ldr	r2, [pc, #192]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a08 <MX_GPIO_Init+0x10c>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800195a:	2200      	movs	r2, #0
 800195c:	f240 311f 	movw	r1, #799	@ 0x31f
 8001960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001964:	f000 fd8a 	bl	800247c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 800196e:	4827      	ldr	r0, [pc, #156]	@ (8001a0c <MX_GPIO_Init+0x110>)
 8001970:	f000 fd84 	bl	800247c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001974:	2303      	movs	r3, #3
 8001976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197c:	2302      	movs	r3, #2
 800197e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4822      	ldr	r0, [pc, #136]	@ (8001a10 <MX_GPIO_Init+0x114>)
 8001988:	f000 fbce 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800198c:	f240 331f 	movw	r3, #799	@ 0x31f
 8001990:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a8:	f000 fbbe 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ac:	2301      	movs	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b4:	2302      	movs	r3, #2
 80019b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4619      	mov	r1, r3
 80019be:	4813      	ldr	r0, [pc, #76]	@ (8001a0c <MX_GPIO_Init+0x110>)
 80019c0:	f000 fbb2 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80019c4:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 80019c8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	480b      	ldr	r0, [pc, #44]	@ (8001a0c <MX_GPIO_Init+0x110>)
 80019de:	f000 fba3 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ec:	2302      	movs	r3, #2
 80019ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4619      	mov	r1, r3
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fa:	f000 fb95 	bl	8002128 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019fe:	bf00      	nop
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	48000400 	.word	0x48000400
 8001a10:	48000800 	.word	0x48000800

08001a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
}
 8001a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <Error_Handler+0x8>

08001a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <HAL_MspInit+0x44>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a64 <HAL_MspInit+0x44>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <HAL_MspInit+0x44>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_MspInit+0x44>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <HAL_MspInit+0x44>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_MspInit+0x44>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <HAL_SPI_MspInit+0x7c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d128      	bne.n	8001adc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <HAL_SPI_MspInit+0x80>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <HAL_SPI_MspInit+0x80>)
 8001a90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <HAL_SPI_MspInit+0x80>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_SPI_MspInit+0x80>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4a10      	ldr	r2, [pc, #64]	@ (8001ae8 <HAL_SPI_MspInit+0x80>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <HAL_SPI_MspInit+0x80>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aba:	23e0      	movs	r3, #224	@ 0xe0
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aca:	2305      	movs	r3, #5
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad8:	f000 fb26 	bl	8002128 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	@ 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013000 	.word	0x40013000
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afc:	d114      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <HAL_TIM_Base_MspInit+0x68>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <HAL_TIM_Base_MspInit+0x68>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_TIM_Base_MspInit+0x68>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201c      	movs	r0, #28
 8001b1c:	f000 facd 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b20:	201c      	movs	r0, #28
 8001b22:	f000 fae6 	bl	80020f2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b26:	e010      	b.n	8001b4a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <HAL_TIM_Base_MspInit+0x6c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10b      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_TIM_Base_MspInit+0x68>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_TIM_Base_MspInit+0x68>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_TIM_Base_MspInit+0x68>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40000c00 	.word	0x40000c00

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <NMI_Handler+0x4>

08001b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <MemManage_Handler+0x4>

08001b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb2:	f000 f963 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f002 fafb 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000230 	.word	0x20000230

08001bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_kill>:

int _kill(int pid, int sig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bea:	f003 f8c1 	bl	8004d70 <__errno>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2216      	movs	r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_exit>:

void _exit (int status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe7 	bl	8001be0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c12:	bf00      	nop
 8001c14:	e7fd      	b.n	8001c12 <_exit+0x12>

08001c16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e00a      	b.n	8001c3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c28:	f3af 8000 	nop.w
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	60ba      	str	r2, [r7, #8]
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	dbf0      	blt.n	8001c28 <_read+0x12>
  }

  return len;
 8001c46:	687b      	ldr	r3, [r7, #4]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e009      	b.n	8001c76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	60ba      	str	r2, [r7, #8]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbf1      	blt.n	8001c62 <_write+0x12>
  }
  return len;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_close>:

int _close(int file)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb0:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_isatty>:

int _isatty(int file)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f003 f826 	bl	8004d70 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20018000 	.word	0x20018000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	20000340 	.word	0x20000340
 8001d58:	20000498 	.word	0x20000498

08001d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <SystemInit+0x20>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d66:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <SystemInit+0x20>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001db8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d84:	f7ff ffea 	bl	8001d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d88:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d8a:	490d      	ldr	r1, [pc, #52]	@ (8001dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc4 <LoopForever+0xe>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dcc <LoopForever+0x16>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dae:	f002 ffe5 	bl	8004d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001db2:	f7fe fc11 	bl	80005d8 <main>

08001db6 <LoopForever>:

LoopForever:
    b LoopForever
 8001db6:	e7fe      	b.n	8001db6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001db8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001dc4:	08006114 	.word	0x08006114
  ldr r2, =_sbss
 8001dc8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001dcc:	20000494 	.word	0x20000494

08001dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC1_2_IRQHandler>

08001dd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 f961 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 f80e 	bl	8001e04 <HAL_InitTick>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	71fb      	strb	r3, [r7, #7]
 8001df2:	e001      	b.n	8001df8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df4:	f7ff fe14 	bl	8001a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df8:	79fb      	ldrb	r3, [r7, #7]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_InitTick+0x6c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d023      	beq.n	8001e60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <HAL_InitTick+0x70>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_InitTick+0x6c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f96d 	bl	800210e <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d809      	bhi.n	8001e54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e48:	f000 f937 	bl	80020ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <HAL_InitTick+0x74>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e007      	b.n	8001e64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e004      	b.n	8001e64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e001      	b.n	8001e64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000017c 	.word	0x2000017c
 8001e74:	20000174 	.word	0x20000174
 8001e78:	20000178 	.word	0x20000178

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000017c 	.word	0x2000017c
 8001ea0:	20000344 	.word	0x20000344

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000344 	.word	0x20000344

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000017c 	.word	0x2000017c

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	@ (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020cc:	f7ff ff3e 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff8e 	bl	8001ff8 <NVIC_EncodePriority>
 80020dc:	4602      	mov	r2, r0
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff5d 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff31 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffa2 	bl	8002060 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	e17f      	b.n	8002438 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8171 	beq.w	8002432 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d005      	beq.n	8002168 <HAL_GPIO_Init+0x40>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d130      	bne.n	80021ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800219e:	2201      	movs	r2, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 0201 	and.w	r2, r3, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d118      	bne.n	8002208 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021dc:	2201      	movs	r2, #1
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	f003 0201 	and.w	r2, r3, #1
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b03      	cmp	r3, #3
 8002212:	d017      	beq.n	8002244 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d123      	bne.n	8002298 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	08da      	lsrs	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3208      	adds	r2, #8
 8002258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	6939      	ldr	r1, [r7, #16]
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0203 	and.w	r2, r3, #3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80ac 	beq.w	8002432 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	4b5f      	ldr	r3, [pc, #380]	@ (8002458 <HAL_GPIO_Init+0x330>)
 80022dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022de:	4a5e      	ldr	r2, [pc, #376]	@ (8002458 <HAL_GPIO_Init+0x330>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80022e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002458 <HAL_GPIO_Init+0x330>)
 80022e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022f2:	4a5a      	ldr	r2, [pc, #360]	@ (800245c <HAL_GPIO_Init+0x334>)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x242>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4f      	ldr	r2, [pc, #316]	@ (8002460 <HAL_GPIO_Init+0x338>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x23e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4e      	ldr	r2, [pc, #312]	@ (8002464 <HAL_GPIO_Init+0x33c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x23a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4d      	ldr	r2, [pc, #308]	@ (8002468 <HAL_GPIO_Init+0x340>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x236>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4c      	ldr	r2, [pc, #304]	@ (800246c <HAL_GPIO_Init+0x344>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x232>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <HAL_GPIO_Init+0x348>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x22e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4a      	ldr	r2, [pc, #296]	@ (8002474 <HAL_GPIO_Init+0x34c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x22a>
 800234e:	2306      	movs	r3, #6
 8002350:	e00c      	b.n	800236c <HAL_GPIO_Init+0x244>
 8002352:	2307      	movs	r3, #7
 8002354:	e00a      	b.n	800236c <HAL_GPIO_Init+0x244>
 8002356:	2305      	movs	r3, #5
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x244>
 800235a:	2304      	movs	r3, #4
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x244>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x244>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x244>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x244>
 800236a:	2300      	movs	r3, #0
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800237c:	4937      	ldr	r1, [pc, #220]	@ (800245c <HAL_GPIO_Init+0x334>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800238a:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <HAL_GPIO_Init+0x350>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ae:	4a32      	ldr	r2, [pc, #200]	@ (8002478 <HAL_GPIO_Init+0x350>)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023b4:	4b30      	ldr	r3, [pc, #192]	@ (8002478 <HAL_GPIO_Init+0x350>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023d8:	4a27      	ldr	r2, [pc, #156]	@ (8002478 <HAL_GPIO_Init+0x350>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023de:	4b26      	ldr	r3, [pc, #152]	@ (8002478 <HAL_GPIO_Init+0x350>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002402:	4a1d      	ldr	r2, [pc, #116]	@ (8002478 <HAL_GPIO_Init+0x350>)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_GPIO_Init+0x350>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800242c:	4a12      	ldr	r2, [pc, #72]	@ (8002478 <HAL_GPIO_Init+0x350>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa22 f303 	lsr.w	r3, r2, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	f47f ae78 	bne.w	8002138 <HAL_GPIO_Init+0x10>
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000
 8002460:	48000400 	.word	0x48000400
 8002464:	48000800 	.word	0x48000800
 8002468:	48000c00 	.word	0x48000c00
 800246c:	48001000 	.word	0x48001000
 8002470:	48001400 	.word	0x48001400
 8002474:	48001800 	.word	0x48001800
 8002478:	40010400 	.word	0x40010400

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024b0:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40007000 	.word	0x40007000

080024c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024d6:	d130      	bne.n	800253a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d8:	4b23      	ldr	r3, [pc, #140]	@ (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024e4:	d038      	beq.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024f6:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2232      	movs	r2, #50	@ 0x32
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	4a1b      	ldr	r2, [pc, #108]	@ (8002570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	0c9b      	lsrs	r3, r3, #18
 8002508:	3301      	adds	r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800250c:	e002      	b.n	8002514 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3b01      	subs	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002520:	d102      	bne.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f2      	bne.n	800250e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002534:	d110      	bne.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e00f      	b.n	800255a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002546:	d007      	beq.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002548:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002550:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002556:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40007000 	.word	0x40007000
 800256c:	20000174 	.word	0x20000174
 8002570:	431bde83 	.word	0x431bde83

08002574 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e3ca      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002586:	4b97      	ldr	r3, [pc, #604]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002590:	4b94      	ldr	r3, [pc, #592]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80e4 	beq.w	8002770 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_RCC_OscConfig+0x4a>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	f040 808b 	bne.w	80026cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f040 8087 	bne.w	80026cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025be:	4b89      	ldr	r3, [pc, #548]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e3a2      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	4b82      	ldr	r3, [pc, #520]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <HAL_RCC_OscConfig+0x7c>
 80025e6:	4b7f      	ldr	r3, [pc, #508]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025ee:	e005      	b.n	80025fc <HAL_RCC_OscConfig+0x88>
 80025f0:	4b7c      	ldr	r3, [pc, #496]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d223      	bcs.n	8002648 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fd1d 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e383      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002614:	4b73      	ldr	r3, [pc, #460]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a72      	ldr	r2, [pc, #456]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	496d      	ldr	r1, [pc, #436]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002632:	4b6c      	ldr	r3, [pc, #432]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	4968      	ldr	r1, [pc, #416]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
 8002646:	e025      	b.n	8002694 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002648:	4b66      	ldr	r3, [pc, #408]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a65      	ldr	r2, [pc, #404]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b63      	ldr	r3, [pc, #396]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4960      	ldr	r1, [pc, #384]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002666:	4b5f      	ldr	r3, [pc, #380]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	495b      	ldr	r1, [pc, #364]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fcdd 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e343      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002694:	f000 fc4a 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b52      	ldr	r3, [pc, #328]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	4950      	ldr	r1, [pc, #320]	@ (80027e8 <HAL_RCC_OscConfig+0x274>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	4a4e      	ldr	r2, [pc, #312]	@ (80027ec <HAL_RCC_OscConfig+0x278>)
 80026b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026b4:	4b4e      	ldr	r3, [pc, #312]	@ (80027f0 <HAL_RCC_OscConfig+0x27c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fba3 	bl	8001e04 <HAL_InitTick>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d052      	beq.n	800276e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	e327      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d032      	beq.n	800273a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026d4:	4b43      	ldr	r3, [pc, #268]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a42      	ldr	r2, [pc, #264]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fbe0 	bl	8001ea4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e8:	f7ff fbdc 	bl	8001ea4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e310      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026fa:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002706:	4b37      	ldr	r3, [pc, #220]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a36      	ldr	r2, [pc, #216]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4931      	ldr	r1, [pc, #196]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002724:	4b2f      	ldr	r3, [pc, #188]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	492c      	ldr	r1, [pc, #176]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
 8002738:	e01a      	b.n	8002770 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800273a:	4b2a      	ldr	r3, [pc, #168]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a29      	ldr	r2, [pc, #164]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002746:	f7ff fbad 	bl	8001ea4 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800274e:	f7ff fba9 	bl	8001ea4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e2dd      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002760:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0x1da>
 800276c:	e000      	b.n	8002770 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d074      	beq.n	8002866 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b08      	cmp	r3, #8
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x21a>
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d10e      	bne.n	80027a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d064      	beq.n	8002864 <HAL_RCC_OscConfig+0x2f0>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d160      	bne.n	8002864 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e2ba      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x24a>
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e026      	b.n	800280c <HAL_RCC_OscConfig+0x298>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027c6:	d115      	bne.n	80027f4 <HAL_RCC_OscConfig+0x280>
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a05      	ldr	r2, [pc, #20]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80027ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a02      	ldr	r2, [pc, #8]	@ (80027e4 <HAL_RCC_OscConfig+0x270>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x298>
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08005ee4 	.word	0x08005ee4
 80027ec:	20000174 	.word	0x20000174
 80027f0:	20000178 	.word	0x20000178
 80027f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a9f      	ldr	r2, [pc, #636]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b9d      	ldr	r3, [pc, #628]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a9c      	ldr	r2, [pc, #624]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff fb46 	bl	8001ea4 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff fb42 	bl	8001ea4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e276      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282e:	4b92      	ldr	r3, [pc, #584]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x2a8>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fb32 	bl	8001ea4 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7ff fb2e 	bl	8001ea4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e262      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	4b88      	ldr	r3, [pc, #544]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x2d0>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d060      	beq.n	8002934 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d005      	beq.n	8002884 <HAL_RCC_OscConfig+0x310>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d116      	bne.n	80028b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002884:	4b7c      	ldr	r3, [pc, #496]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_OscConfig+0x328>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e23f      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b76      	ldr	r3, [pc, #472]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	4973      	ldr	r1, [pc, #460]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b0:	e040      	b.n	8002934 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d023      	beq.n	8002902 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6e      	ldr	r2, [pc, #440]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7ff faed 	bl	8001ea4 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ce:	f7ff fae9 	bl	8001ea4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e21d      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e0:	4b65      	ldr	r3, [pc, #404]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ec:	4b62      	ldr	r3, [pc, #392]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	495f      	ldr	r1, [pc, #380]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e018      	b.n	8002934 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002902:	4b5d      	ldr	r3, [pc, #372]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a5c      	ldr	r2, [pc, #368]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7ff fac9 	bl	8001ea4 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002916:	f7ff fac5 	bl	8001ea4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1f9      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002928:	4b53      	ldr	r3, [pc, #332]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d03c      	beq.n	80029ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01c      	beq.n	8002982 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002948:	4b4b      	ldr	r3, [pc, #300]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7ff faa4 	bl	8001ea4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7ff faa0 	bl	8001ea4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1d4      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002972:	4b41      	ldr	r3, [pc, #260]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ef      	beq.n	8002960 <HAL_RCC_OscConfig+0x3ec>
 8002980:	e01b      	b.n	80029ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002982:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002988:	4a3b      	ldr	r2, [pc, #236]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7ff fa87 	bl	8001ea4 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299a:	f7ff fa83 	bl	8001ea4 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1b7      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ac:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1ef      	bne.n	800299a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80a6 	beq.w	8002b14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	4a26      	ldr	r2, [pc, #152]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e4:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f0:	2301      	movs	r3, #1
 80029f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f4:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <HAL_RCC_OscConfig+0x508>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d118      	bne.n	8002a32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a00:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <HAL_RCC_OscConfig+0x508>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1d      	ldr	r2, [pc, #116]	@ (8002a7c <HAL_RCC_OscConfig+0x508>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0c:	f7ff fa4a 	bl	8001ea4 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7ff fa46 	bl	8001ea4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e17a      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a26:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <HAL_RCC_OscConfig+0x508>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d108      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4d8>
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a40:	4a0d      	ldr	r2, [pc, #52]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a4a:	e029      	b.n	8002aa0 <HAL_RCC_OscConfig+0x52c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d115      	bne.n	8002a80 <HAL_RCC_OscConfig+0x50c>
 8002a54:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5a:	4a07      	ldr	r2, [pc, #28]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a64:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	4a03      	ldr	r2, [pc, #12]	@ (8002a78 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x52c>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	4b9c      	ldr	r3, [pc, #624]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	4a9b      	ldr	r2, [pc, #620]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a90:	4b98      	ldr	r3, [pc, #608]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a96:	4a97      	ldr	r2, [pc, #604]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d016      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7ff f9fc 	bl	8001ea4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f9f8 	bl	8001ea4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e12a      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ed      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x53c>
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7ff f9e5 	bl	8001ea4 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7ff f9e1 	bl	8001ea4 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e113      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af4:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ed      	bne.n	8002ade <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b08:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	4a79      	ldr	r2, [pc, #484]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80fe 	beq.w	8002d1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	f040 80d0 	bne.w	8002cc8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b28:	4b72      	ldr	r3, [pc, #456]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d130      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	3b01      	subs	r3, #1
 8002b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d127      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d11f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b68:	2a07      	cmp	r2, #7
 8002b6a:	bf14      	ite	ne
 8002b6c:	2201      	movne	r2, #1
 8002b6e:	2200      	moveq	r2, #0
 8002b70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3b01      	subs	r3, #1
 8002b84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d06e      	beq.n	8002c7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b0c      	cmp	r3, #12
 8002ba2:	d069      	beq.n	8002c78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ba4:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bb0:	4b50      	ldr	r3, [pc, #320]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0ad      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bcc:	f7ff f96a 	bl	8001ea4 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7ff f966 	bl	8001ea4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e09a      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be6:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf2:	4b40      	ldr	r3, [pc, #256]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <HAL_RCC_OscConfig+0x784>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c02:	3a01      	subs	r2, #1
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	4311      	orrs	r1, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c0c:	0212      	lsls	r2, r2, #8
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0552      	lsls	r2, r2, #21
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c20:	0852      	lsrs	r2, r2, #1
 8002c22:	3a01      	subs	r2, #1
 8002c24:	0652      	lsls	r2, r2, #25
 8002c26:	4311      	orrs	r1, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c2c:	0912      	lsrs	r2, r2, #4
 8002c2e:	0452      	lsls	r2, r2, #17
 8002c30:	430a      	orrs	r2, r1
 8002c32:	4930      	ldr	r1, [pc, #192]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c38:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c44:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c50:	f7ff f928 	bl	8001ea4 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff f924 	bl	8001ea4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e058      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c76:	e050      	b.n	8002d1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e04f      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d148      	bne.n	8002d1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c88:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c94:	4b17      	ldr	r3, [pc, #92]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ca0:	f7ff f900 	bl	8001ea4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7ff f8fc 	bl	8001ea4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e030      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x734>
 8002cc6:	e028      	b.n	8002d1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d023      	beq.n	8002d16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002cd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7ff f8e3 	bl	8001ea4 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce0:	e00c      	b.n	8002cfc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7ff f8df 	bl	8001ea4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d905      	bls.n	8002cfc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e013      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cfc:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_RCC_OscConfig+0x7b0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ec      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_RCC_OscConfig+0x7b0>)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	4905      	ldr	r1, [pc, #20]	@ (8002d24 <HAL_RCC_OscConfig+0x7b0>)
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_RCC_OscConfig+0x7b4>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
 8002d14:	e001      	b.n	8002d1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	feeefffc 	.word	0xfeeefffc

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0e7      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b75      	ldr	r3, [pc, #468]	@ (8002f18 <HAL_RCC_ClockConfig+0x1ec>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d910      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b72      	ldr	r3, [pc, #456]	@ (8002f18 <HAL_RCC_ClockConfig+0x1ec>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 0207 	bic.w	r2, r3, #7
 8002d56:	4970      	ldr	r1, [pc, #448]	@ (8002f18 <HAL_RCC_ClockConfig+0x1ec>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f18 <HAL_RCC_ClockConfig+0x1ec>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0cf      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d010      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b66      	ldr	r3, [pc, #408]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d908      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4960      	ldr	r1, [pc, #384]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d04c      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d121      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0a6      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dca:	4b54      	ldr	r3, [pc, #336]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d115      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e09a      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de2:	4b4e      	ldr	r3, [pc, #312]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e08e      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e086      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e02:	4b46      	ldr	r3, [pc, #280]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4943      	ldr	r1, [pc, #268]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7ff f846 	bl	8001ea4 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f7ff f842 	bl	8001ea4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e06e      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b3a      	ldr	r3, [pc, #232]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 020c 	and.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1eb      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d208      	bcs.n	8002e72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b2e      	ldr	r3, [pc, #184]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	492b      	ldr	r1, [pc, #172]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e72:	4b29      	ldr	r3, [pc, #164]	@ (8002f18 <HAL_RCC_ClockConfig+0x1ec>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d210      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e80:	4b25      	ldr	r3, [pc, #148]	@ (8002f18 <HAL_RCC_ClockConfig+0x1ec>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 0207 	bic.w	r2, r3, #7
 8002e88:	4923      	ldr	r1, [pc, #140]	@ (8002f18 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_RCC_ClockConfig+0x1ec>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e036      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eae:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4918      	ldr	r1, [pc, #96]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4910      	ldr	r1, [pc, #64]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee0:	f000 f824 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f0>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	490b      	ldr	r1, [pc, #44]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f4>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	4a09      	ldr	r2, [pc, #36]	@ (8002f24 <HAL_RCC_ClockConfig+0x1f8>)
 8002efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <HAL_RCC_ClockConfig+0x1fc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe ff7d 	bl	8001e04 <HAL_InitTick>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	08005ee4 	.word	0x08005ee4
 8002f24:	20000174 	.word	0x20000174
 8002f28:	20000178 	.word	0x20000178

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f44:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x34>
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d121      	bne.n	8002f9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d11e      	bne.n	8002f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f60:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f6c:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	e005      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f88:	4a2b      	ldr	r2, [pc, #172]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa4:	4b25      	ldr	r3, [pc, #148]	@ (800303c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	e004      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb0:	4b23      	ldr	r3, [pc, #140]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d134      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fba:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d003      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xac>
 8002fd0:	e005      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd4:	617b      	str	r3, [r7, #20]
      break;
 8002fd6:	e005      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fda:	617b      	str	r3, [r7, #20]
      break;
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	617b      	str	r3, [r7, #20]
      break;
 8002fe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe4:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	3301      	adds	r3, #1
 8002ff0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ff2:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	fb03 f202 	mul.w	r2, r3, r2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x108>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	0e5b      	lsrs	r3, r3, #25
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	3301      	adds	r3, #1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003024:	69bb      	ldr	r3, [r7, #24]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	@ 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	08005ef4 	.word	0x08005ef4
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200

08003044 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003050:	4b2a      	ldr	r3, [pc, #168]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800305c:	f7ff fa26 	bl	80024ac <HAL_PWREx_GetVoltageRange>
 8003060:	6178      	str	r0, [r7, #20]
 8003062:	e014      	b.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b25      	ldr	r3, [pc, #148]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003070:	4b22      	ldr	r3, [pc, #136]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff fa16 	bl	80024ac <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b1e      	ldr	r3, [pc, #120]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003094:	d10b      	bne.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b80      	cmp	r3, #128	@ 0x80
 800309a:	d919      	bls.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2ba0      	cmp	r3, #160	@ 0xa0
 80030a0:	d902      	bls.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a2:	2302      	movs	r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e013      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e010      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b80      	cmp	r3, #128	@ 0x80
 80030b2:	d902      	bls.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b4:	2303      	movs	r3, #3
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e00a      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	@ 0x80
 80030be:	d102      	bne.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c0:	2302      	movs	r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e004      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b70      	cmp	r3, #112	@ 0x70
 80030ca:	d101      	bne.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 0207 	bic.w	r2, r3, #7
 80030d8:	4909      	ldr	r1, [pc, #36]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e0:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	40022000 	.word	0x40022000

08003104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e095      	b.n	8003242 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003126:	d009      	beq.n	800313c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
 800312e:	e005      	b.n	800313c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fc86 	bl	8001a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003172:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800317c:	d902      	bls.n	8003184 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	e002      	b.n	800318a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003188:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003192:	d007      	beq.n	80031a4 <HAL_SPI_Init+0xa0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e6:	ea42 0103 	orr.w	r1, r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f003 0204 	and.w	r2, r3, #4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003220:	ea42 0103 	orr.w	r1, r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b088      	sub	sp, #32
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800325a:	f7fe fe23 	bl	8001ea4 <HAL_GetTick>
 800325e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d001      	beq.n	8003274 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
 8003272:	e15c      	b.n	800352e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_SPI_Transmit+0x36>
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e154      	b.n	800352e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_SPI_Transmit+0x48>
 800328e:	2302      	movs	r3, #2
 8003290:	e14d      	b.n	800352e <HAL_SPI_Transmit+0x2e4>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2203      	movs	r2, #3
 800329e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e4:	d10f      	bne.n	8003306 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003304:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	d007      	beq.n	8003324 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800332c:	d952      	bls.n	80033d4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_SPI_Transmit+0xf2>
 8003336:	8b7b      	ldrh	r3, [r7, #26]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d145      	bne.n	80033c8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	881a      	ldrh	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	1c9a      	adds	r2, r3, #2
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003360:	e032      	b.n	80033c8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	d112      	bne.n	8003396 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003394:	e018      	b.n	80033c8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003396:	f7fe fd85 	bl	8001ea4 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d803      	bhi.n	80033ae <HAL_SPI_Transmit+0x164>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033ac:	d102      	bne.n	80033b4 <HAL_SPI_Transmit+0x16a>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0b2      	b.n	800352e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1c7      	bne.n	8003362 <HAL_SPI_Transmit+0x118>
 80033d2:	e083      	b.n	80034dc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_SPI_Transmit+0x198>
 80033dc:	8b7b      	ldrh	r3, [r7, #26]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d177      	bne.n	80034d2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d912      	bls.n	8003412 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b02      	subs	r3, #2
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003410:	e05f      	b.n	80034d2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003438:	e04b      	b.n	80034d2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d12b      	bne.n	80034a0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d912      	bls.n	8003478 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	881a      	ldrh	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	1c9a      	adds	r2, r3, #2
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b02      	subs	r3, #2
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003476:	e02c      	b.n	80034d2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800349e:	e018      	b.n	80034d2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a0:	f7fe fd00 	bl	8001ea4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d803      	bhi.n	80034b8 <HAL_SPI_Transmit+0x26e>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034b6:	d102      	bne.n	80034be <HAL_SPI_Transmit+0x274>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e02d      	b.n	800352e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ae      	bne.n	800343a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	6839      	ldr	r1, [r7, #0]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fcf5 	bl	8003ed0 <SPI_EndRxTxTransaction>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10a      	bne.n	8003510 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800352c:	2300      	movs	r3, #0
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b088      	sub	sp, #32
 800353a:	af02      	add	r7, sp, #8
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	e123      	b.n	800379e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800355e:	d112      	bne.n	8003586 <HAL_SPI_Receive+0x50>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10e      	bne.n	8003586 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2204      	movs	r2, #4
 800356c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003570:	88fa      	ldrh	r2, [r7, #6]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f912 	bl	80037a6 <HAL_SPI_TransmitReceive>
 8003582:	4603      	mov	r3, r0
 8003584:	e10b      	b.n	800379e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003586:	f7fe fc8d 	bl	8001ea4 <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Receive+0x62>
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e100      	b.n	800379e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_SPI_Receive+0x74>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e0f9      	b.n	800379e <HAL_SPI_Receive+0x268>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2204      	movs	r2, #4
 80035b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035fc:	d908      	bls.n	8003610 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e007      	b.n	8003620 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003628:	d10f      	bne.n	800364a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003654:	2b40      	cmp	r3, #64	@ 0x40
 8003656:	d007      	beq.n	8003668 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003666:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003670:	d875      	bhi.n	800375e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003672:	e037      	b.n	80036e4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d117      	bne.n	80036b2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f103 020c 	add.w	r2, r3, #12
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80036b0:	e018      	b.n	80036e4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b2:	f7fe fbf7 	bl	8001ea4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d803      	bhi.n	80036ca <HAL_SPI_Receive+0x194>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036c8:	d102      	bne.n	80036d0 <HAL_SPI_Receive+0x19a>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e05c      	b.n	800379e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1c1      	bne.n	8003674 <HAL_SPI_Receive+0x13e>
 80036f0:	e03b      	b.n	800376a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d115      	bne.n	800372c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	b292      	uxth	r2, r2
 800370c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	1c9a      	adds	r2, r3, #2
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800372a:	e018      	b.n	800375e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372c:	f7fe fbba 	bl	8001ea4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d803      	bhi.n	8003744 <HAL_SPI_Receive+0x20e>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003742:	d102      	bne.n	800374a <HAL_SPI_Receive+0x214>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e01f      	b.n	800379e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1c3      	bne.n	80036f2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fb56 	bl	8003e20 <SPI_EndRxTransaction>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800379c:	2300      	movs	r3, #0
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b08a      	sub	sp, #40	@ 0x28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037b4:	2301      	movs	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037b8:	f7fe fb74 	bl	8001ea4 <HAL_GetTick>
 80037bc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037c4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d00c      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x4e>
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x4a>
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d001      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
 80037f2:	e1f3      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x60>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x60>
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1e8      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x72>
 8003814:	2302      	movs	r3, #2
 8003816:	e1e1      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x436>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b04      	cmp	r3, #4
 800382a:	d003      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2205      	movs	r2, #5
 8003830:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	887a      	ldrh	r2, [r7, #2]
 800385a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003876:	d802      	bhi.n	800387e <HAL_SPI_TransmitReceive+0xd8>
 8003878:	8abb      	ldrh	r3, [r7, #20]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d908      	bls.n	8003890 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	e007      	b.n	80038a0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d007      	beq.n	80038be <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038c6:	f240 8083 	bls.w	80039d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x132>
 80038d2:	8afb      	ldrh	r3, [r7, #22]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d16f      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	881a      	ldrh	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e8:	1c9a      	adds	r2, r3, #2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038fc:	e05c      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d11b      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x19e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x19e>
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	2b01      	cmp	r3, #1
 800391a:	d113      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003920:	881a      	ldrh	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	1c9a      	adds	r2, r3, #2
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d11c      	bne.n	800398c <HAL_SPI_TransmitReceive+0x1e6>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	b292      	uxth	r2, r2
 800396a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003988:	2301      	movs	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800398c:	f7fe fa8a 	bl	8001ea4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003998:	429a      	cmp	r2, r3
 800399a:	d80d      	bhi.n	80039b8 <HAL_SPI_TransmitReceive+0x212>
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039a2:	d009      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e111      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d19d      	bne.n	80038fe <HAL_SPI_TransmitReceive+0x158>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d197      	bne.n	80038fe <HAL_SPI_TransmitReceive+0x158>
 80039ce:	e0e5      	b.n	8003b9c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x23a>
 80039d8:	8afb      	ldrh	r3, [r7, #22]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 80d1 	bne.w	8003b82 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d912      	bls.n	8003a10 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	1c9a      	adds	r2, r3, #2
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b02      	subs	r3, #2
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a0e:	e0b8      	b.n	8003b82 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a36:	e0a4      	b.n	8003b82 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d134      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x30a>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d02f      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x30a>
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d12c      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d912      	bls.n	8003a86 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b02      	subs	r3, #2
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a84:	e012      	b.n	8003aac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d148      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x3aa>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d042      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d923      	bls.n	8003b1e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	1c9a      	adds	r2, r3, #2
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b02      	subs	r3, #2
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d81f      	bhi.n	8003b4c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	e016      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f103 020c 	add.w	r2, r3, #12
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	7812      	ldrb	r2, [r2, #0]
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b50:	f7fe f9a8 	bl	8001ea4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d803      	bhi.n	8003b68 <HAL_SPI_TransmitReceive+0x3c2>
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b66:	d102      	bne.n	8003b6e <HAL_SPI_TransmitReceive+0x3c8>
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e02c      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f47f af55 	bne.w	8003a38 <HAL_SPI_TransmitReceive+0x292>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f47f af4e 	bne.w	8003a38 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f995 	bl	8003ed0 <SPI_EndRxTxTransaction>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e00e      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	@ 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bf4:	f7fe f956 	bl	8001ea4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	4413      	add	r3, r2
 8003c02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c04:	f7fe f94e 	bl	8001ea4 <HAL_GetTick>
 8003c08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c0a:	4b39      	ldr	r3, [pc, #228]	@ (8003cf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	015b      	lsls	r3, r3, #5
 8003c10:	0d1b      	lsrs	r3, r3, #20
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	fb02 f303 	mul.w	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c1a:	e054      	b.n	8003cc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c22:	d050      	beq.n	8003cc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c24:	f7fe f93e 	bl	8001ea4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d902      	bls.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d13d      	bne.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c52:	d111      	bne.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c5c:	d004      	beq.n	8003c68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c66:	d107      	bne.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c80:	d10f      	bne.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ca0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e017      	b.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d19b      	bne.n	8003c1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000174 	.word	0x20000174

08003cf4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d06:	f7fe f8cd 	bl	8001ea4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d16:	f7fe f8c5 	bl	8001ea4 <HAL_GetTick>
 8003d1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d24:	4b3d      	ldr	r3, [pc, #244]	@ (8003e1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00da      	lsls	r2, r3, #3
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	0d1b      	lsrs	r3, r3, #20
 8003d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d3c:	e060      	b.n	8003e00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d44:	d107      	bne.n	8003d56 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d5c:	d050      	beq.n	8003e00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d5e:	f7fe f8a1 	bl	8001ea4 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d902      	bls.n	8003d74 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d13d      	bne.n	8003df0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d8c:	d111      	bne.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d96:	d004      	beq.n	8003da2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da0:	d107      	bne.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003db0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dba:	d10f      	bne.n	8003ddc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e010      	b.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d196      	bne.n	8003d3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3728      	adds	r7, #40	@ 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000174 	.word	0x20000174

08003e20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e34:	d111      	bne.n	8003e5a <SPI_EndRxTransaction+0x3a>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e3e:	d004      	beq.n	8003e4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e48:	d107      	bne.n	8003e5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2180      	movs	r1, #128	@ 0x80
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff febd 	bl	8003be4 <SPI_WaitFlagStateUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e023      	b.n	8003ec8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e88:	d11d      	bne.n	8003ec6 <SPI_EndRxTransaction+0xa6>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e92:	d004      	beq.n	8003e9e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9c:	d113      	bne.n	8003ec6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff22 	bl	8003cf4 <SPI_WaitFifoStateUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eba:	f043 0220 	orr.w	r2, r3, #32
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e000      	b.n	8003ec8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff ff03 	bl	8003cf4 <SPI_WaitFifoStateUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e027      	b.n	8003f54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2180      	movs	r1, #128	@ 0x80
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fe68 	bl	8003be4 <SPI_WaitFlagStateUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e014      	b.n	8003f54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7ff fedc 	bl	8003cf4 <SPI_WaitFifoStateUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e000      	b.n	8003f54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e049      	b.n	8004002 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd fdb2 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 fb06 	bl	80045ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d001      	beq.n	8004024 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e047      	b.n	80040b4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a23      	ldr	r2, [pc, #140]	@ (80040c0 <HAL_TIM_Base_Start+0xb4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01d      	beq.n	8004072 <HAL_TIM_Base_Start+0x66>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403e:	d018      	beq.n	8004072 <HAL_TIM_Base_Start+0x66>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1f      	ldr	r2, [pc, #124]	@ (80040c4 <HAL_TIM_Base_Start+0xb8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_TIM_Base_Start+0x66>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1e      	ldr	r2, [pc, #120]	@ (80040c8 <HAL_TIM_Base_Start+0xbc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_TIM_Base_Start+0x66>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <HAL_TIM_Base_Start+0xc0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_TIM_Base_Start+0x66>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1b      	ldr	r2, [pc, #108]	@ (80040d0 <HAL_TIM_Base_Start+0xc4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_TIM_Base_Start+0x66>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a19      	ldr	r2, [pc, #100]	@ (80040d4 <HAL_TIM_Base_Start+0xc8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d115      	bne.n	800409e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4b17      	ldr	r3, [pc, #92]	@ (80040d8 <HAL_TIM_Base_Start+0xcc>)
 800407a:	4013      	ands	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b06      	cmp	r3, #6
 8004082:	d015      	beq.n	80040b0 <HAL_TIM_Base_Start+0xa4>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408a:	d011      	beq.n	80040b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	e008      	b.n	80040b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e000      	b.n	80040b2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40000c00 	.word	0x40000c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	00010007 	.word	0x00010007

080040dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d001      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e04f      	b.n	8004194 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	@ (80041a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01d      	beq.n	8004152 <HAL_TIM_Base_Start_IT+0x76>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411e:	d018      	beq.n	8004152 <HAL_TIM_Base_Start_IT+0x76>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <HAL_TIM_Base_Start_IT+0x76>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <HAL_TIM_Base_Start_IT+0x76>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1c      	ldr	r2, [pc, #112]	@ (80041ac <HAL_TIM_Base_Start_IT+0xd0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <HAL_TIM_Base_Start_IT+0x76>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1b      	ldr	r2, [pc, #108]	@ (80041b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_TIM_Base_Start_IT+0x76>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d115      	bne.n	800417e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800415a:	4013      	ands	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b06      	cmp	r3, #6
 8004162:	d015      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0xb4>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416a:	d011      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417c:	e008      	b.n	8004190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e000      	b.n	8004192 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004190:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40013400 	.word	0x40013400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	00010007 	.word	0x00010007

080041bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0202 	mvn.w	r2, #2
 80041f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f9b2 	bl	8004570 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9a4 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f9b5 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d020      	beq.n	800426c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0204 	mvn.w	r2, #4
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f98c 	bl	8004570 <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f97e 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f98f 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d020      	beq.n	80042b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0208 	mvn.w	r2, #8
 8004288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2204      	movs	r2, #4
 800428e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f966 	bl	8004570 <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f958 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f969 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d020      	beq.n	8004304 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01b      	beq.n	8004304 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0210 	mvn.w	r2, #16
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2208      	movs	r2, #8
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f940 	bl	8004570 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f932 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f943 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00c      	beq.n	8004328 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0201 	mvn.w	r2, #1
 8004320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc f94e 	bl	80005c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00c      	beq.n	8004356 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800434e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fafd 	bl	8004950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00c      	beq.n	800437a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 faf5 	bl	8004964 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00c      	beq.n	800439e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f8fd 	bl	8004598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00c      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f06f 0220 	mvn.w	r2, #32
 80043ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fabd 	bl	800493c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_ConfigClockSource+0x1c>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e0b6      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x18a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004404:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004408:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004410:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004422:	d03e      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0xd8>
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004428:	f200 8087 	bhi.w	800453a <HAL_TIM_ConfigClockSource+0x170>
 800442c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004430:	f000 8086 	beq.w	8004540 <HAL_TIM_ConfigClockSource+0x176>
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004438:	d87f      	bhi.n	800453a <HAL_TIM_ConfigClockSource+0x170>
 800443a:	2b70      	cmp	r3, #112	@ 0x70
 800443c:	d01a      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0xaa>
 800443e:	2b70      	cmp	r3, #112	@ 0x70
 8004440:	d87b      	bhi.n	800453a <HAL_TIM_ConfigClockSource+0x170>
 8004442:	2b60      	cmp	r3, #96	@ 0x60
 8004444:	d050      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0x11e>
 8004446:	2b60      	cmp	r3, #96	@ 0x60
 8004448:	d877      	bhi.n	800453a <HAL_TIM_ConfigClockSource+0x170>
 800444a:	2b50      	cmp	r3, #80	@ 0x50
 800444c:	d03c      	beq.n	80044c8 <HAL_TIM_ConfigClockSource+0xfe>
 800444e:	2b50      	cmp	r3, #80	@ 0x50
 8004450:	d873      	bhi.n	800453a <HAL_TIM_ConfigClockSource+0x170>
 8004452:	2b40      	cmp	r3, #64	@ 0x40
 8004454:	d058      	beq.n	8004508 <HAL_TIM_ConfigClockSource+0x13e>
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	d86f      	bhi.n	800453a <HAL_TIM_ConfigClockSource+0x170>
 800445a:	2b30      	cmp	r3, #48	@ 0x30
 800445c:	d064      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x15e>
 800445e:	2b30      	cmp	r3, #48	@ 0x30
 8004460:	d86b      	bhi.n	800453a <HAL_TIM_ConfigClockSource+0x170>
 8004462:	2b20      	cmp	r3, #32
 8004464:	d060      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x15e>
 8004466:	2b20      	cmp	r3, #32
 8004468:	d867      	bhi.n	800453a <HAL_TIM_ConfigClockSource+0x170>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d05c      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x15e>
 800446e:	2b10      	cmp	r3, #16
 8004470:	d05a      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x15e>
 8004472:	e062      	b.n	800453a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004484:	f000 f9b2 	bl	80047ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004496:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	609a      	str	r2, [r3, #8]
      break;
 80044a0:	e04f      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044b2:	f000 f99b 	bl	80047ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044c4:	609a      	str	r2, [r3, #8]
      break;
 80044c6:	e03c      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d4:	461a      	mov	r2, r3
 80044d6:	f000 f90f 	bl	80046f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2150      	movs	r1, #80	@ 0x50
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f968 	bl	80047b6 <TIM_ITRx_SetConfig>
      break;
 80044e6:	e02c      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044f4:	461a      	mov	r2, r3
 80044f6:	f000 f92e 	bl	8004756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2160      	movs	r1, #96	@ 0x60
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f958 	bl	80047b6 <TIM_ITRx_SetConfig>
      break;
 8004506:	e01c      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004514:	461a      	mov	r2, r3
 8004516:	f000 f8ef 	bl	80046f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2140      	movs	r1, #64	@ 0x40
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f948 	bl	80047b6 <TIM_ITRx_SetConfig>
      break;
 8004526:	e00c      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 f93f 	bl	80047b6 <TIM_ITRx_SetConfig>
      break;
 8004538:	e003      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
      break;
 800453e:	e000      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004540:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a46      	ldr	r2, [pc, #280]	@ (80046d8 <TIM_Base_SetConfig+0x12c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ca:	d00f      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a43      	ldr	r2, [pc, #268]	@ (80046dc <TIM_Base_SetConfig+0x130>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00b      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a42      	ldr	r2, [pc, #264]	@ (80046e0 <TIM_Base_SetConfig+0x134>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d007      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a41      	ldr	r2, [pc, #260]	@ (80046e4 <TIM_Base_SetConfig+0x138>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d003      	beq.n	80045ec <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a40      	ldr	r2, [pc, #256]	@ (80046e8 <TIM_Base_SetConfig+0x13c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d108      	bne.n	80045fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a35      	ldr	r2, [pc, #212]	@ (80046d8 <TIM_Base_SetConfig+0x12c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01f      	beq.n	8004646 <TIM_Base_SetConfig+0x9a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460c:	d01b      	beq.n	8004646 <TIM_Base_SetConfig+0x9a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a32      	ldr	r2, [pc, #200]	@ (80046dc <TIM_Base_SetConfig+0x130>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d017      	beq.n	8004646 <TIM_Base_SetConfig+0x9a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a31      	ldr	r2, [pc, #196]	@ (80046e0 <TIM_Base_SetConfig+0x134>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <TIM_Base_SetConfig+0x9a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a30      	ldr	r2, [pc, #192]	@ (80046e4 <TIM_Base_SetConfig+0x138>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_Base_SetConfig+0x9a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2f      	ldr	r2, [pc, #188]	@ (80046e8 <TIM_Base_SetConfig+0x13c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_Base_SetConfig+0x9a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a2e      	ldr	r2, [pc, #184]	@ (80046ec <TIM_Base_SetConfig+0x140>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_Base_SetConfig+0x9a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2d      	ldr	r2, [pc, #180]	@ (80046f0 <TIM_Base_SetConfig+0x144>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_Base_SetConfig+0x9a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2c      	ldr	r2, [pc, #176]	@ (80046f4 <TIM_Base_SetConfig+0x148>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d108      	bne.n	8004658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a16      	ldr	r2, [pc, #88]	@ (80046d8 <TIM_Base_SetConfig+0x12c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00f      	beq.n	80046a4 <TIM_Base_SetConfig+0xf8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a18      	ldr	r2, [pc, #96]	@ (80046e8 <TIM_Base_SetConfig+0x13c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00b      	beq.n	80046a4 <TIM_Base_SetConfig+0xf8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a17      	ldr	r2, [pc, #92]	@ (80046ec <TIM_Base_SetConfig+0x140>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_Base_SetConfig+0xf8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a16      	ldr	r2, [pc, #88]	@ (80046f0 <TIM_Base_SetConfig+0x144>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_Base_SetConfig+0xf8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a15      	ldr	r2, [pc, #84]	@ (80046f4 <TIM_Base_SetConfig+0x148>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d103      	bne.n	80046ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d105      	bne.n	80046ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f023 0201 	bic.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	611a      	str	r2, [r3, #16]
  }
}
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40013400 	.word	0x40013400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40014400 	.word	0x40014400
 80046f4:	40014800 	.word	0x40014800

080046f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0201 	bic.w	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f023 030a 	bic.w	r3, r3, #10
 8004734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004756:	b480      	push	{r7}
 8004758:	b087      	sub	sp, #28
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f023 0210 	bic.w	r2, r3, #16
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004792:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f043 0307 	orr.w	r3, r3, #7
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	021a      	lsls	r2, r3, #8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	431a      	orrs	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4313      	orrs	r3, r2
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004840:	2302      	movs	r3, #2
 8004842:	e068      	b.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2e      	ldr	r2, [pc, #184]	@ (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2d      	ldr	r2, [pc, #180]	@ (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800487e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004890:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01d      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b6:	d018      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1b      	ldr	r2, [pc, #108]	@ (800492c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004930 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00e      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a13      	ldr	r2, [pc, #76]	@ (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a14      	ldr	r2, [pc, #80]	@ (8004938 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d10c      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40013400 	.word	0x40013400
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800
 8004934:	40000c00 	.word	0x40000c00
 8004938:	40014000 	.word	0x40014000

0800493c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <atoi>:
 8004978:	220a      	movs	r2, #10
 800497a:	2100      	movs	r1, #0
 800497c:	f000 b9b4 	b.w	8004ce8 <strtol>

08004980 <sniprintf>:
 8004980:	b40c      	push	{r2, r3}
 8004982:	b530      	push	{r4, r5, lr}
 8004984:	4b18      	ldr	r3, [pc, #96]	@ (80049e8 <sniprintf+0x68>)
 8004986:	1e0c      	subs	r4, r1, #0
 8004988:	681d      	ldr	r5, [r3, #0]
 800498a:	b09d      	sub	sp, #116	@ 0x74
 800498c:	da08      	bge.n	80049a0 <sniprintf+0x20>
 800498e:	238b      	movs	r3, #139	@ 0x8b
 8004990:	602b      	str	r3, [r5, #0]
 8004992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004996:	b01d      	add	sp, #116	@ 0x74
 8004998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800499c:	b002      	add	sp, #8
 800499e:	4770      	bx	lr
 80049a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80049a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 80049ae:	bf14      	ite	ne
 80049b0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80049b4:	4623      	moveq	r3, r4
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	9307      	str	r3, [sp, #28]
 80049ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049be:	9002      	str	r0, [sp, #8]
 80049c0:	9006      	str	r0, [sp, #24]
 80049c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80049c8:	ab21      	add	r3, sp, #132	@ 0x84
 80049ca:	a902      	add	r1, sp, #8
 80049cc:	4628      	mov	r0, r5
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	f000 fa7e 	bl	8004ed0 <_svfiprintf_r>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	bfbc      	itt	lt
 80049d8:	238b      	movlt	r3, #139	@ 0x8b
 80049da:	602b      	strlt	r3, [r5, #0]
 80049dc:	2c00      	cmp	r4, #0
 80049de:	d0da      	beq.n	8004996 <sniprintf+0x16>
 80049e0:	9b02      	ldr	r3, [sp, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e7d6      	b.n	8004996 <sniprintf+0x16>
 80049e8:	2000018c 	.word	0x2000018c

080049ec <siprintf>:
 80049ec:	b40e      	push	{r1, r2, r3}
 80049ee:	b510      	push	{r4, lr}
 80049f0:	b09d      	sub	sp, #116	@ 0x74
 80049f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80049f4:	9002      	str	r0, [sp, #8]
 80049f6:	9006      	str	r0, [sp, #24]
 80049f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049fc:	480a      	ldr	r0, [pc, #40]	@ (8004a28 <siprintf+0x3c>)
 80049fe:	9107      	str	r1, [sp, #28]
 8004a00:	9104      	str	r1, [sp, #16]
 8004a02:	490a      	ldr	r1, [pc, #40]	@ (8004a2c <siprintf+0x40>)
 8004a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a08:	9105      	str	r1, [sp, #20]
 8004a0a:	2400      	movs	r4, #0
 8004a0c:	a902      	add	r1, sp, #8
 8004a0e:	6800      	ldr	r0, [r0, #0]
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004a14:	f000 fa5c 	bl	8004ed0 <_svfiprintf_r>
 8004a18:	9b02      	ldr	r3, [sp, #8]
 8004a1a:	701c      	strb	r4, [r3, #0]
 8004a1c:	b01d      	add	sp, #116	@ 0x74
 8004a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a22:	b003      	add	sp, #12
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	2000018c 	.word	0x2000018c
 8004a2c:	ffff0208 	.word	0xffff0208

08004a30 <rand>:
 8004a30:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <rand+0x5c>)
 8004a32:	b510      	push	{r4, lr}
 8004a34:	681c      	ldr	r4, [r3, #0]
 8004a36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a38:	b9b3      	cbnz	r3, 8004a68 <rand+0x38>
 8004a3a:	2018      	movs	r0, #24
 8004a3c:	f000 fb44 	bl	80050c8 <malloc>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6320      	str	r0, [r4, #48]	@ 0x30
 8004a44:	b920      	cbnz	r0, 8004a50 <rand+0x20>
 8004a46:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <rand+0x60>)
 8004a48:	4812      	ldr	r0, [pc, #72]	@ (8004a94 <rand+0x64>)
 8004a4a:	2152      	movs	r1, #82	@ 0x52
 8004a4c:	f000 f9c6 	bl	8004ddc <__assert_func>
 8004a50:	4911      	ldr	r1, [pc, #68]	@ (8004a98 <rand+0x68>)
 8004a52:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <rand+0x6c>)
 8004a54:	e9c0 1300 	strd	r1, r3, [r0]
 8004a58:	4b11      	ldr	r3, [pc, #68]	@ (8004aa0 <rand+0x70>)
 8004a5a:	6083      	str	r3, [r0, #8]
 8004a5c:	230b      	movs	r3, #11
 8004a5e:	8183      	strh	r3, [r0, #12]
 8004a60:	2100      	movs	r1, #0
 8004a62:	2001      	movs	r0, #1
 8004a64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a6a:	480e      	ldr	r0, [pc, #56]	@ (8004aa4 <rand+0x74>)
 8004a6c:	690b      	ldr	r3, [r1, #16]
 8004a6e:	694c      	ldr	r4, [r1, #20]
 8004a70:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa8 <rand+0x78>)
 8004a72:	4358      	muls	r0, r3
 8004a74:	fb02 0004 	mla	r0, r2, r4, r0
 8004a78:	fba3 3202 	umull	r3, r2, r3, r2
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	eb40 0002 	adc.w	r0, r0, r2
 8004a82:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004a86:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004a8a:	bd10      	pop	{r4, pc}
 8004a8c:	2000018c 	.word	0x2000018c
 8004a90:	08005f24 	.word	0x08005f24
 8004a94:	08005f3b 	.word	0x08005f3b
 8004a98:	abcd330e 	.word	0xabcd330e
 8004a9c:	e66d1234 	.word	0xe66d1234
 8004aa0:	0005deec 	.word	0x0005deec
 8004aa4:	5851f42d 	.word	0x5851f42d
 8004aa8:	4c957f2d 	.word	0x4c957f2d

08004aac <std>:
 8004aac:	2300      	movs	r3, #0
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aba:	6083      	str	r3, [r0, #8]
 8004abc:	8181      	strh	r1, [r0, #12]
 8004abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ac0:	81c2      	strh	r2, [r0, #14]
 8004ac2:	6183      	str	r3, [r0, #24]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	305c      	adds	r0, #92	@ 0x5c
 8004aca:	f000 f935 	bl	8004d38 <memset>
 8004ace:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <std+0x58>)
 8004ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b08 <std+0x5c>)
 8004ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b0c <std+0x60>)
 8004ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <std+0x64>)
 8004adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ade:	4b0d      	ldr	r3, [pc, #52]	@ (8004b14 <std+0x68>)
 8004ae0:	6224      	str	r4, [r4, #32]
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	d006      	beq.n	8004af4 <std+0x48>
 8004ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004aea:	4294      	cmp	r4, r2
 8004aec:	d002      	beq.n	8004af4 <std+0x48>
 8004aee:	33d0      	adds	r3, #208	@ 0xd0
 8004af0:	429c      	cmp	r4, r3
 8004af2:	d105      	bne.n	8004b00 <std+0x54>
 8004af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004afc:	f000 b962 	b.w	8004dc4 <__retarget_lock_init_recursive>
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	bf00      	nop
 8004b04:	080056a5 	.word	0x080056a5
 8004b08:	080056c7 	.word	0x080056c7
 8004b0c:	080056ff 	.word	0x080056ff
 8004b10:	08005723 	.word	0x08005723
 8004b14:	20000348 	.word	0x20000348

08004b18 <stdio_exit_handler>:
 8004b18:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <stdio_exit_handler+0xc>)
 8004b1a:	4903      	ldr	r1, [pc, #12]	@ (8004b28 <stdio_exit_handler+0x10>)
 8004b1c:	4803      	ldr	r0, [pc, #12]	@ (8004b2c <stdio_exit_handler+0x14>)
 8004b1e:	f000 b8ed 	b.w	8004cfc <_fwalk_sglue>
 8004b22:	bf00      	nop
 8004b24:	20000180 	.word	0x20000180
 8004b28:	0800563d 	.word	0x0800563d
 8004b2c:	20000190 	.word	0x20000190

08004b30 <cleanup_stdio>:
 8004b30:	6841      	ldr	r1, [r0, #4]
 8004b32:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <cleanup_stdio+0x34>)
 8004b34:	4299      	cmp	r1, r3
 8004b36:	b510      	push	{r4, lr}
 8004b38:	4604      	mov	r4, r0
 8004b3a:	d001      	beq.n	8004b40 <cleanup_stdio+0x10>
 8004b3c:	f000 fd7e 	bl	800563c <_fflush_r>
 8004b40:	68a1      	ldr	r1, [r4, #8]
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <cleanup_stdio+0x38>)
 8004b44:	4299      	cmp	r1, r3
 8004b46:	d002      	beq.n	8004b4e <cleanup_stdio+0x1e>
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fd77 	bl	800563c <_fflush_r>
 8004b4e:	68e1      	ldr	r1, [r4, #12]
 8004b50:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <cleanup_stdio+0x3c>)
 8004b52:	4299      	cmp	r1, r3
 8004b54:	d004      	beq.n	8004b60 <cleanup_stdio+0x30>
 8004b56:	4620      	mov	r0, r4
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5c:	f000 bd6e 	b.w	800563c <_fflush_r>
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	bf00      	nop
 8004b64:	20000348 	.word	0x20000348
 8004b68:	200003b0 	.word	0x200003b0
 8004b6c:	20000418 	.word	0x20000418

08004b70 <global_stdio_init.part.0>:
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <global_stdio_init.part.0+0x30>)
 8004b74:	4c0b      	ldr	r4, [pc, #44]	@ (8004ba4 <global_stdio_init.part.0+0x34>)
 8004b76:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba8 <global_stdio_init.part.0+0x38>)
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2104      	movs	r1, #4
 8004b80:	f7ff ff94 	bl	8004aac <std>
 8004b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2109      	movs	r1, #9
 8004b8c:	f7ff ff8e 	bl	8004aac <std>
 8004b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b94:	2202      	movs	r2, #2
 8004b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b9a:	2112      	movs	r1, #18
 8004b9c:	f7ff bf86 	b.w	8004aac <std>
 8004ba0:	20000480 	.word	0x20000480
 8004ba4:	20000348 	.word	0x20000348
 8004ba8:	08004b19 	.word	0x08004b19

08004bac <__sfp_lock_acquire>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__sfp_lock_acquire+0x8>)
 8004bae:	f000 b90a 	b.w	8004dc6 <__retarget_lock_acquire_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20000485 	.word	0x20000485

08004bb8 <__sfp_lock_release>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	@ (8004bc0 <__sfp_lock_release+0x8>)
 8004bba:	f000 b905 	b.w	8004dc8 <__retarget_lock_release_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20000485 	.word	0x20000485

08004bc4 <__sinit>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	f7ff fff0 	bl	8004bac <__sfp_lock_acquire>
 8004bcc:	6a23      	ldr	r3, [r4, #32]
 8004bce:	b11b      	cbz	r3, 8004bd8 <__sinit+0x14>
 8004bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd4:	f7ff bff0 	b.w	8004bb8 <__sfp_lock_release>
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__sinit+0x28>)
 8004bda:	6223      	str	r3, [r4, #32]
 8004bdc:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <__sinit+0x2c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f5      	bne.n	8004bd0 <__sinit+0xc>
 8004be4:	f7ff ffc4 	bl	8004b70 <global_stdio_init.part.0>
 8004be8:	e7f2      	b.n	8004bd0 <__sinit+0xc>
 8004bea:	bf00      	nop
 8004bec:	08004b31 	.word	0x08004b31
 8004bf0:	20000480 	.word	0x20000480

08004bf4 <_strtol_l.isra.0>:
 8004bf4:	2b24      	cmp	r3, #36	@ 0x24
 8004bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfa:	4686      	mov	lr, r0
 8004bfc:	4690      	mov	r8, r2
 8004bfe:	d801      	bhi.n	8004c04 <_strtol_l.isra.0+0x10>
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d106      	bne.n	8004c12 <_strtol_l.isra.0+0x1e>
 8004c04:	f000 f8b4 	bl	8004d70 <__errno>
 8004c08:	2316      	movs	r3, #22
 8004c0a:	6003      	str	r3, [r0, #0]
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c12:	4834      	ldr	r0, [pc, #208]	@ (8004ce4 <_strtol_l.isra.0+0xf0>)
 8004c14:	460d      	mov	r5, r1
 8004c16:	462a      	mov	r2, r5
 8004c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c1c:	5d06      	ldrb	r6, [r0, r4]
 8004c1e:	f016 0608 	ands.w	r6, r6, #8
 8004c22:	d1f8      	bne.n	8004c16 <_strtol_l.isra.0+0x22>
 8004c24:	2c2d      	cmp	r4, #45	@ 0x2d
 8004c26:	d110      	bne.n	8004c4a <_strtol_l.isra.0+0x56>
 8004c28:	782c      	ldrb	r4, [r5, #0]
 8004c2a:	2601      	movs	r6, #1
 8004c2c:	1c95      	adds	r5, r2, #2
 8004c2e:	f033 0210 	bics.w	r2, r3, #16
 8004c32:	d115      	bne.n	8004c60 <_strtol_l.isra.0+0x6c>
 8004c34:	2c30      	cmp	r4, #48	@ 0x30
 8004c36:	d10d      	bne.n	8004c54 <_strtol_l.isra.0+0x60>
 8004c38:	782a      	ldrb	r2, [r5, #0]
 8004c3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004c3e:	2a58      	cmp	r2, #88	@ 0x58
 8004c40:	d108      	bne.n	8004c54 <_strtol_l.isra.0+0x60>
 8004c42:	786c      	ldrb	r4, [r5, #1]
 8004c44:	3502      	adds	r5, #2
 8004c46:	2310      	movs	r3, #16
 8004c48:	e00a      	b.n	8004c60 <_strtol_l.isra.0+0x6c>
 8004c4a:	2c2b      	cmp	r4, #43	@ 0x2b
 8004c4c:	bf04      	itt	eq
 8004c4e:	782c      	ldrbeq	r4, [r5, #0]
 8004c50:	1c95      	addeq	r5, r2, #2
 8004c52:	e7ec      	b.n	8004c2e <_strtol_l.isra.0+0x3a>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f6      	bne.n	8004c46 <_strtol_l.isra.0+0x52>
 8004c58:	2c30      	cmp	r4, #48	@ 0x30
 8004c5a:	bf14      	ite	ne
 8004c5c:	230a      	movne	r3, #10
 8004c5e:	2308      	moveq	r3, #8
 8004c60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004c64:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004c68:	2200      	movs	r2, #0
 8004c6a:	fbbc f9f3 	udiv	r9, ip, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	fb03 ca19 	mls	sl, r3, r9, ip
 8004c74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004c78:	2f09      	cmp	r7, #9
 8004c7a:	d80f      	bhi.n	8004c9c <_strtol_l.isra.0+0xa8>
 8004c7c:	463c      	mov	r4, r7
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	dd1b      	ble.n	8004cba <_strtol_l.isra.0+0xc6>
 8004c82:	1c57      	adds	r7, r2, #1
 8004c84:	d007      	beq.n	8004c96 <_strtol_l.isra.0+0xa2>
 8004c86:	4581      	cmp	r9, r0
 8004c88:	d314      	bcc.n	8004cb4 <_strtol_l.isra.0+0xc0>
 8004c8a:	d101      	bne.n	8004c90 <_strtol_l.isra.0+0x9c>
 8004c8c:	45a2      	cmp	sl, r4
 8004c8e:	db11      	blt.n	8004cb4 <_strtol_l.isra.0+0xc0>
 8004c90:	fb00 4003 	mla	r0, r0, r3, r4
 8004c94:	2201      	movs	r2, #1
 8004c96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c9a:	e7eb      	b.n	8004c74 <_strtol_l.isra.0+0x80>
 8004c9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004ca0:	2f19      	cmp	r7, #25
 8004ca2:	d801      	bhi.n	8004ca8 <_strtol_l.isra.0+0xb4>
 8004ca4:	3c37      	subs	r4, #55	@ 0x37
 8004ca6:	e7ea      	b.n	8004c7e <_strtol_l.isra.0+0x8a>
 8004ca8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004cac:	2f19      	cmp	r7, #25
 8004cae:	d804      	bhi.n	8004cba <_strtol_l.isra.0+0xc6>
 8004cb0:	3c57      	subs	r4, #87	@ 0x57
 8004cb2:	e7e4      	b.n	8004c7e <_strtol_l.isra.0+0x8a>
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cb8:	e7ed      	b.n	8004c96 <_strtol_l.isra.0+0xa2>
 8004cba:	1c53      	adds	r3, r2, #1
 8004cbc:	d108      	bne.n	8004cd0 <_strtol_l.isra.0+0xdc>
 8004cbe:	2322      	movs	r3, #34	@ 0x22
 8004cc0:	f8ce 3000 	str.w	r3, [lr]
 8004cc4:	4660      	mov	r0, ip
 8004cc6:	f1b8 0f00 	cmp.w	r8, #0
 8004cca:	d0a0      	beq.n	8004c0e <_strtol_l.isra.0+0x1a>
 8004ccc:	1e69      	subs	r1, r5, #1
 8004cce:	e006      	b.n	8004cde <_strtol_l.isra.0+0xea>
 8004cd0:	b106      	cbz	r6, 8004cd4 <_strtol_l.isra.0+0xe0>
 8004cd2:	4240      	negs	r0, r0
 8004cd4:	f1b8 0f00 	cmp.w	r8, #0
 8004cd8:	d099      	beq.n	8004c0e <_strtol_l.isra.0+0x1a>
 8004cda:	2a00      	cmp	r2, #0
 8004cdc:	d1f6      	bne.n	8004ccc <_strtol_l.isra.0+0xd8>
 8004cde:	f8c8 1000 	str.w	r1, [r8]
 8004ce2:	e794      	b.n	8004c0e <_strtol_l.isra.0+0x1a>
 8004ce4:	08006003 	.word	0x08006003

08004ce8 <strtol>:
 8004ce8:	4613      	mov	r3, r2
 8004cea:	460a      	mov	r2, r1
 8004cec:	4601      	mov	r1, r0
 8004cee:	4802      	ldr	r0, [pc, #8]	@ (8004cf8 <strtol+0x10>)
 8004cf0:	6800      	ldr	r0, [r0, #0]
 8004cf2:	f7ff bf7f 	b.w	8004bf4 <_strtol_l.isra.0>
 8004cf6:	bf00      	nop
 8004cf8:	2000018c 	.word	0x2000018c

08004cfc <_fwalk_sglue>:
 8004cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d00:	4607      	mov	r7, r0
 8004d02:	4688      	mov	r8, r1
 8004d04:	4614      	mov	r4, r2
 8004d06:	2600      	movs	r6, #0
 8004d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d10:	d505      	bpl.n	8004d1e <_fwalk_sglue+0x22>
 8004d12:	6824      	ldr	r4, [r4, #0]
 8004d14:	2c00      	cmp	r4, #0
 8004d16:	d1f7      	bne.n	8004d08 <_fwalk_sglue+0xc>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d907      	bls.n	8004d34 <_fwalk_sglue+0x38>
 8004d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	d003      	beq.n	8004d34 <_fwalk_sglue+0x38>
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4638      	mov	r0, r7
 8004d30:	47c0      	blx	r8
 8004d32:	4306      	orrs	r6, r0
 8004d34:	3568      	adds	r5, #104	@ 0x68
 8004d36:	e7e9      	b.n	8004d0c <_fwalk_sglue+0x10>

08004d38 <memset>:
 8004d38:	4402      	add	r2, r0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <memset+0xa>
 8004d40:	4770      	bx	lr
 8004d42:	f803 1b01 	strb.w	r1, [r3], #1
 8004d46:	e7f9      	b.n	8004d3c <memset+0x4>

08004d48 <strncpy>:
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	3901      	subs	r1, #1
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	b132      	cbz	r2, 8004d5e <strncpy+0x16>
 8004d50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004d54:	f803 4b01 	strb.w	r4, [r3], #1
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	d1f7      	bne.n	8004d4e <strncpy+0x6>
 8004d5e:	441a      	add	r2, r3
 8004d60:	2100      	movs	r1, #0
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d100      	bne.n	8004d68 <strncpy+0x20>
 8004d66:	bd10      	pop	{r4, pc}
 8004d68:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6c:	e7f9      	b.n	8004d62 <strncpy+0x1a>
	...

08004d70 <__errno>:
 8004d70:	4b01      	ldr	r3, [pc, #4]	@ (8004d78 <__errno+0x8>)
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	2000018c 	.word	0x2000018c

08004d7c <__libc_init_array>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8004db4 <__libc_init_array+0x38>)
 8004d80:	4c0d      	ldr	r4, [pc, #52]	@ (8004db8 <__libc_init_array+0x3c>)
 8004d82:	1b64      	subs	r4, r4, r5
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	2600      	movs	r6, #0
 8004d88:	42a6      	cmp	r6, r4
 8004d8a:	d109      	bne.n	8004da0 <__libc_init_array+0x24>
 8004d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8004dbc <__libc_init_array+0x40>)
 8004d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8004dc0 <__libc_init_array+0x44>)
 8004d90:	f001 f882 	bl	8005e98 <_init>
 8004d94:	1b64      	subs	r4, r4, r5
 8004d96:	10a4      	asrs	r4, r4, #2
 8004d98:	2600      	movs	r6, #0
 8004d9a:	42a6      	cmp	r6, r4
 8004d9c:	d105      	bne.n	8004daa <__libc_init_array+0x2e>
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
 8004da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da4:	4798      	blx	r3
 8004da6:	3601      	adds	r6, #1
 8004da8:	e7ee      	b.n	8004d88 <__libc_init_array+0xc>
 8004daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dae:	4798      	blx	r3
 8004db0:	3601      	adds	r6, #1
 8004db2:	e7f2      	b.n	8004d9a <__libc_init_array+0x1e>
 8004db4:	0800610c 	.word	0x0800610c
 8004db8:	0800610c 	.word	0x0800610c
 8004dbc:	0800610c 	.word	0x0800610c
 8004dc0:	08006110 	.word	0x08006110

08004dc4 <__retarget_lock_init_recursive>:
 8004dc4:	4770      	bx	lr

08004dc6 <__retarget_lock_acquire_recursive>:
 8004dc6:	4770      	bx	lr

08004dc8 <__retarget_lock_release_recursive>:
 8004dc8:	4770      	bx	lr

08004dca <strcpy>:
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dd0:	f803 2b01 	strb.w	r2, [r3], #1
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	d1f9      	bne.n	8004dcc <strcpy+0x2>
 8004dd8:	4770      	bx	lr
	...

08004ddc <__assert_func>:
 8004ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004dde:	4614      	mov	r4, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <__assert_func+0x2c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4605      	mov	r5, r0
 8004de8:	68d8      	ldr	r0, [r3, #12]
 8004dea:	b14c      	cbz	r4, 8004e00 <__assert_func+0x24>
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <__assert_func+0x30>)
 8004dee:	9100      	str	r1, [sp, #0]
 8004df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004df4:	4906      	ldr	r1, [pc, #24]	@ (8004e10 <__assert_func+0x34>)
 8004df6:	462b      	mov	r3, r5
 8004df8:	f000 fc98 	bl	800572c <fiprintf>
 8004dfc:	f000 fd54 	bl	80058a8 <abort>
 8004e00:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <__assert_func+0x38>)
 8004e02:	461c      	mov	r4, r3
 8004e04:	e7f3      	b.n	8004dee <__assert_func+0x12>
 8004e06:	bf00      	nop
 8004e08:	2000018c 	.word	0x2000018c
 8004e0c:	08005f93 	.word	0x08005f93
 8004e10:	08005fa0 	.word	0x08005fa0
 8004e14:	08005fce 	.word	0x08005fce

08004e18 <__ssputs_r>:
 8004e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	688e      	ldr	r6, [r1, #8]
 8004e1e:	461f      	mov	r7, r3
 8004e20:	42be      	cmp	r6, r7
 8004e22:	680b      	ldr	r3, [r1, #0]
 8004e24:	4682      	mov	sl, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	4690      	mov	r8, r2
 8004e2a:	d82d      	bhi.n	8004e88 <__ssputs_r+0x70>
 8004e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e34:	d026      	beq.n	8004e84 <__ssputs_r+0x6c>
 8004e36:	6965      	ldr	r5, [r4, #20]
 8004e38:	6909      	ldr	r1, [r1, #16]
 8004e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e3e:	eba3 0901 	sub.w	r9, r3, r1
 8004e42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e46:	1c7b      	adds	r3, r7, #1
 8004e48:	444b      	add	r3, r9
 8004e4a:	106d      	asrs	r5, r5, #1
 8004e4c:	429d      	cmp	r5, r3
 8004e4e:	bf38      	it	cc
 8004e50:	461d      	movcc	r5, r3
 8004e52:	0553      	lsls	r3, r2, #21
 8004e54:	d527      	bpl.n	8004ea6 <__ssputs_r+0x8e>
 8004e56:	4629      	mov	r1, r5
 8004e58:	f000 f960 	bl	800511c <_malloc_r>
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	b360      	cbz	r0, 8004eba <__ssputs_r+0xa2>
 8004e60:	6921      	ldr	r1, [r4, #16]
 8004e62:	464a      	mov	r2, r9
 8004e64:	f000 fd12 	bl	800588c <memcpy>
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e72:	81a3      	strh	r3, [r4, #12]
 8004e74:	6126      	str	r6, [r4, #16]
 8004e76:	6165      	str	r5, [r4, #20]
 8004e78:	444e      	add	r6, r9
 8004e7a:	eba5 0509 	sub.w	r5, r5, r9
 8004e7e:	6026      	str	r6, [r4, #0]
 8004e80:	60a5      	str	r5, [r4, #8]
 8004e82:	463e      	mov	r6, r7
 8004e84:	42be      	cmp	r6, r7
 8004e86:	d900      	bls.n	8004e8a <__ssputs_r+0x72>
 8004e88:	463e      	mov	r6, r7
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	4632      	mov	r2, r6
 8004e8e:	4641      	mov	r1, r8
 8004e90:	f000 fc8c 	bl	80057ac <memmove>
 8004e94:	68a3      	ldr	r3, [r4, #8]
 8004e96:	1b9b      	subs	r3, r3, r6
 8004e98:	60a3      	str	r3, [r4, #8]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	4433      	add	r3, r6
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	f000 fc52 	bl	8005750 <_realloc_r>
 8004eac:	4606      	mov	r6, r0
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d1e0      	bne.n	8004e74 <__ssputs_r+0x5c>
 8004eb2:	6921      	ldr	r1, [r4, #16]
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	f000 fcff 	bl	80058b8 <_free_r>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	f8ca 3000 	str.w	r3, [sl]
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ecc:	e7e9      	b.n	8004ea2 <__ssputs_r+0x8a>
	...

08004ed0 <_svfiprintf_r>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	4698      	mov	r8, r3
 8004ed6:	898b      	ldrh	r3, [r1, #12]
 8004ed8:	061b      	lsls	r3, r3, #24
 8004eda:	b09d      	sub	sp, #116	@ 0x74
 8004edc:	4607      	mov	r7, r0
 8004ede:	460d      	mov	r5, r1
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	d510      	bpl.n	8004f06 <_svfiprintf_r+0x36>
 8004ee4:	690b      	ldr	r3, [r1, #16]
 8004ee6:	b973      	cbnz	r3, 8004f06 <_svfiprintf_r+0x36>
 8004ee8:	2140      	movs	r1, #64	@ 0x40
 8004eea:	f000 f917 	bl	800511c <_malloc_r>
 8004eee:	6028      	str	r0, [r5, #0]
 8004ef0:	6128      	str	r0, [r5, #16]
 8004ef2:	b930      	cbnz	r0, 8004f02 <_svfiprintf_r+0x32>
 8004ef4:	230c      	movs	r3, #12
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004efc:	b01d      	add	sp, #116	@ 0x74
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	2340      	movs	r3, #64	@ 0x40
 8004f04:	616b      	str	r3, [r5, #20]
 8004f06:	2300      	movs	r3, #0
 8004f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f14:	2330      	movs	r3, #48	@ 0x30
 8004f16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050b4 <_svfiprintf_r+0x1e4>
 8004f1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f1e:	f04f 0901 	mov.w	r9, #1
 8004f22:	4623      	mov	r3, r4
 8004f24:	469a      	mov	sl, r3
 8004f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f2a:	b10a      	cbz	r2, 8004f30 <_svfiprintf_r+0x60>
 8004f2c:	2a25      	cmp	r2, #37	@ 0x25
 8004f2e:	d1f9      	bne.n	8004f24 <_svfiprintf_r+0x54>
 8004f30:	ebba 0b04 	subs.w	fp, sl, r4
 8004f34:	d00b      	beq.n	8004f4e <_svfiprintf_r+0x7e>
 8004f36:	465b      	mov	r3, fp
 8004f38:	4622      	mov	r2, r4
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f7ff ff6b 	bl	8004e18 <__ssputs_r>
 8004f42:	3001      	adds	r0, #1
 8004f44:	f000 80a7 	beq.w	8005096 <_svfiprintf_r+0x1c6>
 8004f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f4a:	445a      	add	r2, fp
 8004f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 809f 	beq.w	8005096 <_svfiprintf_r+0x1c6>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f62:	f10a 0a01 	add.w	sl, sl, #1
 8004f66:	9304      	str	r3, [sp, #16]
 8004f68:	9307      	str	r3, [sp, #28]
 8004f6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f70:	4654      	mov	r4, sl
 8004f72:	2205      	movs	r2, #5
 8004f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f78:	484e      	ldr	r0, [pc, #312]	@ (80050b4 <_svfiprintf_r+0x1e4>)
 8004f7a:	f7fb f929 	bl	80001d0 <memchr>
 8004f7e:	9a04      	ldr	r2, [sp, #16]
 8004f80:	b9d8      	cbnz	r0, 8004fba <_svfiprintf_r+0xea>
 8004f82:	06d0      	lsls	r0, r2, #27
 8004f84:	bf44      	itt	mi
 8004f86:	2320      	movmi	r3, #32
 8004f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f8c:	0711      	lsls	r1, r2, #28
 8004f8e:	bf44      	itt	mi
 8004f90:	232b      	movmi	r3, #43	@ 0x2b
 8004f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f96:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f9c:	d015      	beq.n	8004fca <_svfiprintf_r+0xfa>
 8004f9e:	9a07      	ldr	r2, [sp, #28]
 8004fa0:	4654      	mov	r4, sl
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f04f 0c0a 	mov.w	ip, #10
 8004fa8:	4621      	mov	r1, r4
 8004faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fae:	3b30      	subs	r3, #48	@ 0x30
 8004fb0:	2b09      	cmp	r3, #9
 8004fb2:	d94b      	bls.n	800504c <_svfiprintf_r+0x17c>
 8004fb4:	b1b0      	cbz	r0, 8004fe4 <_svfiprintf_r+0x114>
 8004fb6:	9207      	str	r2, [sp, #28]
 8004fb8:	e014      	b.n	8004fe4 <_svfiprintf_r+0x114>
 8004fba:	eba0 0308 	sub.w	r3, r0, r8
 8004fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	9304      	str	r3, [sp, #16]
 8004fc6:	46a2      	mov	sl, r4
 8004fc8:	e7d2      	b.n	8004f70 <_svfiprintf_r+0xa0>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	1d19      	adds	r1, r3, #4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	9103      	str	r1, [sp, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bfbb      	ittet	lt
 8004fd6:	425b      	neglt	r3, r3
 8004fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8004fdc:	9307      	strge	r3, [sp, #28]
 8004fde:	9307      	strlt	r3, [sp, #28]
 8004fe0:	bfb8      	it	lt
 8004fe2:	9204      	strlt	r2, [sp, #16]
 8004fe4:	7823      	ldrb	r3, [r4, #0]
 8004fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fe8:	d10a      	bne.n	8005000 <_svfiprintf_r+0x130>
 8004fea:	7863      	ldrb	r3, [r4, #1]
 8004fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fee:	d132      	bne.n	8005056 <_svfiprintf_r+0x186>
 8004ff0:	9b03      	ldr	r3, [sp, #12]
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	9203      	str	r2, [sp, #12]
 8004ff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ffc:	3402      	adds	r4, #2
 8004ffe:	9305      	str	r3, [sp, #20]
 8005000:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050c4 <_svfiprintf_r+0x1f4>
 8005004:	7821      	ldrb	r1, [r4, #0]
 8005006:	2203      	movs	r2, #3
 8005008:	4650      	mov	r0, sl
 800500a:	f7fb f8e1 	bl	80001d0 <memchr>
 800500e:	b138      	cbz	r0, 8005020 <_svfiprintf_r+0x150>
 8005010:	9b04      	ldr	r3, [sp, #16]
 8005012:	eba0 000a 	sub.w	r0, r0, sl
 8005016:	2240      	movs	r2, #64	@ 0x40
 8005018:	4082      	lsls	r2, r0
 800501a:	4313      	orrs	r3, r2
 800501c:	3401      	adds	r4, #1
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005024:	4824      	ldr	r0, [pc, #144]	@ (80050b8 <_svfiprintf_r+0x1e8>)
 8005026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800502a:	2206      	movs	r2, #6
 800502c:	f7fb f8d0 	bl	80001d0 <memchr>
 8005030:	2800      	cmp	r0, #0
 8005032:	d036      	beq.n	80050a2 <_svfiprintf_r+0x1d2>
 8005034:	4b21      	ldr	r3, [pc, #132]	@ (80050bc <_svfiprintf_r+0x1ec>)
 8005036:	bb1b      	cbnz	r3, 8005080 <_svfiprintf_r+0x1b0>
 8005038:	9b03      	ldr	r3, [sp, #12]
 800503a:	3307      	adds	r3, #7
 800503c:	f023 0307 	bic.w	r3, r3, #7
 8005040:	3308      	adds	r3, #8
 8005042:	9303      	str	r3, [sp, #12]
 8005044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005046:	4433      	add	r3, r6
 8005048:	9309      	str	r3, [sp, #36]	@ 0x24
 800504a:	e76a      	b.n	8004f22 <_svfiprintf_r+0x52>
 800504c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005050:	460c      	mov	r4, r1
 8005052:	2001      	movs	r0, #1
 8005054:	e7a8      	b.n	8004fa8 <_svfiprintf_r+0xd8>
 8005056:	2300      	movs	r3, #0
 8005058:	3401      	adds	r4, #1
 800505a:	9305      	str	r3, [sp, #20]
 800505c:	4619      	mov	r1, r3
 800505e:	f04f 0c0a 	mov.w	ip, #10
 8005062:	4620      	mov	r0, r4
 8005064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005068:	3a30      	subs	r2, #48	@ 0x30
 800506a:	2a09      	cmp	r2, #9
 800506c:	d903      	bls.n	8005076 <_svfiprintf_r+0x1a6>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0c6      	beq.n	8005000 <_svfiprintf_r+0x130>
 8005072:	9105      	str	r1, [sp, #20]
 8005074:	e7c4      	b.n	8005000 <_svfiprintf_r+0x130>
 8005076:	fb0c 2101 	mla	r1, ip, r1, r2
 800507a:	4604      	mov	r4, r0
 800507c:	2301      	movs	r3, #1
 800507e:	e7f0      	b.n	8005062 <_svfiprintf_r+0x192>
 8005080:	ab03      	add	r3, sp, #12
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	462a      	mov	r2, r5
 8005086:	4b0e      	ldr	r3, [pc, #56]	@ (80050c0 <_svfiprintf_r+0x1f0>)
 8005088:	a904      	add	r1, sp, #16
 800508a:	4638      	mov	r0, r7
 800508c:	f3af 8000 	nop.w
 8005090:	1c42      	adds	r2, r0, #1
 8005092:	4606      	mov	r6, r0
 8005094:	d1d6      	bne.n	8005044 <_svfiprintf_r+0x174>
 8005096:	89ab      	ldrh	r3, [r5, #12]
 8005098:	065b      	lsls	r3, r3, #25
 800509a:	f53f af2d 	bmi.w	8004ef8 <_svfiprintf_r+0x28>
 800509e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050a0:	e72c      	b.n	8004efc <_svfiprintf_r+0x2c>
 80050a2:	ab03      	add	r3, sp, #12
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	462a      	mov	r2, r5
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <_svfiprintf_r+0x1f0>)
 80050aa:	a904      	add	r1, sp, #16
 80050ac:	4638      	mov	r0, r7
 80050ae:	f000 f923 	bl	80052f8 <_printf_i>
 80050b2:	e7ed      	b.n	8005090 <_svfiprintf_r+0x1c0>
 80050b4:	08005fcf 	.word	0x08005fcf
 80050b8:	08005fd9 	.word	0x08005fd9
 80050bc:	00000000 	.word	0x00000000
 80050c0:	08004e19 	.word	0x08004e19
 80050c4:	08005fd5 	.word	0x08005fd5

080050c8 <malloc>:
 80050c8:	4b02      	ldr	r3, [pc, #8]	@ (80050d4 <malloc+0xc>)
 80050ca:	4601      	mov	r1, r0
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	f000 b825 	b.w	800511c <_malloc_r>
 80050d2:	bf00      	nop
 80050d4:	2000018c 	.word	0x2000018c

080050d8 <sbrk_aligned>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4e0f      	ldr	r6, [pc, #60]	@ (8005118 <sbrk_aligned+0x40>)
 80050dc:	460c      	mov	r4, r1
 80050de:	6831      	ldr	r1, [r6, #0]
 80050e0:	4605      	mov	r5, r0
 80050e2:	b911      	cbnz	r1, 80050ea <sbrk_aligned+0x12>
 80050e4:	f000 fba0 	bl	8005828 <_sbrk_r>
 80050e8:	6030      	str	r0, [r6, #0]
 80050ea:	4621      	mov	r1, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 fb9b 	bl	8005828 <_sbrk_r>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d103      	bne.n	80050fe <sbrk_aligned+0x26>
 80050f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80050fa:	4620      	mov	r0, r4
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	1cc4      	adds	r4, r0, #3
 8005100:	f024 0403 	bic.w	r4, r4, #3
 8005104:	42a0      	cmp	r0, r4
 8005106:	d0f8      	beq.n	80050fa <sbrk_aligned+0x22>
 8005108:	1a21      	subs	r1, r4, r0
 800510a:	4628      	mov	r0, r5
 800510c:	f000 fb8c 	bl	8005828 <_sbrk_r>
 8005110:	3001      	adds	r0, #1
 8005112:	d1f2      	bne.n	80050fa <sbrk_aligned+0x22>
 8005114:	e7ef      	b.n	80050f6 <sbrk_aligned+0x1e>
 8005116:	bf00      	nop
 8005118:	20000488 	.word	0x20000488

0800511c <_malloc_r>:
 800511c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005120:	1ccd      	adds	r5, r1, #3
 8005122:	f025 0503 	bic.w	r5, r5, #3
 8005126:	3508      	adds	r5, #8
 8005128:	2d0c      	cmp	r5, #12
 800512a:	bf38      	it	cc
 800512c:	250c      	movcc	r5, #12
 800512e:	2d00      	cmp	r5, #0
 8005130:	4606      	mov	r6, r0
 8005132:	db01      	blt.n	8005138 <_malloc_r+0x1c>
 8005134:	42a9      	cmp	r1, r5
 8005136:	d904      	bls.n	8005142 <_malloc_r+0x26>
 8005138:	230c      	movs	r3, #12
 800513a:	6033      	str	r3, [r6, #0]
 800513c:	2000      	movs	r0, #0
 800513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005218 <_malloc_r+0xfc>
 8005146:	f000 faa1 	bl	800568c <__malloc_lock>
 800514a:	f8d8 3000 	ldr.w	r3, [r8]
 800514e:	461c      	mov	r4, r3
 8005150:	bb44      	cbnz	r4, 80051a4 <_malloc_r+0x88>
 8005152:	4629      	mov	r1, r5
 8005154:	4630      	mov	r0, r6
 8005156:	f7ff ffbf 	bl	80050d8 <sbrk_aligned>
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	4604      	mov	r4, r0
 800515e:	d158      	bne.n	8005212 <_malloc_r+0xf6>
 8005160:	f8d8 4000 	ldr.w	r4, [r8]
 8005164:	4627      	mov	r7, r4
 8005166:	2f00      	cmp	r7, #0
 8005168:	d143      	bne.n	80051f2 <_malloc_r+0xd6>
 800516a:	2c00      	cmp	r4, #0
 800516c:	d04b      	beq.n	8005206 <_malloc_r+0xea>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	4639      	mov	r1, r7
 8005172:	4630      	mov	r0, r6
 8005174:	eb04 0903 	add.w	r9, r4, r3
 8005178:	f000 fb56 	bl	8005828 <_sbrk_r>
 800517c:	4581      	cmp	r9, r0
 800517e:	d142      	bne.n	8005206 <_malloc_r+0xea>
 8005180:	6821      	ldr	r1, [r4, #0]
 8005182:	1a6d      	subs	r5, r5, r1
 8005184:	4629      	mov	r1, r5
 8005186:	4630      	mov	r0, r6
 8005188:	f7ff ffa6 	bl	80050d8 <sbrk_aligned>
 800518c:	3001      	adds	r0, #1
 800518e:	d03a      	beq.n	8005206 <_malloc_r+0xea>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	442b      	add	r3, r5
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	f8d8 3000 	ldr.w	r3, [r8]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	bb62      	cbnz	r2, 80051f8 <_malloc_r+0xdc>
 800519e:	f8c8 7000 	str.w	r7, [r8]
 80051a2:	e00f      	b.n	80051c4 <_malloc_r+0xa8>
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	1b52      	subs	r2, r2, r5
 80051a8:	d420      	bmi.n	80051ec <_malloc_r+0xd0>
 80051aa:	2a0b      	cmp	r2, #11
 80051ac:	d917      	bls.n	80051de <_malloc_r+0xc2>
 80051ae:	1961      	adds	r1, r4, r5
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	6025      	str	r5, [r4, #0]
 80051b4:	bf18      	it	ne
 80051b6:	6059      	strne	r1, [r3, #4]
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	bf08      	it	eq
 80051bc:	f8c8 1000 	streq.w	r1, [r8]
 80051c0:	5162      	str	r2, [r4, r5]
 80051c2:	604b      	str	r3, [r1, #4]
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 fa67 	bl	8005698 <__malloc_unlock>
 80051ca:	f104 000b 	add.w	r0, r4, #11
 80051ce:	1d23      	adds	r3, r4, #4
 80051d0:	f020 0007 	bic.w	r0, r0, #7
 80051d4:	1ac2      	subs	r2, r0, r3
 80051d6:	bf1c      	itt	ne
 80051d8:	1a1b      	subne	r3, r3, r0
 80051da:	50a3      	strne	r3, [r4, r2]
 80051dc:	e7af      	b.n	800513e <_malloc_r+0x22>
 80051de:	6862      	ldr	r2, [r4, #4]
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	bf0c      	ite	eq
 80051e4:	f8c8 2000 	streq.w	r2, [r8]
 80051e8:	605a      	strne	r2, [r3, #4]
 80051ea:	e7eb      	b.n	80051c4 <_malloc_r+0xa8>
 80051ec:	4623      	mov	r3, r4
 80051ee:	6864      	ldr	r4, [r4, #4]
 80051f0:	e7ae      	b.n	8005150 <_malloc_r+0x34>
 80051f2:	463c      	mov	r4, r7
 80051f4:	687f      	ldr	r7, [r7, #4]
 80051f6:	e7b6      	b.n	8005166 <_malloc_r+0x4a>
 80051f8:	461a      	mov	r2, r3
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d1fb      	bne.n	80051f8 <_malloc_r+0xdc>
 8005200:	2300      	movs	r3, #0
 8005202:	6053      	str	r3, [r2, #4]
 8005204:	e7de      	b.n	80051c4 <_malloc_r+0xa8>
 8005206:	230c      	movs	r3, #12
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	4630      	mov	r0, r6
 800520c:	f000 fa44 	bl	8005698 <__malloc_unlock>
 8005210:	e794      	b.n	800513c <_malloc_r+0x20>
 8005212:	6005      	str	r5, [r0, #0]
 8005214:	e7d6      	b.n	80051c4 <_malloc_r+0xa8>
 8005216:	bf00      	nop
 8005218:	2000048c 	.word	0x2000048c

0800521c <_printf_common>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	4616      	mov	r6, r2
 8005222:	4698      	mov	r8, r3
 8005224:	688a      	ldr	r2, [r1, #8]
 8005226:	690b      	ldr	r3, [r1, #16]
 8005228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800522c:	4293      	cmp	r3, r2
 800522e:	bfb8      	it	lt
 8005230:	4613      	movlt	r3, r2
 8005232:	6033      	str	r3, [r6, #0]
 8005234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005238:	4607      	mov	r7, r0
 800523a:	460c      	mov	r4, r1
 800523c:	b10a      	cbz	r2, 8005242 <_printf_common+0x26>
 800523e:	3301      	adds	r3, #1
 8005240:	6033      	str	r3, [r6, #0]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	0699      	lsls	r1, r3, #26
 8005246:	bf42      	ittt	mi
 8005248:	6833      	ldrmi	r3, [r6, #0]
 800524a:	3302      	addmi	r3, #2
 800524c:	6033      	strmi	r3, [r6, #0]
 800524e:	6825      	ldr	r5, [r4, #0]
 8005250:	f015 0506 	ands.w	r5, r5, #6
 8005254:	d106      	bne.n	8005264 <_printf_common+0x48>
 8005256:	f104 0a19 	add.w	sl, r4, #25
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	6832      	ldr	r2, [r6, #0]
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	42ab      	cmp	r3, r5
 8005262:	dc26      	bgt.n	80052b2 <_printf_common+0x96>
 8005264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005268:	6822      	ldr	r2, [r4, #0]
 800526a:	3b00      	subs	r3, #0
 800526c:	bf18      	it	ne
 800526e:	2301      	movne	r3, #1
 8005270:	0692      	lsls	r2, r2, #26
 8005272:	d42b      	bmi.n	80052cc <_printf_common+0xb0>
 8005274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005278:	4641      	mov	r1, r8
 800527a:	4638      	mov	r0, r7
 800527c:	47c8      	blx	r9
 800527e:	3001      	adds	r0, #1
 8005280:	d01e      	beq.n	80052c0 <_printf_common+0xa4>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	6922      	ldr	r2, [r4, #16]
 8005286:	f003 0306 	and.w	r3, r3, #6
 800528a:	2b04      	cmp	r3, #4
 800528c:	bf02      	ittt	eq
 800528e:	68e5      	ldreq	r5, [r4, #12]
 8005290:	6833      	ldreq	r3, [r6, #0]
 8005292:	1aed      	subeq	r5, r5, r3
 8005294:	68a3      	ldr	r3, [r4, #8]
 8005296:	bf0c      	ite	eq
 8005298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800529c:	2500      	movne	r5, #0
 800529e:	4293      	cmp	r3, r2
 80052a0:	bfc4      	itt	gt
 80052a2:	1a9b      	subgt	r3, r3, r2
 80052a4:	18ed      	addgt	r5, r5, r3
 80052a6:	2600      	movs	r6, #0
 80052a8:	341a      	adds	r4, #26
 80052aa:	42b5      	cmp	r5, r6
 80052ac:	d11a      	bne.n	80052e4 <_printf_common+0xc8>
 80052ae:	2000      	movs	r0, #0
 80052b0:	e008      	b.n	80052c4 <_printf_common+0xa8>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4652      	mov	r2, sl
 80052b6:	4641      	mov	r1, r8
 80052b8:	4638      	mov	r0, r7
 80052ba:	47c8      	blx	r9
 80052bc:	3001      	adds	r0, #1
 80052be:	d103      	bne.n	80052c8 <_printf_common+0xac>
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c8:	3501      	adds	r5, #1
 80052ca:	e7c6      	b.n	800525a <_printf_common+0x3e>
 80052cc:	18e1      	adds	r1, r4, r3
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	2030      	movs	r0, #48	@ 0x30
 80052d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052d6:	4422      	add	r2, r4
 80052d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052e0:	3302      	adds	r3, #2
 80052e2:	e7c7      	b.n	8005274 <_printf_common+0x58>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4622      	mov	r2, r4
 80052e8:	4641      	mov	r1, r8
 80052ea:	4638      	mov	r0, r7
 80052ec:	47c8      	blx	r9
 80052ee:	3001      	adds	r0, #1
 80052f0:	d0e6      	beq.n	80052c0 <_printf_common+0xa4>
 80052f2:	3601      	adds	r6, #1
 80052f4:	e7d9      	b.n	80052aa <_printf_common+0x8e>
	...

080052f8 <_printf_i>:
 80052f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	7e0f      	ldrb	r7, [r1, #24]
 80052fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005300:	2f78      	cmp	r7, #120	@ 0x78
 8005302:	4691      	mov	r9, r2
 8005304:	4680      	mov	r8, r0
 8005306:	460c      	mov	r4, r1
 8005308:	469a      	mov	sl, r3
 800530a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800530e:	d807      	bhi.n	8005320 <_printf_i+0x28>
 8005310:	2f62      	cmp	r7, #98	@ 0x62
 8005312:	d80a      	bhi.n	800532a <_printf_i+0x32>
 8005314:	2f00      	cmp	r7, #0
 8005316:	f000 80d1 	beq.w	80054bc <_printf_i+0x1c4>
 800531a:	2f58      	cmp	r7, #88	@ 0x58
 800531c:	f000 80b8 	beq.w	8005490 <_printf_i+0x198>
 8005320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005328:	e03a      	b.n	80053a0 <_printf_i+0xa8>
 800532a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800532e:	2b15      	cmp	r3, #21
 8005330:	d8f6      	bhi.n	8005320 <_printf_i+0x28>
 8005332:	a101      	add	r1, pc, #4	@ (adr r1, 8005338 <_printf_i+0x40>)
 8005334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005338:	08005391 	.word	0x08005391
 800533c:	080053a5 	.word	0x080053a5
 8005340:	08005321 	.word	0x08005321
 8005344:	08005321 	.word	0x08005321
 8005348:	08005321 	.word	0x08005321
 800534c:	08005321 	.word	0x08005321
 8005350:	080053a5 	.word	0x080053a5
 8005354:	08005321 	.word	0x08005321
 8005358:	08005321 	.word	0x08005321
 800535c:	08005321 	.word	0x08005321
 8005360:	08005321 	.word	0x08005321
 8005364:	080054a3 	.word	0x080054a3
 8005368:	080053cf 	.word	0x080053cf
 800536c:	0800545d 	.word	0x0800545d
 8005370:	08005321 	.word	0x08005321
 8005374:	08005321 	.word	0x08005321
 8005378:	080054c5 	.word	0x080054c5
 800537c:	08005321 	.word	0x08005321
 8005380:	080053cf 	.word	0x080053cf
 8005384:	08005321 	.word	0x08005321
 8005388:	08005321 	.word	0x08005321
 800538c:	08005465 	.word	0x08005465
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	1d1a      	adds	r2, r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6032      	str	r2, [r6, #0]
 8005398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800539c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053a0:	2301      	movs	r3, #1
 80053a2:	e09c      	b.n	80054de <_printf_i+0x1e6>
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	6820      	ldr	r0, [r4, #0]
 80053a8:	1d19      	adds	r1, r3, #4
 80053aa:	6031      	str	r1, [r6, #0]
 80053ac:	0606      	lsls	r6, r0, #24
 80053ae:	d501      	bpl.n	80053b4 <_printf_i+0xbc>
 80053b0:	681d      	ldr	r5, [r3, #0]
 80053b2:	e003      	b.n	80053bc <_printf_i+0xc4>
 80053b4:	0645      	lsls	r5, r0, #25
 80053b6:	d5fb      	bpl.n	80053b0 <_printf_i+0xb8>
 80053b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053bc:	2d00      	cmp	r5, #0
 80053be:	da03      	bge.n	80053c8 <_printf_i+0xd0>
 80053c0:	232d      	movs	r3, #45	@ 0x2d
 80053c2:	426d      	negs	r5, r5
 80053c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c8:	4858      	ldr	r0, [pc, #352]	@ (800552c <_printf_i+0x234>)
 80053ca:	230a      	movs	r3, #10
 80053cc:	e011      	b.n	80053f2 <_printf_i+0xfa>
 80053ce:	6821      	ldr	r1, [r4, #0]
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	0608      	lsls	r0, r1, #24
 80053d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80053d8:	d402      	bmi.n	80053e0 <_printf_i+0xe8>
 80053da:	0649      	lsls	r1, r1, #25
 80053dc:	bf48      	it	mi
 80053de:	b2ad      	uxthmi	r5, r5
 80053e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80053e2:	4852      	ldr	r0, [pc, #328]	@ (800552c <_printf_i+0x234>)
 80053e4:	6033      	str	r3, [r6, #0]
 80053e6:	bf14      	ite	ne
 80053e8:	230a      	movne	r3, #10
 80053ea:	2308      	moveq	r3, #8
 80053ec:	2100      	movs	r1, #0
 80053ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053f2:	6866      	ldr	r6, [r4, #4]
 80053f4:	60a6      	str	r6, [r4, #8]
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	db05      	blt.n	8005406 <_printf_i+0x10e>
 80053fa:	6821      	ldr	r1, [r4, #0]
 80053fc:	432e      	orrs	r6, r5
 80053fe:	f021 0104 	bic.w	r1, r1, #4
 8005402:	6021      	str	r1, [r4, #0]
 8005404:	d04b      	beq.n	800549e <_printf_i+0x1a6>
 8005406:	4616      	mov	r6, r2
 8005408:	fbb5 f1f3 	udiv	r1, r5, r3
 800540c:	fb03 5711 	mls	r7, r3, r1, r5
 8005410:	5dc7      	ldrb	r7, [r0, r7]
 8005412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005416:	462f      	mov	r7, r5
 8005418:	42bb      	cmp	r3, r7
 800541a:	460d      	mov	r5, r1
 800541c:	d9f4      	bls.n	8005408 <_printf_i+0x110>
 800541e:	2b08      	cmp	r3, #8
 8005420:	d10b      	bne.n	800543a <_printf_i+0x142>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	07df      	lsls	r7, r3, #31
 8005426:	d508      	bpl.n	800543a <_printf_i+0x142>
 8005428:	6923      	ldr	r3, [r4, #16]
 800542a:	6861      	ldr	r1, [r4, #4]
 800542c:	4299      	cmp	r1, r3
 800542e:	bfde      	ittt	le
 8005430:	2330      	movle	r3, #48	@ 0x30
 8005432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005436:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800543a:	1b92      	subs	r2, r2, r6
 800543c:	6122      	str	r2, [r4, #16]
 800543e:	f8cd a000 	str.w	sl, [sp]
 8005442:	464b      	mov	r3, r9
 8005444:	aa03      	add	r2, sp, #12
 8005446:	4621      	mov	r1, r4
 8005448:	4640      	mov	r0, r8
 800544a:	f7ff fee7 	bl	800521c <_printf_common>
 800544e:	3001      	adds	r0, #1
 8005450:	d14a      	bne.n	80054e8 <_printf_i+0x1f0>
 8005452:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005456:	b004      	add	sp, #16
 8005458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f043 0320 	orr.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	4832      	ldr	r0, [pc, #200]	@ (8005530 <_printf_i+0x238>)
 8005466:	2778      	movs	r7, #120	@ 0x78
 8005468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	061f      	lsls	r7, r3, #24
 8005472:	f851 5b04 	ldr.w	r5, [r1], #4
 8005476:	d402      	bmi.n	800547e <_printf_i+0x186>
 8005478:	065f      	lsls	r7, r3, #25
 800547a:	bf48      	it	mi
 800547c:	b2ad      	uxthmi	r5, r5
 800547e:	6031      	str	r1, [r6, #0]
 8005480:	07d9      	lsls	r1, r3, #31
 8005482:	bf44      	itt	mi
 8005484:	f043 0320 	orrmi.w	r3, r3, #32
 8005488:	6023      	strmi	r3, [r4, #0]
 800548a:	b11d      	cbz	r5, 8005494 <_printf_i+0x19c>
 800548c:	2310      	movs	r3, #16
 800548e:	e7ad      	b.n	80053ec <_printf_i+0xf4>
 8005490:	4826      	ldr	r0, [pc, #152]	@ (800552c <_printf_i+0x234>)
 8005492:	e7e9      	b.n	8005468 <_printf_i+0x170>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	e7f6      	b.n	800548c <_printf_i+0x194>
 800549e:	4616      	mov	r6, r2
 80054a0:	e7bd      	b.n	800541e <_printf_i+0x126>
 80054a2:	6833      	ldr	r3, [r6, #0]
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	6961      	ldr	r1, [r4, #20]
 80054a8:	1d18      	adds	r0, r3, #4
 80054aa:	6030      	str	r0, [r6, #0]
 80054ac:	062e      	lsls	r6, r5, #24
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	d501      	bpl.n	80054b6 <_printf_i+0x1be>
 80054b2:	6019      	str	r1, [r3, #0]
 80054b4:	e002      	b.n	80054bc <_printf_i+0x1c4>
 80054b6:	0668      	lsls	r0, r5, #25
 80054b8:	d5fb      	bpl.n	80054b2 <_printf_i+0x1ba>
 80054ba:	8019      	strh	r1, [r3, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	4616      	mov	r6, r2
 80054c2:	e7bc      	b.n	800543e <_printf_i+0x146>
 80054c4:	6833      	ldr	r3, [r6, #0]
 80054c6:	1d1a      	adds	r2, r3, #4
 80054c8:	6032      	str	r2, [r6, #0]
 80054ca:	681e      	ldr	r6, [r3, #0]
 80054cc:	6862      	ldr	r2, [r4, #4]
 80054ce:	2100      	movs	r1, #0
 80054d0:	4630      	mov	r0, r6
 80054d2:	f7fa fe7d 	bl	80001d0 <memchr>
 80054d6:	b108      	cbz	r0, 80054dc <_printf_i+0x1e4>
 80054d8:	1b80      	subs	r0, r0, r6
 80054da:	6060      	str	r0, [r4, #4]
 80054dc:	6863      	ldr	r3, [r4, #4]
 80054de:	6123      	str	r3, [r4, #16]
 80054e0:	2300      	movs	r3, #0
 80054e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054e6:	e7aa      	b.n	800543e <_printf_i+0x146>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	4632      	mov	r2, r6
 80054ec:	4649      	mov	r1, r9
 80054ee:	4640      	mov	r0, r8
 80054f0:	47d0      	blx	sl
 80054f2:	3001      	adds	r0, #1
 80054f4:	d0ad      	beq.n	8005452 <_printf_i+0x15a>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	079b      	lsls	r3, r3, #30
 80054fa:	d413      	bmi.n	8005524 <_printf_i+0x22c>
 80054fc:	68e0      	ldr	r0, [r4, #12]
 80054fe:	9b03      	ldr	r3, [sp, #12]
 8005500:	4298      	cmp	r0, r3
 8005502:	bfb8      	it	lt
 8005504:	4618      	movlt	r0, r3
 8005506:	e7a6      	b.n	8005456 <_printf_i+0x15e>
 8005508:	2301      	movs	r3, #1
 800550a:	4632      	mov	r2, r6
 800550c:	4649      	mov	r1, r9
 800550e:	4640      	mov	r0, r8
 8005510:	47d0      	blx	sl
 8005512:	3001      	adds	r0, #1
 8005514:	d09d      	beq.n	8005452 <_printf_i+0x15a>
 8005516:	3501      	adds	r5, #1
 8005518:	68e3      	ldr	r3, [r4, #12]
 800551a:	9903      	ldr	r1, [sp, #12]
 800551c:	1a5b      	subs	r3, r3, r1
 800551e:	42ab      	cmp	r3, r5
 8005520:	dcf2      	bgt.n	8005508 <_printf_i+0x210>
 8005522:	e7eb      	b.n	80054fc <_printf_i+0x204>
 8005524:	2500      	movs	r5, #0
 8005526:	f104 0619 	add.w	r6, r4, #25
 800552a:	e7f5      	b.n	8005518 <_printf_i+0x220>
 800552c:	08005fe0 	.word	0x08005fe0
 8005530:	08005ff1 	.word	0x08005ff1

08005534 <__sflush_r>:
 8005534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	0716      	lsls	r6, r2, #28
 800553e:	4605      	mov	r5, r0
 8005540:	460c      	mov	r4, r1
 8005542:	d454      	bmi.n	80055ee <__sflush_r+0xba>
 8005544:	684b      	ldr	r3, [r1, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	dc02      	bgt.n	8005550 <__sflush_r+0x1c>
 800554a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	dd48      	ble.n	80055e2 <__sflush_r+0xae>
 8005550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005552:	2e00      	cmp	r6, #0
 8005554:	d045      	beq.n	80055e2 <__sflush_r+0xae>
 8005556:	2300      	movs	r3, #0
 8005558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800555c:	682f      	ldr	r7, [r5, #0]
 800555e:	6a21      	ldr	r1, [r4, #32]
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	d030      	beq.n	80055c6 <__sflush_r+0x92>
 8005564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	0759      	lsls	r1, r3, #29
 800556a:	d505      	bpl.n	8005578 <__sflush_r+0x44>
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005572:	b10b      	cbz	r3, 8005578 <__sflush_r+0x44>
 8005574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800557c:	6a21      	ldr	r1, [r4, #32]
 800557e:	4628      	mov	r0, r5
 8005580:	47b0      	blx	r6
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	d106      	bne.n	8005596 <__sflush_r+0x62>
 8005588:	6829      	ldr	r1, [r5, #0]
 800558a:	291d      	cmp	r1, #29
 800558c:	d82b      	bhi.n	80055e6 <__sflush_r+0xb2>
 800558e:	4a2a      	ldr	r2, [pc, #168]	@ (8005638 <__sflush_r+0x104>)
 8005590:	40ca      	lsrs	r2, r1
 8005592:	07d6      	lsls	r6, r2, #31
 8005594:	d527      	bpl.n	80055e6 <__sflush_r+0xb2>
 8005596:	2200      	movs	r2, #0
 8005598:	6062      	str	r2, [r4, #4]
 800559a:	04d9      	lsls	r1, r3, #19
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	d504      	bpl.n	80055ac <__sflush_r+0x78>
 80055a2:	1c42      	adds	r2, r0, #1
 80055a4:	d101      	bne.n	80055aa <__sflush_r+0x76>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	b903      	cbnz	r3, 80055ac <__sflush_r+0x78>
 80055aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80055ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055ae:	602f      	str	r7, [r5, #0]
 80055b0:	b1b9      	cbz	r1, 80055e2 <__sflush_r+0xae>
 80055b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055b6:	4299      	cmp	r1, r3
 80055b8:	d002      	beq.n	80055c0 <__sflush_r+0x8c>
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f97c 	bl	80058b8 <_free_r>
 80055c0:	2300      	movs	r3, #0
 80055c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80055c4:	e00d      	b.n	80055e2 <__sflush_r+0xae>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b0      	blx	r6
 80055cc:	4602      	mov	r2, r0
 80055ce:	1c50      	adds	r0, r2, #1
 80055d0:	d1c9      	bne.n	8005566 <__sflush_r+0x32>
 80055d2:	682b      	ldr	r3, [r5, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0c6      	beq.n	8005566 <__sflush_r+0x32>
 80055d8:	2b1d      	cmp	r3, #29
 80055da:	d001      	beq.n	80055e0 <__sflush_r+0xac>
 80055dc:	2b16      	cmp	r3, #22
 80055de:	d11e      	bne.n	800561e <__sflush_r+0xea>
 80055e0:	602f      	str	r7, [r5, #0]
 80055e2:	2000      	movs	r0, #0
 80055e4:	e022      	b.n	800562c <__sflush_r+0xf8>
 80055e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ea:	b21b      	sxth	r3, r3
 80055ec:	e01b      	b.n	8005626 <__sflush_r+0xf2>
 80055ee:	690f      	ldr	r7, [r1, #16]
 80055f0:	2f00      	cmp	r7, #0
 80055f2:	d0f6      	beq.n	80055e2 <__sflush_r+0xae>
 80055f4:	0793      	lsls	r3, r2, #30
 80055f6:	680e      	ldr	r6, [r1, #0]
 80055f8:	bf08      	it	eq
 80055fa:	694b      	ldreq	r3, [r1, #20]
 80055fc:	600f      	str	r7, [r1, #0]
 80055fe:	bf18      	it	ne
 8005600:	2300      	movne	r3, #0
 8005602:	eba6 0807 	sub.w	r8, r6, r7
 8005606:	608b      	str	r3, [r1, #8]
 8005608:	f1b8 0f00 	cmp.w	r8, #0
 800560c:	dde9      	ble.n	80055e2 <__sflush_r+0xae>
 800560e:	6a21      	ldr	r1, [r4, #32]
 8005610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005612:	4643      	mov	r3, r8
 8005614:	463a      	mov	r2, r7
 8005616:	4628      	mov	r0, r5
 8005618:	47b0      	blx	r6
 800561a:	2800      	cmp	r0, #0
 800561c:	dc08      	bgt.n	8005630 <__sflush_r+0xfc>
 800561e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005630:	4407      	add	r7, r0
 8005632:	eba8 0800 	sub.w	r8, r8, r0
 8005636:	e7e7      	b.n	8005608 <__sflush_r+0xd4>
 8005638:	20400001 	.word	0x20400001

0800563c <_fflush_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	690b      	ldr	r3, [r1, #16]
 8005640:	4605      	mov	r5, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b913      	cbnz	r3, 800564c <_fflush_r+0x10>
 8005646:	2500      	movs	r5, #0
 8005648:	4628      	mov	r0, r5
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	b118      	cbz	r0, 8005656 <_fflush_r+0x1a>
 800564e:	6a03      	ldr	r3, [r0, #32]
 8005650:	b90b      	cbnz	r3, 8005656 <_fflush_r+0x1a>
 8005652:	f7ff fab7 	bl	8004bc4 <__sinit>
 8005656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f3      	beq.n	8005646 <_fflush_r+0xa>
 800565e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005660:	07d0      	lsls	r0, r2, #31
 8005662:	d404      	bmi.n	800566e <_fflush_r+0x32>
 8005664:	0599      	lsls	r1, r3, #22
 8005666:	d402      	bmi.n	800566e <_fflush_r+0x32>
 8005668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800566a:	f7ff fbac 	bl	8004dc6 <__retarget_lock_acquire_recursive>
 800566e:	4628      	mov	r0, r5
 8005670:	4621      	mov	r1, r4
 8005672:	f7ff ff5f 	bl	8005534 <__sflush_r>
 8005676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005678:	07da      	lsls	r2, r3, #31
 800567a:	4605      	mov	r5, r0
 800567c:	d4e4      	bmi.n	8005648 <_fflush_r+0xc>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	059b      	lsls	r3, r3, #22
 8005682:	d4e1      	bmi.n	8005648 <_fflush_r+0xc>
 8005684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005686:	f7ff fb9f 	bl	8004dc8 <__retarget_lock_release_recursive>
 800568a:	e7dd      	b.n	8005648 <_fflush_r+0xc>

0800568c <__malloc_lock>:
 800568c:	4801      	ldr	r0, [pc, #4]	@ (8005694 <__malloc_lock+0x8>)
 800568e:	f7ff bb9a 	b.w	8004dc6 <__retarget_lock_acquire_recursive>
 8005692:	bf00      	nop
 8005694:	20000484 	.word	0x20000484

08005698 <__malloc_unlock>:
 8005698:	4801      	ldr	r0, [pc, #4]	@ (80056a0 <__malloc_unlock+0x8>)
 800569a:	f7ff bb95 	b.w	8004dc8 <__retarget_lock_release_recursive>
 800569e:	bf00      	nop
 80056a0:	20000484 	.word	0x20000484

080056a4 <__sread>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	460c      	mov	r4, r1
 80056a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ac:	f000 f8aa 	bl	8005804 <_read_r>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	bfab      	itete	ge
 80056b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056b6:	89a3      	ldrhlt	r3, [r4, #12]
 80056b8:	181b      	addge	r3, r3, r0
 80056ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056be:	bfac      	ite	ge
 80056c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056c2:	81a3      	strhlt	r3, [r4, #12]
 80056c4:	bd10      	pop	{r4, pc}

080056c6 <__swrite>:
 80056c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ca:	461f      	mov	r7, r3
 80056cc:	898b      	ldrh	r3, [r1, #12]
 80056ce:	05db      	lsls	r3, r3, #23
 80056d0:	4605      	mov	r5, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	4616      	mov	r6, r2
 80056d6:	d505      	bpl.n	80056e4 <__swrite+0x1e>
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	2302      	movs	r3, #2
 80056de:	2200      	movs	r2, #0
 80056e0:	f000 f87e 	bl	80057e0 <_lseek_r>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	4632      	mov	r2, r6
 80056f2:	463b      	mov	r3, r7
 80056f4:	4628      	mov	r0, r5
 80056f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056fa:	f000 b8a5 	b.w	8005848 <_write_r>

080056fe <__sseek>:
 80056fe:	b510      	push	{r4, lr}
 8005700:	460c      	mov	r4, r1
 8005702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005706:	f000 f86b 	bl	80057e0 <_lseek_r>
 800570a:	1c43      	adds	r3, r0, #1
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	bf15      	itete	ne
 8005710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800571a:	81a3      	strheq	r3, [r4, #12]
 800571c:	bf18      	it	ne
 800571e:	81a3      	strhne	r3, [r4, #12]
 8005720:	bd10      	pop	{r4, pc}

08005722 <__sclose>:
 8005722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005726:	f000 b8a1 	b.w	800586c <_close_r>
	...

0800572c <fiprintf>:
 800572c:	b40e      	push	{r1, r2, r3}
 800572e:	b503      	push	{r0, r1, lr}
 8005730:	4601      	mov	r1, r0
 8005732:	ab03      	add	r3, sp, #12
 8005734:	4805      	ldr	r0, [pc, #20]	@ (800574c <fiprintf+0x20>)
 8005736:	f853 2b04 	ldr.w	r2, [r3], #4
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	f000 f92f 	bl	80059a0 <_vfiprintf_r>
 8005742:	b002      	add	sp, #8
 8005744:	f85d eb04 	ldr.w	lr, [sp], #4
 8005748:	b003      	add	sp, #12
 800574a:	4770      	bx	lr
 800574c:	2000018c 	.word	0x2000018c

08005750 <_realloc_r>:
 8005750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005754:	4607      	mov	r7, r0
 8005756:	4614      	mov	r4, r2
 8005758:	460d      	mov	r5, r1
 800575a:	b921      	cbnz	r1, 8005766 <_realloc_r+0x16>
 800575c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005760:	4611      	mov	r1, r2
 8005762:	f7ff bcdb 	b.w	800511c <_malloc_r>
 8005766:	b92a      	cbnz	r2, 8005774 <_realloc_r+0x24>
 8005768:	f000 f8a6 	bl	80058b8 <_free_r>
 800576c:	4625      	mov	r5, r4
 800576e:	4628      	mov	r0, r5
 8005770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005774:	f000 fa2c 	bl	8005bd0 <_malloc_usable_size_r>
 8005778:	4284      	cmp	r4, r0
 800577a:	4606      	mov	r6, r0
 800577c:	d802      	bhi.n	8005784 <_realloc_r+0x34>
 800577e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005782:	d8f4      	bhi.n	800576e <_realloc_r+0x1e>
 8005784:	4621      	mov	r1, r4
 8005786:	4638      	mov	r0, r7
 8005788:	f7ff fcc8 	bl	800511c <_malloc_r>
 800578c:	4680      	mov	r8, r0
 800578e:	b908      	cbnz	r0, 8005794 <_realloc_r+0x44>
 8005790:	4645      	mov	r5, r8
 8005792:	e7ec      	b.n	800576e <_realloc_r+0x1e>
 8005794:	42b4      	cmp	r4, r6
 8005796:	4622      	mov	r2, r4
 8005798:	4629      	mov	r1, r5
 800579a:	bf28      	it	cs
 800579c:	4632      	movcs	r2, r6
 800579e:	f000 f875 	bl	800588c <memcpy>
 80057a2:	4629      	mov	r1, r5
 80057a4:	4638      	mov	r0, r7
 80057a6:	f000 f887 	bl	80058b8 <_free_r>
 80057aa:	e7f1      	b.n	8005790 <_realloc_r+0x40>

080057ac <memmove>:
 80057ac:	4288      	cmp	r0, r1
 80057ae:	b510      	push	{r4, lr}
 80057b0:	eb01 0402 	add.w	r4, r1, r2
 80057b4:	d902      	bls.n	80057bc <memmove+0x10>
 80057b6:	4284      	cmp	r4, r0
 80057b8:	4623      	mov	r3, r4
 80057ba:	d807      	bhi.n	80057cc <memmove+0x20>
 80057bc:	1e43      	subs	r3, r0, #1
 80057be:	42a1      	cmp	r1, r4
 80057c0:	d008      	beq.n	80057d4 <memmove+0x28>
 80057c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ca:	e7f8      	b.n	80057be <memmove+0x12>
 80057cc:	4402      	add	r2, r0
 80057ce:	4601      	mov	r1, r0
 80057d0:	428a      	cmp	r2, r1
 80057d2:	d100      	bne.n	80057d6 <memmove+0x2a>
 80057d4:	bd10      	pop	{r4, pc}
 80057d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057de:	e7f7      	b.n	80057d0 <memmove+0x24>

080057e0 <_lseek_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	@ (8005800 <_lseek_r+0x20>)
 80057e4:	4604      	mov	r4, r0
 80057e6:	4608      	mov	r0, r1
 80057e8:	4611      	mov	r1, r2
 80057ea:	2200      	movs	r2, #0
 80057ec:	602a      	str	r2, [r5, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f7fc fa71 	bl	8001cd6 <_lseek>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_lseek_r+0x1e>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_lseek_r+0x1e>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	20000490 	.word	0x20000490

08005804 <_read_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d07      	ldr	r5, [pc, #28]	@ (8005824 <_read_r+0x20>)
 8005808:	4604      	mov	r4, r0
 800580a:	4608      	mov	r0, r1
 800580c:	4611      	mov	r1, r2
 800580e:	2200      	movs	r2, #0
 8005810:	602a      	str	r2, [r5, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	f7fc f9ff 	bl	8001c16 <_read>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_read_r+0x1e>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_read_r+0x1e>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	20000490 	.word	0x20000490

08005828 <_sbrk_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4d06      	ldr	r5, [pc, #24]	@ (8005844 <_sbrk_r+0x1c>)
 800582c:	2300      	movs	r3, #0
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	f7fc fa5c 	bl	8001cf0 <_sbrk>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_sbrk_r+0x1a>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_sbrk_r+0x1a>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	20000490 	.word	0x20000490

08005848 <_write_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4d07      	ldr	r5, [pc, #28]	@ (8005868 <_write_r+0x20>)
 800584c:	4604      	mov	r4, r0
 800584e:	4608      	mov	r0, r1
 8005850:	4611      	mov	r1, r2
 8005852:	2200      	movs	r2, #0
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fc f9fa 	bl	8001c50 <_write>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_write_r+0x1e>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_write_r+0x1e>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20000490 	.word	0x20000490

0800586c <_close_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4d06      	ldr	r5, [pc, #24]	@ (8005888 <_close_r+0x1c>)
 8005870:	2300      	movs	r3, #0
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	f7fc fa06 	bl	8001c88 <_close>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_close_r+0x1a>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_close_r+0x1a>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	20000490 	.word	0x20000490

0800588c <memcpy>:
 800588c:	440a      	add	r2, r1
 800588e:	4291      	cmp	r1, r2
 8005890:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005894:	d100      	bne.n	8005898 <memcpy+0xc>
 8005896:	4770      	bx	lr
 8005898:	b510      	push	{r4, lr}
 800589a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800589e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a2:	4291      	cmp	r1, r2
 80058a4:	d1f9      	bne.n	800589a <memcpy+0xe>
 80058a6:	bd10      	pop	{r4, pc}

080058a8 <abort>:
 80058a8:	b508      	push	{r3, lr}
 80058aa:	2006      	movs	r0, #6
 80058ac:	f000 fab6 	bl	8005e1c <raise>
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7fc f9a5 	bl	8001c00 <_exit>
	...

080058b8 <_free_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4605      	mov	r5, r0
 80058bc:	2900      	cmp	r1, #0
 80058be:	d041      	beq.n	8005944 <_free_r+0x8c>
 80058c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c4:	1f0c      	subs	r4, r1, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bfb8      	it	lt
 80058ca:	18e4      	addlt	r4, r4, r3
 80058cc:	f7ff fede 	bl	800568c <__malloc_lock>
 80058d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005948 <_free_r+0x90>)
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	b933      	cbnz	r3, 80058e4 <_free_r+0x2c>
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	6014      	str	r4, [r2, #0]
 80058da:	4628      	mov	r0, r5
 80058dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058e0:	f7ff beda 	b.w	8005698 <__malloc_unlock>
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d908      	bls.n	80058fa <_free_r+0x42>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	1821      	adds	r1, r4, r0
 80058ec:	428b      	cmp	r3, r1
 80058ee:	bf01      	itttt	eq
 80058f0:	6819      	ldreq	r1, [r3, #0]
 80058f2:	685b      	ldreq	r3, [r3, #4]
 80058f4:	1809      	addeq	r1, r1, r0
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	e7ed      	b.n	80058d6 <_free_r+0x1e>
 80058fa:	461a      	mov	r2, r3
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b10b      	cbz	r3, 8005904 <_free_r+0x4c>
 8005900:	42a3      	cmp	r3, r4
 8005902:	d9fa      	bls.n	80058fa <_free_r+0x42>
 8005904:	6811      	ldr	r1, [r2, #0]
 8005906:	1850      	adds	r0, r2, r1
 8005908:	42a0      	cmp	r0, r4
 800590a:	d10b      	bne.n	8005924 <_free_r+0x6c>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	4401      	add	r1, r0
 8005910:	1850      	adds	r0, r2, r1
 8005912:	4283      	cmp	r3, r0
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	d1e0      	bne.n	80058da <_free_r+0x22>
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	6053      	str	r3, [r2, #4]
 800591e:	4408      	add	r0, r1
 8005920:	6010      	str	r0, [r2, #0]
 8005922:	e7da      	b.n	80058da <_free_r+0x22>
 8005924:	d902      	bls.n	800592c <_free_r+0x74>
 8005926:	230c      	movs	r3, #12
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	e7d6      	b.n	80058da <_free_r+0x22>
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	1821      	adds	r1, r4, r0
 8005930:	428b      	cmp	r3, r1
 8005932:	bf04      	itt	eq
 8005934:	6819      	ldreq	r1, [r3, #0]
 8005936:	685b      	ldreq	r3, [r3, #4]
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	bf04      	itt	eq
 800593c:	1809      	addeq	r1, r1, r0
 800593e:	6021      	streq	r1, [r4, #0]
 8005940:	6054      	str	r4, [r2, #4]
 8005942:	e7ca      	b.n	80058da <_free_r+0x22>
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	2000048c 	.word	0x2000048c

0800594c <__sfputc_r>:
 800594c:	6893      	ldr	r3, [r2, #8]
 800594e:	3b01      	subs	r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	b410      	push	{r4}
 8005954:	6093      	str	r3, [r2, #8]
 8005956:	da08      	bge.n	800596a <__sfputc_r+0x1e>
 8005958:	6994      	ldr	r4, [r2, #24]
 800595a:	42a3      	cmp	r3, r4
 800595c:	db01      	blt.n	8005962 <__sfputc_r+0x16>
 800595e:	290a      	cmp	r1, #10
 8005960:	d103      	bne.n	800596a <__sfputc_r+0x1e>
 8005962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005966:	f000 b93b 	b.w	8005be0 <__swbuf_r>
 800596a:	6813      	ldr	r3, [r2, #0]
 800596c:	1c58      	adds	r0, r3, #1
 800596e:	6010      	str	r0, [r2, #0]
 8005970:	7019      	strb	r1, [r3, #0]
 8005972:	4608      	mov	r0, r1
 8005974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005978:	4770      	bx	lr

0800597a <__sfputs_r>:
 800597a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597c:	4606      	mov	r6, r0
 800597e:	460f      	mov	r7, r1
 8005980:	4614      	mov	r4, r2
 8005982:	18d5      	adds	r5, r2, r3
 8005984:	42ac      	cmp	r4, r5
 8005986:	d101      	bne.n	800598c <__sfputs_r+0x12>
 8005988:	2000      	movs	r0, #0
 800598a:	e007      	b.n	800599c <__sfputs_r+0x22>
 800598c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005990:	463a      	mov	r2, r7
 8005992:	4630      	mov	r0, r6
 8005994:	f7ff ffda 	bl	800594c <__sfputc_r>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d1f3      	bne.n	8005984 <__sfputs_r+0xa>
 800599c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059a0 <_vfiprintf_r>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	460d      	mov	r5, r1
 80059a6:	b09d      	sub	sp, #116	@ 0x74
 80059a8:	4614      	mov	r4, r2
 80059aa:	4698      	mov	r8, r3
 80059ac:	4606      	mov	r6, r0
 80059ae:	b118      	cbz	r0, 80059b8 <_vfiprintf_r+0x18>
 80059b0:	6a03      	ldr	r3, [r0, #32]
 80059b2:	b90b      	cbnz	r3, 80059b8 <_vfiprintf_r+0x18>
 80059b4:	f7ff f906 	bl	8004bc4 <__sinit>
 80059b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059ba:	07d9      	lsls	r1, r3, #31
 80059bc:	d405      	bmi.n	80059ca <_vfiprintf_r+0x2a>
 80059be:	89ab      	ldrh	r3, [r5, #12]
 80059c0:	059a      	lsls	r2, r3, #22
 80059c2:	d402      	bmi.n	80059ca <_vfiprintf_r+0x2a>
 80059c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059c6:	f7ff f9fe 	bl	8004dc6 <__retarget_lock_acquire_recursive>
 80059ca:	89ab      	ldrh	r3, [r5, #12]
 80059cc:	071b      	lsls	r3, r3, #28
 80059ce:	d501      	bpl.n	80059d4 <_vfiprintf_r+0x34>
 80059d0:	692b      	ldr	r3, [r5, #16]
 80059d2:	b99b      	cbnz	r3, 80059fc <_vfiprintf_r+0x5c>
 80059d4:	4629      	mov	r1, r5
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 f940 	bl	8005c5c <__swsetup_r>
 80059dc:	b170      	cbz	r0, 80059fc <_vfiprintf_r+0x5c>
 80059de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059e0:	07dc      	lsls	r4, r3, #31
 80059e2:	d504      	bpl.n	80059ee <_vfiprintf_r+0x4e>
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059e8:	b01d      	add	sp, #116	@ 0x74
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	89ab      	ldrh	r3, [r5, #12]
 80059f0:	0598      	lsls	r0, r3, #22
 80059f2:	d4f7      	bmi.n	80059e4 <_vfiprintf_r+0x44>
 80059f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059f6:	f7ff f9e7 	bl	8004dc8 <__retarget_lock_release_recursive>
 80059fa:	e7f3      	b.n	80059e4 <_vfiprintf_r+0x44>
 80059fc:	2300      	movs	r3, #0
 80059fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a00:	2320      	movs	r3, #32
 8005a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a0a:	2330      	movs	r3, #48	@ 0x30
 8005a0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005bbc <_vfiprintf_r+0x21c>
 8005a10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a14:	f04f 0901 	mov.w	r9, #1
 8005a18:	4623      	mov	r3, r4
 8005a1a:	469a      	mov	sl, r3
 8005a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a20:	b10a      	cbz	r2, 8005a26 <_vfiprintf_r+0x86>
 8005a22:	2a25      	cmp	r2, #37	@ 0x25
 8005a24:	d1f9      	bne.n	8005a1a <_vfiprintf_r+0x7a>
 8005a26:	ebba 0b04 	subs.w	fp, sl, r4
 8005a2a:	d00b      	beq.n	8005a44 <_vfiprintf_r+0xa4>
 8005a2c:	465b      	mov	r3, fp
 8005a2e:	4622      	mov	r2, r4
 8005a30:	4629      	mov	r1, r5
 8005a32:	4630      	mov	r0, r6
 8005a34:	f7ff ffa1 	bl	800597a <__sfputs_r>
 8005a38:	3001      	adds	r0, #1
 8005a3a:	f000 80a7 	beq.w	8005b8c <_vfiprintf_r+0x1ec>
 8005a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a40:	445a      	add	r2, fp
 8005a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a44:	f89a 3000 	ldrb.w	r3, [sl]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 809f 	beq.w	8005b8c <_vfiprintf_r+0x1ec>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a58:	f10a 0a01 	add.w	sl, sl, #1
 8005a5c:	9304      	str	r3, [sp, #16]
 8005a5e:	9307      	str	r3, [sp, #28]
 8005a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a66:	4654      	mov	r4, sl
 8005a68:	2205      	movs	r2, #5
 8005a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6e:	4853      	ldr	r0, [pc, #332]	@ (8005bbc <_vfiprintf_r+0x21c>)
 8005a70:	f7fa fbae 	bl	80001d0 <memchr>
 8005a74:	9a04      	ldr	r2, [sp, #16]
 8005a76:	b9d8      	cbnz	r0, 8005ab0 <_vfiprintf_r+0x110>
 8005a78:	06d1      	lsls	r1, r2, #27
 8005a7a:	bf44      	itt	mi
 8005a7c:	2320      	movmi	r3, #32
 8005a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a82:	0713      	lsls	r3, r2, #28
 8005a84:	bf44      	itt	mi
 8005a86:	232b      	movmi	r3, #43	@ 0x2b
 8005a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a92:	d015      	beq.n	8005ac0 <_vfiprintf_r+0x120>
 8005a94:	9a07      	ldr	r2, [sp, #28]
 8005a96:	4654      	mov	r4, sl
 8005a98:	2000      	movs	r0, #0
 8005a9a:	f04f 0c0a 	mov.w	ip, #10
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aa4:	3b30      	subs	r3, #48	@ 0x30
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	d94b      	bls.n	8005b42 <_vfiprintf_r+0x1a2>
 8005aaa:	b1b0      	cbz	r0, 8005ada <_vfiprintf_r+0x13a>
 8005aac:	9207      	str	r2, [sp, #28]
 8005aae:	e014      	b.n	8005ada <_vfiprintf_r+0x13a>
 8005ab0:	eba0 0308 	sub.w	r3, r0, r8
 8005ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	9304      	str	r3, [sp, #16]
 8005abc:	46a2      	mov	sl, r4
 8005abe:	e7d2      	b.n	8005a66 <_vfiprintf_r+0xc6>
 8005ac0:	9b03      	ldr	r3, [sp, #12]
 8005ac2:	1d19      	adds	r1, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	9103      	str	r1, [sp, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfbb      	ittet	lt
 8005acc:	425b      	neglt	r3, r3
 8005ace:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad2:	9307      	strge	r3, [sp, #28]
 8005ad4:	9307      	strlt	r3, [sp, #28]
 8005ad6:	bfb8      	it	lt
 8005ad8:	9204      	strlt	r2, [sp, #16]
 8005ada:	7823      	ldrb	r3, [r4, #0]
 8005adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ade:	d10a      	bne.n	8005af6 <_vfiprintf_r+0x156>
 8005ae0:	7863      	ldrb	r3, [r4, #1]
 8005ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ae4:	d132      	bne.n	8005b4c <_vfiprintf_r+0x1ac>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	1d1a      	adds	r2, r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	9203      	str	r2, [sp, #12]
 8005aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005af2:	3402      	adds	r4, #2
 8005af4:	9305      	str	r3, [sp, #20]
 8005af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005bcc <_vfiprintf_r+0x22c>
 8005afa:	7821      	ldrb	r1, [r4, #0]
 8005afc:	2203      	movs	r2, #3
 8005afe:	4650      	mov	r0, sl
 8005b00:	f7fa fb66 	bl	80001d0 <memchr>
 8005b04:	b138      	cbz	r0, 8005b16 <_vfiprintf_r+0x176>
 8005b06:	9b04      	ldr	r3, [sp, #16]
 8005b08:	eba0 000a 	sub.w	r0, r0, sl
 8005b0c:	2240      	movs	r2, #64	@ 0x40
 8005b0e:	4082      	lsls	r2, r0
 8005b10:	4313      	orrs	r3, r2
 8005b12:	3401      	adds	r4, #1
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1a:	4829      	ldr	r0, [pc, #164]	@ (8005bc0 <_vfiprintf_r+0x220>)
 8005b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b20:	2206      	movs	r2, #6
 8005b22:	f7fa fb55 	bl	80001d0 <memchr>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d03f      	beq.n	8005baa <_vfiprintf_r+0x20a>
 8005b2a:	4b26      	ldr	r3, [pc, #152]	@ (8005bc4 <_vfiprintf_r+0x224>)
 8005b2c:	bb1b      	cbnz	r3, 8005b76 <_vfiprintf_r+0x1d6>
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	3307      	adds	r3, #7
 8005b32:	f023 0307 	bic.w	r3, r3, #7
 8005b36:	3308      	adds	r3, #8
 8005b38:	9303      	str	r3, [sp, #12]
 8005b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3c:	443b      	add	r3, r7
 8005b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b40:	e76a      	b.n	8005a18 <_vfiprintf_r+0x78>
 8005b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b46:	460c      	mov	r4, r1
 8005b48:	2001      	movs	r0, #1
 8005b4a:	e7a8      	b.n	8005a9e <_vfiprintf_r+0xfe>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	3401      	adds	r4, #1
 8005b50:	9305      	str	r3, [sp, #20]
 8005b52:	4619      	mov	r1, r3
 8005b54:	f04f 0c0a 	mov.w	ip, #10
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b5e:	3a30      	subs	r2, #48	@ 0x30
 8005b60:	2a09      	cmp	r2, #9
 8005b62:	d903      	bls.n	8005b6c <_vfiprintf_r+0x1cc>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0c6      	beq.n	8005af6 <_vfiprintf_r+0x156>
 8005b68:	9105      	str	r1, [sp, #20]
 8005b6a:	e7c4      	b.n	8005af6 <_vfiprintf_r+0x156>
 8005b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b70:	4604      	mov	r4, r0
 8005b72:	2301      	movs	r3, #1
 8005b74:	e7f0      	b.n	8005b58 <_vfiprintf_r+0x1b8>
 8005b76:	ab03      	add	r3, sp, #12
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	462a      	mov	r2, r5
 8005b7c:	4b12      	ldr	r3, [pc, #72]	@ (8005bc8 <_vfiprintf_r+0x228>)
 8005b7e:	a904      	add	r1, sp, #16
 8005b80:	4630      	mov	r0, r6
 8005b82:	f3af 8000 	nop.w
 8005b86:	4607      	mov	r7, r0
 8005b88:	1c78      	adds	r0, r7, #1
 8005b8a:	d1d6      	bne.n	8005b3a <_vfiprintf_r+0x19a>
 8005b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b8e:	07d9      	lsls	r1, r3, #31
 8005b90:	d405      	bmi.n	8005b9e <_vfiprintf_r+0x1fe>
 8005b92:	89ab      	ldrh	r3, [r5, #12]
 8005b94:	059a      	lsls	r2, r3, #22
 8005b96:	d402      	bmi.n	8005b9e <_vfiprintf_r+0x1fe>
 8005b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b9a:	f7ff f915 	bl	8004dc8 <__retarget_lock_release_recursive>
 8005b9e:	89ab      	ldrh	r3, [r5, #12]
 8005ba0:	065b      	lsls	r3, r3, #25
 8005ba2:	f53f af1f 	bmi.w	80059e4 <_vfiprintf_r+0x44>
 8005ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ba8:	e71e      	b.n	80059e8 <_vfiprintf_r+0x48>
 8005baa:	ab03      	add	r3, sp, #12
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	462a      	mov	r2, r5
 8005bb0:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <_vfiprintf_r+0x228>)
 8005bb2:	a904      	add	r1, sp, #16
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7ff fb9f 	bl	80052f8 <_printf_i>
 8005bba:	e7e4      	b.n	8005b86 <_vfiprintf_r+0x1e6>
 8005bbc:	08005fcf 	.word	0x08005fcf
 8005bc0:	08005fd9 	.word	0x08005fd9
 8005bc4:	00000000 	.word	0x00000000
 8005bc8:	0800597b 	.word	0x0800597b
 8005bcc:	08005fd5 	.word	0x08005fd5

08005bd0 <_malloc_usable_size_r>:
 8005bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bd4:	1f18      	subs	r0, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	bfbc      	itt	lt
 8005bda:	580b      	ldrlt	r3, [r1, r0]
 8005bdc:	18c0      	addlt	r0, r0, r3
 8005bde:	4770      	bx	lr

08005be0 <__swbuf_r>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	460e      	mov	r6, r1
 8005be4:	4614      	mov	r4, r2
 8005be6:	4605      	mov	r5, r0
 8005be8:	b118      	cbz	r0, 8005bf2 <__swbuf_r+0x12>
 8005bea:	6a03      	ldr	r3, [r0, #32]
 8005bec:	b90b      	cbnz	r3, 8005bf2 <__swbuf_r+0x12>
 8005bee:	f7fe ffe9 	bl	8004bc4 <__sinit>
 8005bf2:	69a3      	ldr	r3, [r4, #24]
 8005bf4:	60a3      	str	r3, [r4, #8]
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	071a      	lsls	r2, r3, #28
 8005bfa:	d501      	bpl.n	8005c00 <__swbuf_r+0x20>
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	b943      	cbnz	r3, 8005c12 <__swbuf_r+0x32>
 8005c00:	4621      	mov	r1, r4
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 f82a 	bl	8005c5c <__swsetup_r>
 8005c08:	b118      	cbz	r0, 8005c12 <__swbuf_r+0x32>
 8005c0a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005c0e:	4638      	mov	r0, r7
 8005c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	6922      	ldr	r2, [r4, #16]
 8005c16:	1a98      	subs	r0, r3, r2
 8005c18:	6963      	ldr	r3, [r4, #20]
 8005c1a:	b2f6      	uxtb	r6, r6
 8005c1c:	4283      	cmp	r3, r0
 8005c1e:	4637      	mov	r7, r6
 8005c20:	dc05      	bgt.n	8005c2e <__swbuf_r+0x4e>
 8005c22:	4621      	mov	r1, r4
 8005c24:	4628      	mov	r0, r5
 8005c26:	f7ff fd09 	bl	800563c <_fflush_r>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d1ed      	bne.n	8005c0a <__swbuf_r+0x2a>
 8005c2e:	68a3      	ldr	r3, [r4, #8]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	60a3      	str	r3, [r4, #8]
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	6022      	str	r2, [r4, #0]
 8005c3a:	701e      	strb	r6, [r3, #0]
 8005c3c:	6962      	ldr	r2, [r4, #20]
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d004      	beq.n	8005c4e <__swbuf_r+0x6e>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	07db      	lsls	r3, r3, #31
 8005c48:	d5e1      	bpl.n	8005c0e <__swbuf_r+0x2e>
 8005c4a:	2e0a      	cmp	r6, #10
 8005c4c:	d1df      	bne.n	8005c0e <__swbuf_r+0x2e>
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	f7ff fcf3 	bl	800563c <_fflush_r>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d0d9      	beq.n	8005c0e <__swbuf_r+0x2e>
 8005c5a:	e7d6      	b.n	8005c0a <__swbuf_r+0x2a>

08005c5c <__swsetup_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4b29      	ldr	r3, [pc, #164]	@ (8005d04 <__swsetup_r+0xa8>)
 8005c60:	4605      	mov	r5, r0
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	460c      	mov	r4, r1
 8005c66:	b118      	cbz	r0, 8005c70 <__swsetup_r+0x14>
 8005c68:	6a03      	ldr	r3, [r0, #32]
 8005c6a:	b90b      	cbnz	r3, 8005c70 <__swsetup_r+0x14>
 8005c6c:	f7fe ffaa 	bl	8004bc4 <__sinit>
 8005c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c74:	0719      	lsls	r1, r3, #28
 8005c76:	d422      	bmi.n	8005cbe <__swsetup_r+0x62>
 8005c78:	06da      	lsls	r2, r3, #27
 8005c7a:	d407      	bmi.n	8005c8c <__swsetup_r+0x30>
 8005c7c:	2209      	movs	r2, #9
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c84:	81a3      	strh	r3, [r4, #12]
 8005c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c8a:	e033      	b.n	8005cf4 <__swsetup_r+0x98>
 8005c8c:	0758      	lsls	r0, r3, #29
 8005c8e:	d512      	bpl.n	8005cb6 <__swsetup_r+0x5a>
 8005c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c92:	b141      	cbz	r1, 8005ca6 <__swsetup_r+0x4a>
 8005c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	d002      	beq.n	8005ca2 <__swsetup_r+0x46>
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f7ff fe0b 	bl	80058b8 <_free_r>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6063      	str	r3, [r4, #4]
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	f043 0308 	orr.w	r3, r3, #8
 8005cbc:	81a3      	strh	r3, [r4, #12]
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	b94b      	cbnz	r3, 8005cd6 <__swsetup_r+0x7a>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ccc:	d003      	beq.n	8005cd6 <__swsetup_r+0x7a>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f000 f83f 	bl	8005d54 <__smakebuf_r>
 8005cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cda:	f013 0201 	ands.w	r2, r3, #1
 8005cde:	d00a      	beq.n	8005cf6 <__swsetup_r+0x9a>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	60a2      	str	r2, [r4, #8]
 8005ce4:	6962      	ldr	r2, [r4, #20]
 8005ce6:	4252      	negs	r2, r2
 8005ce8:	61a2      	str	r2, [r4, #24]
 8005cea:	6922      	ldr	r2, [r4, #16]
 8005cec:	b942      	cbnz	r2, 8005d00 <__swsetup_r+0xa4>
 8005cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cf2:	d1c5      	bne.n	8005c80 <__swsetup_r+0x24>
 8005cf4:	bd38      	pop	{r3, r4, r5, pc}
 8005cf6:	0799      	lsls	r1, r3, #30
 8005cf8:	bf58      	it	pl
 8005cfa:	6962      	ldrpl	r2, [r4, #20]
 8005cfc:	60a2      	str	r2, [r4, #8]
 8005cfe:	e7f4      	b.n	8005cea <__swsetup_r+0x8e>
 8005d00:	2000      	movs	r0, #0
 8005d02:	e7f7      	b.n	8005cf4 <__swsetup_r+0x98>
 8005d04:	2000018c 	.word	0x2000018c

08005d08 <__swhatbuf_r>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d10:	2900      	cmp	r1, #0
 8005d12:	b096      	sub	sp, #88	@ 0x58
 8005d14:	4615      	mov	r5, r2
 8005d16:	461e      	mov	r6, r3
 8005d18:	da0d      	bge.n	8005d36 <__swhatbuf_r+0x2e>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d20:	f04f 0100 	mov.w	r1, #0
 8005d24:	bf14      	ite	ne
 8005d26:	2340      	movne	r3, #64	@ 0x40
 8005d28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	6031      	str	r1, [r6, #0]
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	b016      	add	sp, #88	@ 0x58
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	466a      	mov	r2, sp
 8005d38:	f000 f89c 	bl	8005e74 <_fstat_r>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	dbec      	blt.n	8005d1a <__swhatbuf_r+0x12>
 8005d40:	9901      	ldr	r1, [sp, #4]
 8005d42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d4a:	4259      	negs	r1, r3
 8005d4c:	4159      	adcs	r1, r3
 8005d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d52:	e7eb      	b.n	8005d2c <__swhatbuf_r+0x24>

08005d54 <__smakebuf_r>:
 8005d54:	898b      	ldrh	r3, [r1, #12]
 8005d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d58:	079d      	lsls	r5, r3, #30
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	d507      	bpl.n	8005d70 <__smakebuf_r+0x1c>
 8005d60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	6123      	str	r3, [r4, #16]
 8005d68:	2301      	movs	r3, #1
 8005d6a:	6163      	str	r3, [r4, #20]
 8005d6c:	b003      	add	sp, #12
 8005d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d70:	ab01      	add	r3, sp, #4
 8005d72:	466a      	mov	r2, sp
 8005d74:	f7ff ffc8 	bl	8005d08 <__swhatbuf_r>
 8005d78:	9f00      	ldr	r7, [sp, #0]
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff f9cc 	bl	800511c <_malloc_r>
 8005d84:	b948      	cbnz	r0, 8005d9a <__smakebuf_r+0x46>
 8005d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8a:	059a      	lsls	r2, r3, #22
 8005d8c:	d4ee      	bmi.n	8005d6c <__smakebuf_r+0x18>
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	f043 0302 	orr.w	r3, r3, #2
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	e7e2      	b.n	8005d60 <__smakebuf_r+0xc>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	6020      	str	r0, [r4, #0]
 8005d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da2:	81a3      	strh	r3, [r4, #12]
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005daa:	b15b      	cbz	r3, 8005dc4 <__smakebuf_r+0x70>
 8005dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005db0:	4630      	mov	r0, r6
 8005db2:	f000 f83b 	bl	8005e2c <_isatty_r>
 8005db6:	b128      	cbz	r0, 8005dc4 <__smakebuf_r+0x70>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	431d      	orrs	r5, r3
 8005dc8:	81a5      	strh	r5, [r4, #12]
 8005dca:	e7cf      	b.n	8005d6c <__smakebuf_r+0x18>

08005dcc <_raise_r>:
 8005dcc:	291f      	cmp	r1, #31
 8005dce:	b538      	push	{r3, r4, r5, lr}
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	d904      	bls.n	8005de0 <_raise_r+0x14>
 8005dd6:	2316      	movs	r3, #22
 8005dd8:	6003      	str	r3, [r0, #0]
 8005dda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005de2:	b112      	cbz	r2, 8005dea <_raise_r+0x1e>
 8005de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005de8:	b94b      	cbnz	r3, 8005dfe <_raise_r+0x32>
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 f840 	bl	8005e70 <_getpid_r>
 8005df0:	4622      	mov	r2, r4
 8005df2:	4601      	mov	r1, r0
 8005df4:	4628      	mov	r0, r5
 8005df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dfa:	f000 b827 	b.w	8005e4c <_kill_r>
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d00a      	beq.n	8005e18 <_raise_r+0x4c>
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	d103      	bne.n	8005e0e <_raise_r+0x42>
 8005e06:	2316      	movs	r3, #22
 8005e08:	6003      	str	r3, [r0, #0]
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	e7e7      	b.n	8005dde <_raise_r+0x12>
 8005e0e:	2100      	movs	r1, #0
 8005e10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e14:	4620      	mov	r0, r4
 8005e16:	4798      	blx	r3
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e7e0      	b.n	8005dde <_raise_r+0x12>

08005e1c <raise>:
 8005e1c:	4b02      	ldr	r3, [pc, #8]	@ (8005e28 <raise+0xc>)
 8005e1e:	4601      	mov	r1, r0
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	f7ff bfd3 	b.w	8005dcc <_raise_r>
 8005e26:	bf00      	nop
 8005e28:	2000018c 	.word	0x2000018c

08005e2c <_isatty_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4d06      	ldr	r5, [pc, #24]	@ (8005e48 <_isatty_r+0x1c>)
 8005e30:	2300      	movs	r3, #0
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	f7fb ff42 	bl	8001cc0 <_isatty>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_isatty_r+0x1a>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_isatty_r+0x1a>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	20000490 	.word	0x20000490

08005e4c <_kill_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4d07      	ldr	r5, [pc, #28]	@ (8005e6c <_kill_r+0x20>)
 8005e50:	2300      	movs	r3, #0
 8005e52:	4604      	mov	r4, r0
 8005e54:	4608      	mov	r0, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	f7fb fec1 	bl	8001be0 <_kill>
 8005e5e:	1c43      	adds	r3, r0, #1
 8005e60:	d102      	bne.n	8005e68 <_kill_r+0x1c>
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	b103      	cbz	r3, 8005e68 <_kill_r+0x1c>
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	bd38      	pop	{r3, r4, r5, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000490 	.word	0x20000490

08005e70 <_getpid_r>:
 8005e70:	f7fb beae 	b.w	8001bd0 <_getpid>

08005e74 <_fstat_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d07      	ldr	r5, [pc, #28]	@ (8005e94 <_fstat_r+0x20>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	602b      	str	r3, [r5, #0]
 8005e82:	f7fb ff0d 	bl	8001ca0 <_fstat>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	d102      	bne.n	8005e90 <_fstat_r+0x1c>
 8005e8a:	682b      	ldr	r3, [r5, #0]
 8005e8c:	b103      	cbz	r3, 8005e90 <_fstat_r+0x1c>
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	bd38      	pop	{r3, r4, r5, pc}
 8005e92:	bf00      	nop
 8005e94:	20000490 	.word	0x20000490

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr
