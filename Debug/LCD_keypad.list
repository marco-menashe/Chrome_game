
LCD_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004464  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080045f4  080045f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004738  08004738  000061e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004738  08004738  00005738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004740  08004740  000061e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00005740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08004748  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001e0  08004928  000061e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08004928  000063cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b028  00000000  00000000  00006210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce4  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00012f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a34  00000000  00000000  00013c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002725a  00000000  00000000  000146b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d51e  00000000  00000000  0003b90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef052  00000000  00000000  00048e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137e7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fdc  00000000  00000000  00137ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0013bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045dc 	.word	0x080045dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080045dc 	.word	0x080045dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LcdStrobe>:

const unsigned short LCDpinMapBoard[LCD_Interface_No] = {0x0080,0x0040,0x0020,0x0010}; // upper 4 nibbles
const unsigned short LCDpinMapLCM[LCD_Interface_No] = {0x0400,0x0010,0x0020,0x0008}; 	// PB10, PB4, PB5, PB3

void LcdStrobe()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LCD_EN, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800027a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800027e:	f001 fee5 	bl	800204c <HAL_GPIO_WritePin>
	HAL_Delay(0.1);
 8000282:	2000      	movs	r0, #0
 8000284:	f001 fc02 	bl	8001a8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, LCD_EN, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800028e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000292:	f001 fedb 	bl	800204c <HAL_GPIO_WritePin>
	HAL_Delay(0.1);
 8000296:	2000      	movs	r0, #0
 8000298:	f001 fbf8 	bl	8001a8c <HAL_Delay>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <LcdWriteCmd>:

void LcdWriteCmd(unsigned short data)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f92b 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_RESET);		// clear RS, Low is for Cmd
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f001 fec6 	bl	800204c <HAL_GPIO_WritePin>
	LcdStrobe();
 80002c0:	f7ff ffd6 	bl	8000270 <LcdStrobe>

	data = (data << 4) & 0x00F0;						// load lower nibbles
 80002c4:	88fb      	ldrh	r3, [r7, #6]
 80002c6:	011b      	lsls	r3, r3, #4
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f919 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_RESET);		// clear RS, Low is for Cmd
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e0:	f001 feb4 	bl	800204c <HAL_GPIO_WritePin>
	LcdStrobe();
 80002e4:	f7ff ffc4 	bl	8000270 <LcdStrobe>
	HAL_Delay(0.1);
 80002e8:	2000      	movs	r0, #0
 80002ea:	f001 fbcf 	bl	8001a8c <HAL_Delay>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <LcdWriteData>:

void LcdWriteData(unsigned short data)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b082      	sub	sp, #8
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	4603      	mov	r3, r0
 80002fe:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f900 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800030e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000312:	f001 fe9b 	bl	800204c <HAL_GPIO_WritePin>
	LcdStrobe();
 8000316:	f7ff ffab 	bl	8000270 <LcdStrobe>

	data = (data << 4) & 0x00F0;						// load lower nibbles
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	011b      	lsls	r3, r3, #4
 800031e:	b29b      	uxth	r3, r3
 8000320:	b2db      	uxtb	r3, r3
 8000322:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	4618      	mov	r0, r3
 8000328:	f000 f8ee 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000336:	f001 fe89 	bl	800204c <HAL_GPIO_WritePin>
	LcdStrobe();
 800033a:	f7ff ff99 	bl	8000270 <LcdStrobe>
	HAL_Delay(0.1);
 800033e:	2000      	movs	r0, #0
 8000340:	f001 fba4 	bl	8001a8c <HAL_Delay>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <LcdClear>:

void LcdClear()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	LcdWriteCmd(0x01);
 8000350:	2001      	movs	r0, #1
 8000352:	f7ff ffa5 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 8000356:	2005      	movs	r0, #5
 8000358:	f001 fb98 	bl	8001a8c <HAL_Delay>
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}

08000360 <LcdPutS>:

void LcdPutS(char *s)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	while (*s)
 8000368:	e006      	b.n	8000378 <LcdPutS+0x18>
	  LcdWriteData(*s++);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	1c5a      	adds	r2, r3, #1
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ffbf 	bl	80002f6 <LcdWriteData>
	while (*s)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d1f4      	bne.n	800036a <LcdPutS+0xa>
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <LcdPutCh>:

void LcdPutCh (char data)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b084      	sub	sp, #16
 800038e:	af00      	add	r7, sp, #0
 8000390:	4603      	mov	r3, r0
 8000392:	71fb      	strb	r3, [r7, #7]
	unsigned short sTemp = (unsigned short)data;
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	81fb      	strh	r3, [r7, #14]

	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(sTemp);
 8000398:	89fb      	ldrh	r3, [r7, #14]
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f8b4 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003aa:	f001 fe4f 	bl	800204c <HAL_GPIO_WritePin>
	LcdStrobe();
 80003ae:	f7ff ff5f 	bl	8000270 <LcdStrobe>

	sTemp = (sTemp << 4) & 0x00F0;						// load lower nibbles
 80003b2:	89fb      	ldrh	r3, [r7, #14]
 80003b4:	011b      	lsls	r3, r3, #4
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	81fb      	strh	r3, [r7, #14]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(sTemp);
 80003bc:	89fb      	ldrh	r3, [r7, #14]
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f8a2 	bl	8000508 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ce:	f001 fe3d 	bl	800204c <HAL_GPIO_WritePin>
	LcdStrobe();
 80003d2:	f7ff ff4d 	bl	8000270 <LcdStrobe>
	HAL_Delay(0.1);
 80003d6:	2000      	movs	r0, #0
 80003d8:	f001 fb58 	bl	8001a8c <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <LcdGoto>:

void LcdGoto(int row, int col)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
	char addr;
	if (row == 0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d101      	bne.n	80003f8 <LcdGoto+0x14>
		addr = 0x00;
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]
	if (row == 1)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d101      	bne.n	8000402 <LcdGoto+0x1e>
		addr = 0x40;
 80003fe:	2340      	movs	r3, #64	@ 0x40
 8000400:	73fb      	strb	r3, [r7, #15]

	addr += col;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	b2da      	uxtb	r2, r3
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	4413      	add	r3, r2
 800040a:	73fb      	strb	r3, [r7, #15]
	LcdWriteCmd(0x80 | addr);
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000412:	b2db      	uxtb	r3, r3
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff43 	bl	80002a0 <LcdWriteCmd>
}
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <LcdInit>:

void LcdInit()
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
	unsigned short data;

	data = 0x0000;
 8000428:	2300      	movs	r3, #0
 800042a:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 800042c:	88fb      	ldrh	r3, [r7, #6]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f86a 	bl	8000508 <LcdPortPinConvert>
	HAL_Delay(50);
 8000434:	2032      	movs	r0, #50	@ 0x32
 8000436:	f001 fb29 	bl	8001a8c <HAL_Delay>

	data = 0x0030;
 800043a:	2330      	movs	r3, #48	@ 0x30
 800043c:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 800043e:	88fb      	ldrh	r3, [r7, #6]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f861 	bl	8000508 <LcdPortPinConvert>
	LcdStrobe();
 8000446:	f7ff ff13 	bl	8000270 <LcdStrobe>
	HAL_Delay(30);
 800044a:	201e      	movs	r0, #30
 800044c:	f001 fb1e 	bl	8001a8c <HAL_Delay>
	LcdStrobe();
 8000450:	f7ff ff0e 	bl	8000270 <LcdStrobe>
	HAL_Delay(20);
 8000454:	2014      	movs	r0, #20
 8000456:	f001 fb19 	bl	8001a8c <HAL_Delay>
	LcdStrobe();
 800045a:	f7ff ff09 	bl	8000270 <LcdStrobe>
	HAL_Delay(20);
 800045e:	2014      	movs	r0, #20
 8000460:	f001 fb14 	bl	8001a8c <HAL_Delay>

	data = 0x0020;
 8000464:	2320      	movs	r3, #32
 8000466:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000468:	88fb      	ldrh	r3, [r7, #6]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f84c 	bl	8000508 <LcdPortPinConvert>
	LcdStrobe();
 8000470:	f7ff fefe 	bl	8000270 <LcdStrobe>
	HAL_Delay(5);
 8000474:	2005      	movs	r0, #5
 8000476:	f001 fb09 	bl	8001a8c <HAL_Delay>
	LcdWriteCmd(0x28);
 800047a:	2028      	movs	r0, #40	@ 0x28
 800047c:	f7ff ff10 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 8000480:	2005      	movs	r0, #5
 8000482:	f001 fb03 	bl	8001a8c <HAL_Delay>
	LcdWriteCmd(0x0F);
 8000486:	200f      	movs	r0, #15
 8000488:	f7ff ff0a 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 800048c:	2005      	movs	r0, #5
 800048e:	f001 fafd 	bl	8001a8c <HAL_Delay>
	LcdWriteCmd(0x01);
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff ff04 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 8000498:	2005      	movs	r0, #5
 800049a:	f001 faf7 	bl	8001a8c <HAL_Delay>
	LcdWriteCmd(0x06);
 800049e:	2006      	movs	r0, #6
 80004a0:	f7ff fefe 	bl	80002a0 <LcdWriteCmd>
	HAL_Delay(5);
 80004a4:	2005      	movs	r0, #5
 80004a6:	f001 faf1 	bl	8001a8c <HAL_Delay>

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <LcdCreateChar>:

void LcdCreateChar(uint8_t location, uint8_t charmap[])
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b084      	sub	sp, #16
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	6039      	str	r1, [r7, #0]
 80004bc:	71fb      	strb	r3, [r7, #7]
    location &= 0x7; // Only 8 locations (0-7)
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	f003 0307 	and.w	r3, r3, #7
 80004c4:	71fb      	strb	r3, [r7, #7]
    LcdWriteCmd(0x40 | (location << 3)); // Set CGRAM address
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004d2:	b21b      	sxth	r3, r3
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fee2 	bl	80002a0 <LcdWriteCmd>

    for (int i = 0; i < 8; i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e009      	b.n	80004f6 <LcdCreateChar+0x44>
        LcdWriteData(charmap[i]);
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff03 	bl	80002f6 <LcdWriteData>
    for (int i = 0; i < 8; i++)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	ddf2      	ble.n	80004e2 <LcdCreateChar+0x30>
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <LcdPortPinConvert>:


void LcdPortPinConvert(unsigned short data)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
	unsigned short sIndex;

	for (sIndex=0; sIndex<LCD_Interface_No; sIndex++)
 8000512:	2300      	movs	r3, #0
 8000514:	81fb      	strh	r3, [r7, #14]
 8000516:	e021      	b.n	800055c <LcdPortPinConvert+0x54>
	{
		if (data & LCDpinMapBoard[sIndex])
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <LcdPortPinConvert+0x68>)
 800051c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	4013      	ands	r3, r2
 8000524:	b29b      	uxth	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00a      	beq.n	8000540 <LcdPortPinConvert+0x38>
			GPIOB->ODR |= LCDpinMapLCM[sIndex];
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <LcdPortPinConvert+0x6c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	89fa      	ldrh	r2, [r7, #14]
 8000530:	4911      	ldr	r1, [pc, #68]	@ (8000578 <LcdPortPinConvert+0x70>)
 8000532:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000536:	4611      	mov	r1, r2
 8000538:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <LcdPortPinConvert+0x6c>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	e00a      	b.n	8000556 <LcdPortPinConvert+0x4e>
		else
			GPIOB->ODR &= ~LCDpinMapLCM[sIndex];
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <LcdPortPinConvert+0x6c>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	89fa      	ldrh	r2, [r7, #14]
 8000546:	490c      	ldr	r1, [pc, #48]	@ (8000578 <LcdPortPinConvert+0x70>)
 8000548:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800054c:	43d2      	mvns	r2, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <LcdPortPinConvert+0x6c>)
 8000552:	400b      	ands	r3, r1
 8000554:	6153      	str	r3, [r2, #20]
	for (sIndex=0; sIndex<LCD_Interface_No; sIndex++)
 8000556:	89fb      	ldrh	r3, [r7, #14]
 8000558:	3301      	adds	r3, #1
 800055a:	81fb      	strh	r3, [r7, #14]
 800055c:	89fb      	ldrh	r3, [r7, #14]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d9da      	bls.n	8000518 <LcdPortPinConvert+0x10>
	}
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	08004608 	.word	0x08004608
 8000574:	48000400 	.word	0x48000400
 8000578:	08004610 	.word	0x08004610

0800057c <TIMER2_HANDLE>:
#define _TIMER_C
#include "TIMER.h"
void TIMER2_HANDLE(void) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
    unsigned short sIndex;
    //__disable_irq();
    for (sIndex = 0; sIndex < NUMBER_OF_TIMERS; sIndex++) {
 8000582:	2300      	movs	r3, #0
 8000584:	80fb      	strh	r3, [r7, #6]
 8000586:	e011      	b.n	80005ac <TIMER2_HANDLE+0x30>
        if (sTimer[sIndex] != 0) sTimer[sIndex]--;
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <TIMER2_HANDLE+0x44>)
 800058c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <TIMER2_HANDLE+0x2a>
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	4a0a      	ldr	r2, [pc, #40]	@ (80005c0 <TIMER2_HANDLE+0x44>)
 8000598:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800059c:	3a01      	subs	r2, #1
 800059e:	b291      	uxth	r1, r2
 80005a0:	4a07      	ldr	r2, [pc, #28]	@ (80005c0 <TIMER2_HANDLE+0x44>)
 80005a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < NUMBER_OF_TIMERS; sIndex++) {
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	3301      	adds	r3, #1
 80005aa:	80fb      	strh	r3, [r7, #6]
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d9ea      	bls.n	8000588 <TIMER2_HANDLE+0xc>
    }
    //__enable_irq();
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	200001fc 	.word	0x200001fc

080005c4 <HAL_TIM_PeriodElapsedCallback>:
void Keypadscan(void);
void KeyProcess(void);
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { TIMER2_HANDLE(); }
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	f7ff ffd6 	bl	800057c <TIMER2_HANDLE>
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <main>:
void updateCellsEnv(void);
void updatePlayerPos(void);



int main(void) {
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b092      	sub	sp, #72	@ 0x48
 80005dc:	af00      	add	r7, sp, #0
	unsigned short sIndex;

	HAL_Init();
 80005de:	f001 f9e0 	bl	80019a2 <HAL_Init>
    SystemClock_Config();
 80005e2:	f000 ff29 	bl	8001438 <SystemClock_Config>
    MX_GPIO_Init();
 80005e6:	f000 ffc7 	bl	8001578 <MX_GPIO_Init>
    MX_TIM2_Init();
 80005ea:	f000 ff77 	bl	80014dc <MX_TIM2_Init>
    HAL_TIM_Base_Start_IT(&htim2);  // Start timer 2 interrupt
 80005ee:	488d      	ldr	r0, [pc, #564]	@ (8000824 <main+0x24c>)
 80005f0:	f002 fbc8 	bl	8002d84 <HAL_TIM_Base_Start_IT>

    // Clear all debounced records, Previous, Low2High
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80005fa:	e016      	b.n	800062a <main+0x52>
        sKeyDebouncedCol[sIndex] = 0x0000;
 80005fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000600:	4a89      	ldr	r2, [pc, #548]	@ (8000828 <main+0x250>)
 8000602:	2100      	movs	r1, #0
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyPreviousCol[sIndex] = 0x0000;
 8000608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800060c:	4a87      	ldr	r2, [pc, #540]	@ (800082c <main+0x254>)
 800060e:	2100      	movs	r1, #0
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyLow2HighCol[sIndex] = 0x0000;
 8000614:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000618:	4a85      	ldr	r2, [pc, #532]	@ (8000830 <main+0x258>)
 800061a:	2100      	movs	r1, #0
 800061c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000620:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000624:	3301      	adds	r3, #1
 8000626:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800062a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800062e:	2b02      	cmp	r3, #2
 8000630:	d9e4      	bls.n	80005fc <main+0x24>
    }

    LcdInit(); 				// LcdPutS("KeyPad LCD:");
 8000632:	f7ff fef6 	bl	8000422 <LcdInit>
    LcdWriteCmd(0x000C);  	// CURSOR OFF
 8000636:	200c      	movs	r0, #12
 8000638:	f7ff fe32 	bl	80002a0 <LcdWriteCmd>

    LcdCreateChar(FULL_IDX, full_rect);
 800063c:	497d      	ldr	r1, [pc, #500]	@ (8000834 <main+0x25c>)
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff ff37 	bl	80004b2 <LcdCreateChar>
    LcdCreateChar(TOP_HALF_IDX, top_half);
 8000644:	497c      	ldr	r1, [pc, #496]	@ (8000838 <main+0x260>)
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff ff33 	bl	80004b2 <LcdCreateChar>
    LcdCreateChar(BOT_HALF_IDX, bottom_half);
 800064c:	497b      	ldr	r1, [pc, #492]	@ (800083c <main+0x264>)
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ff2f 	bl	80004b2 <LcdCreateChar>

    char topbuff[17] = "";
 8000654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	741a      	strb	r2, [r3, #16]
    char bottombuff[17] = "";
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	741a      	strb	r2, [r3, #16]

    char endMessage[17] = "--- Game Over --";
 8000674:	4b72      	ldr	r3, [pc, #456]	@ (8000840 <main+0x268>)
 8000676:	1d3c      	adds	r4, r7, #4
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	682b      	ldr	r3, [r5, #0]
 8000680:	7023      	strb	r3, [r4, #0]

    while (1) {
    	// check for game end condition
    	if (flags & GAME_END) {
 8000682:	4b70      	ldr	r3, [pc, #448]	@ (8000844 <main+0x26c>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00b      	beq.n	80006a6 <main+0xce>
    		LcdClear();
 800068e:	f7ff fe5d 	bl	800034c <LcdClear>
    		LcdGoto(0, 0);
 8000692:	2100      	movs	r1, #0
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff fea5 	bl	80003e4 <LcdGoto>
    		LcdPutS(endMessage);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fe5f 	bl	8000360 <LcdPutS>
    		return 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e0ba      	b.n	800081c <main+0x244>
    	}

        // Check if need to scan and process keys
        if ((sTimer[KEY_SCAN_TIMER] == 0) && !(flags & GAME_END) ) {
 80006a6:	4b68      	ldr	r3, [pc, #416]	@ (8000848 <main+0x270>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10c      	bne.n	80006c8 <main+0xf0>
 80006ae:	4b65      	ldr	r3, [pc, #404]	@ (8000844 <main+0x26c>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d106      	bne.n	80006c8 <main+0xf0>
            Keypadscan();
 80006ba:	f000 fa57 	bl	8000b6c <Keypadscan>
            KeyProcess();
 80006be:	f000 fc3f 	bl	8000f40 <KeyProcess>
            sTimer[KEY_SCAN_TIMER] = KEY_SCAN_TIME;
 80006c2:	4b61      	ldr	r3, [pc, #388]	@ (8000848 <main+0x270>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	801a      	strh	r2, [r3, #0]
        }

        // frame logic goes here
        if ((sTimer[LCD_SCROLL_TIMER] == 0) && !(flags & GAME_END)) {
 80006c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000848 <main+0x270>)
 80006ca:	885b      	ldrh	r3, [r3, #2]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1d8      	bne.n	8000682 <main+0xaa>
 80006d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000844 <main+0x26c>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1d2      	bne.n	8000682 <main+0xaa>
        	// update the environment cells first
        	updateCellsEnv();
 80006dc:	f000 f962 	bl	80009a4 <updateCellsEnv>

        	// update player position based on logic
        	updatePlayerPos();
 80006e0:	f000 f8b8 	bl	8000854 <updatePlayerPos>

        	// check for game end
        	if(character.row0Occupied && envCells[0].environmentOccupied)
 80006e4:	4b59      	ldr	r3, [pc, #356]	@ (800084c <main+0x274>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00b      	beq.n	8000704 <main+0x12c>
 80006ec:	4b58      	ldr	r3, [pc, #352]	@ (8000850 <main+0x278>)
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d007      	beq.n	8000704 <main+0x12c>
        	{
        		flags |= GAME_END;
 80006f4:	4b53      	ldr	r3, [pc, #332]	@ (8000844 <main+0x26c>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b51      	ldr	r3, [pc, #324]	@ (8000844 <main+0x26c>)
 8000700:	801a      	strh	r2, [r3, #0]
        		continue;
 8000702:	e08a      	b.n	800081a <main+0x242>
        	} else if (character.row1Occupied && envCells[ROWLENGTH].environmentOccupied) {
 8000704:	4b51      	ldr	r3, [pc, #324]	@ (800084c <main+0x274>)
 8000706:	785b      	ldrb	r3, [r3, #1]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00c      	beq.n	8000726 <main+0x14e>
 800070c:	4b50      	ldr	r3, [pc, #320]	@ (8000850 <main+0x278>)
 800070e:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8000712:	2b00      	cmp	r3, #0
 8000714:	d007      	beq.n	8000726 <main+0x14e>
        		flags |= GAME_END;
 8000716:	4b4b      	ldr	r3, [pc, #300]	@ (8000844 <main+0x26c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	b29a      	uxth	r2, r3
 8000720:	4b48      	ldr	r3, [pc, #288]	@ (8000844 <main+0x26c>)
 8000722:	801a      	strh	r2, [r3, #0]
        		continue;
 8000724:	e079      	b.n	800081a <main+0x242>
        	}

        	// game hasn't ended so we update player on screen
        	// fill 0 with character if present otherwise with env
        	if (character.row0Occupied) {
 8000726:	4b49      	ldr	r3, [pc, #292]	@ (800084c <main+0x274>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00a      	beq.n	8000744 <main+0x16c>
        		LcdGoto(0,0);
 800072e:	2100      	movs	r1, #0
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fe57 	bl	80003e4 <LcdGoto>
        		LcdPutCh(character.topState);
 8000736:	4b45      	ldr	r3, [pc, #276]	@ (800084c <main+0x274>)
 8000738:	88db      	ldrh	r3, [r3, #6]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe24 	bl	800038a <LcdPutCh>
 8000742:	e008      	b.n	8000756 <main+0x17e>
        	} else {
        		LcdGoto(0,0);
 8000744:	2100      	movs	r1, #0
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff fe4c 	bl	80003e4 <LcdGoto>
        		LcdPutCh(envCells[0].state);
 800074c:	4b40      	ldr	r3, [pc, #256]	@ (8000850 <main+0x278>)
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fe1a 	bl	800038a <LcdPutCh>
        	}
        	if (character.row1Occupied) {
 8000756:	4b3d      	ldr	r3, [pc, #244]	@ (800084c <main+0x274>)
 8000758:	785b      	ldrb	r3, [r3, #1]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00a      	beq.n	8000774 <main+0x19c>
        		LcdGoto(1,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fe3f 	bl	80003e4 <LcdGoto>
        		LcdPutCh(character.botState);
 8000766:	4b39      	ldr	r3, [pc, #228]	@ (800084c <main+0x274>)
 8000768:	891b      	ldrh	r3, [r3, #8]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe0c 	bl	800038a <LcdPutCh>
 8000772:	e009      	b.n	8000788 <main+0x1b0>
        	} else {
        		LcdGoto(1,0);
 8000774:	2100      	movs	r1, #0
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fe34 	bl	80003e4 <LcdGoto>
        		LcdPutCh(envCells[ROWLENGTH].state);
 800077c:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <main+0x278>)
 800077e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe01 	bl	800038a <LcdPutCh>
        	}

            // now fill buffers with rest of environment and display
        	for (int i = 0; i < ROWLENGTH-1; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
 800078c:	e023      	b.n	80007d6 <main+0x1fe>
        		topbuff[i] = envCells[i+1].state;
 800078e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	492f      	ldr	r1, [pc, #188]	@ (8000850 <main+0x278>)
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	440b      	add	r3, r1
 800079e:	3304      	adds	r3, #4
 80007a0:	7819      	ldrb	r1, [r3, #0]
 80007a2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80007a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007a8:	4413      	add	r3, r2
 80007aa:	460a      	mov	r2, r1
 80007ac:	701a      	strb	r2, [r3, #0]
        		bottombuff[i] = envCells[ROWLENGTH+i+1].state;
 80007ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007b0:	f103 0211 	add.w	r2, r3, #17
 80007b4:	4926      	ldr	r1, [pc, #152]	@ (8000850 <main+0x278>)
 80007b6:	4613      	mov	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4413      	add	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	440b      	add	r3, r1
 80007c0:	3304      	adds	r3, #4
 80007c2:	7819      	ldrb	r1, [r3, #0]
 80007c4:	f107 0218 	add.w	r2, r7, #24
 80007c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
        	for (int i = 0; i < ROWLENGTH-1; i++) {
 80007d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007d2:	3301      	adds	r3, #1
 80007d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80007d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007d8:	2b0e      	cmp	r3, #14
 80007da:	ddd8      	ble.n	800078e <main+0x1b6>
        	}

        	// end with null
        	topbuff[ROWLENGTH-1] = '\0';
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        	bottombuff[ROWLENGTH-1] = '\0';
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            HAL_Delay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f001 f94f 	bl	8001a8c <HAL_Delay>
            LcdGoto(0, 1);
 80007ee:	2101      	movs	r1, #1
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff fdf7 	bl	80003e4 <LcdGoto>
            LcdPutS(topbuff);
 80007f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fdb0 	bl	8000360 <LcdPutS>

            LcdGoto(1, 1);
 8000800:	2101      	movs	r1, #1
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff fdee 	bl	80003e4 <LcdGoto>
            LcdPutS(bottombuff);
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fda7 	bl	8000360 <LcdPutS>

            // Reset the LCD_SCROLL_TIMER to control the game speed
            sTimer[LCD_SCROLL_TIMER] = LCD_SCROLL_TIME;
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <main+0x270>)
 8000814:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000818:	805a      	strh	r2, [r3, #2]
    	if (flags & GAME_END) {
 800081a:	e732      	b.n	8000682 <main+0xaa>
        }
	}
}
 800081c:	4618      	mov	r0, r3
 800081e:	3748      	adds	r7, #72	@ 0x48
 8000820:	46bd      	mov	sp, r7
 8000822:	bdb0      	pop	{r4, r5, r7, pc}
 8000824:	2000022c 	.word	0x2000022c
 8000828:	20000210 	.word	0x20000210
 800082c:	2000021c 	.word	0x2000021c
 8000830:	20000224 	.word	0x20000224
 8000834:	2000016c 	.word	0x2000016c
 8000838:	2000015c 	.word	0x2000015c
 800083c:	20000164 	.word	0x20000164
 8000840:	080045f4 	.word	0x080045f4
 8000844:	20000204 	.word	0x20000204
 8000848:	200001fc 	.word	0x200001fc
 800084c:	20000150 	.word	0x20000150
 8000850:	20000090 	.word	0x20000090

08000854 <updatePlayerPos>:


void updatePlayerPos() {
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	if (character.jumping) {
 8000858:	4b51      	ldr	r3, [pc, #324]	@ (80009a0 <updatePlayerPos+0x14c>)
 800085a:	789b      	ldrb	r3, [r3, #2]
 800085c:	2b00      	cmp	r3, #0
 800085e:	f000 809b 	beq.w	8000998 <updatePlayerPos+0x144>

		// If we have reached the last frame of animation set back to ground and ready to jump again
		if (character.jumpFrame >= JUMPFRAMES) {
 8000862:	4b4f      	ldr	r3, [pc, #316]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000864:	889b      	ldrh	r3, [r3, #4]
 8000866:	2b04      	cmp	r3, #4
 8000868:	d912      	bls.n	8000890 <updatePlayerPos+0x3c>
			character.jumping = false;
 800086a:	4b4d      	ldr	r3, [pc, #308]	@ (80009a0 <updatePlayerPos+0x14c>)
 800086c:	2200      	movs	r2, #0
 800086e:	709a      	strb	r2, [r3, #2]
			character.jumpFrame = 0;
 8000870:	4b4b      	ldr	r3, [pc, #300]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000872:	2200      	movs	r2, #0
 8000874:	809a      	strh	r2, [r3, #4]
			character.topState = (unsigned short)' ';
 8000876:	4b4a      	ldr	r3, [pc, #296]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000878:	2220      	movs	r2, #32
 800087a:	80da      	strh	r2, [r3, #6]
			character.botState = FULL_IDX;
 800087c:	4b48      	ldr	r3, [pc, #288]	@ (80009a0 <updatePlayerPos+0x14c>)
 800087e:	2200      	movs	r2, #0
 8000880:	811a      	strh	r2, [r3, #8]
			character.row0Occupied = false;
 8000882:	4b47      	ldr	r3, [pc, #284]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
			character.row1Occupied = true;
 8000888:	4b45      	ldr	r3, [pc, #276]	@ (80009a0 <updatePlayerPos+0x14c>)
 800088a:	2201      	movs	r2, #1
 800088c:	705a      	strb	r2, [r3, #1]
			return;
 800088e:	e083      	b.n	8000998 <updatePlayerPos+0x144>
		}

		switch (character.jumpFrame) {
 8000890:	4b43      	ldr	r3, [pc, #268]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000892:	889b      	ldrh	r3, [r3, #4]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d86c      	bhi.n	8000972 <updatePlayerPos+0x11e>
 8000898:	a201      	add	r2, pc, #4	@ (adr r2, 80008a0 <updatePlayerPos+0x4c>)
 800089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089e:	bf00      	nop
 80008a0:	080008b5 	.word	0x080008b5
 80008a4:	080008db 	.word	0x080008db
 80008a8:	08000901 	.word	0x08000901
 80008ac:	08000927 	.word	0x08000927
 80008b0:	0800094d 	.word	0x0800094d
			case 0:
				// we are now in takeoff (to give grave making bottom hitbox off)
				character.jumpFrame += 1;
 80008b4:	4b3a      	ldr	r3, [pc, #232]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008b6:	889b      	ldrh	r3, [r3, #4]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b38      	ldr	r3, [pc, #224]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008be:	809a      	strh	r2, [r3, #4]
				character.topState = TOP_HALF_IDX;
 80008c0:	4b37      	ldr	r3, [pc, #220]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	80da      	strh	r2, [r3, #6]
				character.botState = BOT_HALF_IDX;
 80008c6:	4b36      	ldr	r3, [pc, #216]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = true;
 80008cc:	4b34      	ldr	r3, [pc, #208]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = false;
 80008d2:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	705a      	strb	r2, [r3, #1]
				break;
 80008d8:	e05e      	b.n	8000998 <updatePlayerPos+0x144>
			case 1:
				// we are now in flight
				character.jumpFrame += 1;
 80008da:	4b31      	ldr	r3, [pc, #196]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008dc:	889b      	ldrh	r3, [r3, #4]
 80008de:	3301      	adds	r3, #1
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	4b2f      	ldr	r3, [pc, #188]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008e4:	809a      	strh	r2, [r3, #4]
				character.topState = FULL_IDX;
 80008e6:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	80da      	strh	r2, [r3, #6]
				character.botState = (unsigned short)' ';
 80008ec:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008ee:	2220      	movs	r2, #32
 80008f0:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = true;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = false;
 80008f8:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <updatePlayerPos+0x14c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	705a      	strb	r2, [r3, #1]
				break;
 80008fe:	e04b      	b.n	8000998 <updatePlayerPos+0x144>
			case 2:
				// we are now in flight
				character.jumpFrame += 1;
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000902:	889b      	ldrh	r3, [r3, #4]
 8000904:	3301      	adds	r3, #1
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <updatePlayerPos+0x14c>)
 800090a:	809a      	strh	r2, [r3, #4]
				character.topState = FULL_IDX;
 800090c:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <updatePlayerPos+0x14c>)
 800090e:	2200      	movs	r2, #0
 8000910:	80da      	strh	r2, [r3, #6]
				character.botState = (unsigned short)' ';
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000914:	2220      	movs	r2, #32
 8000916:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = true;
 8000918:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <updatePlayerPos+0x14c>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = false;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000920:	2200      	movs	r2, #0
 8000922:	705a      	strb	r2, [r3, #1]
				break;
 8000924:	e038      	b.n	8000998 <updatePlayerPos+0x144>
			case 3:
				// we are now in flight
				character.jumpFrame += 1;
 8000926:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	3301      	adds	r3, #1
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000930:	809a      	strh	r2, [r3, #4]
				character.topState = FULL_IDX;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000934:	2200      	movs	r2, #0
 8000936:	80da      	strh	r2, [r3, #6]
				character.botState = (unsigned short)' ';
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <updatePlayerPos+0x14c>)
 800093a:	2220      	movs	r2, #32
 800093c:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = true;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = false;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000946:	2200      	movs	r2, #0
 8000948:	705a      	strb	r2, [r3, #1]
				break;
 800094a:	e025      	b.n	8000998 <updatePlayerPos+0x144>
			case 4:
				// we are now in landing
				character.jumpFrame += 1;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <updatePlayerPos+0x14c>)
 800094e:	889b      	ldrh	r3, [r3, #4]
 8000950:	3301      	adds	r3, #1
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000956:	809a      	strh	r2, [r3, #4]
				character.topState = TOP_HALF_IDX;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <updatePlayerPos+0x14c>)
 800095a:	2202      	movs	r2, #2
 800095c:	80da      	strh	r2, [r3, #6]
				character.botState = BOT_HALF_IDX;
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000960:	2201      	movs	r2, #1
 8000962:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = false;
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = true;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <updatePlayerPos+0x14c>)
 800096c:	2201      	movs	r2, #1
 800096e:	705a      	strb	r2, [r3, #1]
				break;
 8000970:	e012      	b.n	8000998 <updatePlayerPos+0x144>
			default:
				// we are now on the ground
				character.jumping = false;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000974:	2200      	movs	r2, #0
 8000976:	709a      	strb	r2, [r3, #2]
				character.jumpFrame = 0;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <updatePlayerPos+0x14c>)
 800097a:	2200      	movs	r2, #0
 800097c:	809a      	strh	r2, [r3, #4]
				character.topState = (unsigned short)' ';
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000980:	2220      	movs	r2, #32
 8000982:	80da      	strh	r2, [r3, #6]
				character.botState = FULL_IDX;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000986:	2200      	movs	r2, #0
 8000988:	811a      	strh	r2, [r3, #8]
				character.row0Occupied = false;
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <updatePlayerPos+0x14c>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
				character.row1Occupied = true;
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <updatePlayerPos+0x14c>)
 8000992:	2201      	movs	r2, #1
 8000994:	705a      	strb	r2, [r3, #1]
				break;
 8000996:	bf00      	nop
		}

	}
}
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000150 	.word	0x20000150

080009a4 <updateCellsEnv>:


void updateCellsEnv() {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
	// update the frames by moving each to the left
	// '0' is leftmost index
	for (int i = 0; i < ROWLENGTH-1; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	e058      	b.n	8000a62 <updateCellsEnv+0xbe>
		envCells[i].state = envCells[i + 1].state;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	496a      	ldr	r1, [pc, #424]	@ (8000b60 <updateCellsEnv+0x1bc>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	440b      	add	r3, r1
 80009c0:	3304      	adds	r3, #4
 80009c2:	7818      	ldrb	r0, [r3, #0]
 80009c4:	4966      	ldr	r1, [pc, #408]	@ (8000b60 <updateCellsEnv+0x1bc>)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	440b      	add	r3, r1
 80009d2:	3304      	adds	r3, #4
 80009d4:	4602      	mov	r2, r0
 80009d6:	701a      	strb	r2, [r3, #0]
		envCells[i].environmentOccupied = envCells[i + 1].environmentOccupied;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	4960      	ldr	r1, [pc, #384]	@ (8000b60 <updateCellsEnv+0x1bc>)
 80009de:	4613      	mov	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	4413      	add	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	440b      	add	r3, r1
 80009e8:	3305      	adds	r3, #5
 80009ea:	7818      	ldrb	r0, [r3, #0]
 80009ec:	495c      	ldr	r1, [pc, #368]	@ (8000b60 <updateCellsEnv+0x1bc>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	440b      	add	r3, r1
 80009fa:	3305      	adds	r3, #5
 80009fc:	4602      	mov	r2, r0
 80009fe:	701a      	strb	r2, [r3, #0]
		envCells[ROWLENGTH + i].state = envCells[ROWLENGTH + i + 1].state;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f103 0111 	add.w	r1, r3, #17
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f103 0210 	add.w	r2, r3, #16
 8000a0c:	4854      	ldr	r0, [pc, #336]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a0e:	460b      	mov	r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	440b      	add	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4403      	add	r3, r0
 8000a18:	3304      	adds	r3, #4
 8000a1a:	7818      	ldrb	r0, [r3, #0]
 8000a1c:	4950      	ldr	r1, [pc, #320]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a1e:	4613      	mov	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	4413      	add	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	440b      	add	r3, r1
 8000a28:	3304      	adds	r3, #4
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	701a      	strb	r2, [r3, #0]
		envCells[ROWLENGTH + i].environmentOccupied = envCells[ROWLENGTH + i + 1].environmentOccupied;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f103 0111 	add.w	r1, r3, #17
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f103 0210 	add.w	r2, r3, #16
 8000a3a:	4849      	ldr	r0, [pc, #292]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	440b      	add	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4403      	add	r3, r0
 8000a46:	3305      	adds	r3, #5
 8000a48:	7818      	ldrb	r0, [r3, #0]
 8000a4a:	4945      	ldr	r1, [pc, #276]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	440b      	add	r3, r1
 8000a56:	3305      	adds	r3, #5
 8000a58:	4602      	mov	r2, r0
 8000a5a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ROWLENGTH-1; i++) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0e      	cmp	r3, #14
 8000a66:	dda3      	ble.n	80009b0 <updateCellsEnv+0xc>
	}

	// now update the last cell randomly:
	// first check if it's ok for an obstacle to appear
	if (envCells[ROWLENGTH - 2].environmentOccupied ||
 8000a68:	4b3d      	ldr	r3, [pc, #244]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d122      	bne.n	8000ab8 <updateCellsEnv+0x114>
		envCells[ROWLENGTH - 3].environmentOccupied ||
 8000a72:	4b3b      	ldr	r3, [pc, #236]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a74:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
	if (envCells[ROWLENGTH - 2].environmentOccupied ||
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d11d      	bne.n	8000ab8 <updateCellsEnv+0x114>
		envCells[ROWLENGTH - 4].environmentOccupied ||
 8000a7c:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a7e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
		envCells[ROWLENGTH - 3].environmentOccupied ||
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d118      	bne.n	8000ab8 <updateCellsEnv+0x114>
		envCells[ROWLENGTH - 5].environmentOccupied ||
 8000a86:	4b36      	ldr	r3, [pc, #216]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a88:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
		envCells[ROWLENGTH - 4].environmentOccupied ||
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d113      	bne.n	8000ab8 <updateCellsEnv+0x114>
		envCells[NUMCELLS  - 2].environmentOccupied ||
 8000a90:	4b33      	ldr	r3, [pc, #204]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a92:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
		envCells[ROWLENGTH - 5].environmentOccupied ||
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10e      	bne.n	8000ab8 <updateCellsEnv+0x114>
		envCells[NUMCELLS  - 3].environmentOccupied ||
 8000a9a:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000a9c:	f893 30b3 	ldrb.w	r3, [r3, #179]	@ 0xb3
		envCells[NUMCELLS  - 2].environmentOccupied ||
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d109      	bne.n	8000ab8 <updateCellsEnv+0x114>
		envCells[NUMCELLS  - 4].environmentOccupied ||
 8000aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000aa6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
		envCells[NUMCELLS  - 3].environmentOccupied ||
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d104      	bne.n	8000ab8 <updateCellsEnv+0x114>
		envCells[NUMCELLS  - 5].environmentOccupied) {
 8000aae:	4b2c      	ldr	r3, [pc, #176]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000ab0:	f893 30a7 	ldrb.w	r3, [r3, #167]	@ 0xa7
		envCells[NUMCELLS  - 4].environmentOccupied ||
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d010      	beq.n	8000ada <updateCellsEnv+0x136>
		envCells[ROWLENGTH - 1].state = ' ';
 8000ab8:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000aba:	2220      	movs	r2, #32
 8000abc:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
		envCells[ROWLENGTH - 1].environmentOccupied = false;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
		envCells[NUMCELLS  - 1].state = ' ';
 8000ac8:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000aca:	2220      	movs	r2, #32
 8000acc:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
		envCells[NUMCELLS  - 1].environmentOccupied = false;
 8000ad0:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
			envCells[ROWLENGTH - 1].environmentOccupied = false;
			envCells[NUMCELLS  - 1].state = ' ';
			envCells[NUMCELLS  - 1].environmentOccupied = false;
		}
	}
}
 8000ad8:	e03d      	b.n	8000b56 <updateCellsEnv+0x1b2>
		if (rand() < (0.3 * RAND_MAX)) {
 8000ada:	f002 fda1 	bl	8003620 <rand>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a20      	ldr	r2, [pc, #128]	@ (8000b64 <updateCellsEnv+0x1c0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	dc10      	bgt.n	8000b08 <updateCellsEnv+0x164>
			envCells[ROWLENGTH - 1].state = ' ';
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000ae8:	2220      	movs	r2, #32
 8000aea:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			envCells[ROWLENGTH - 1].environmentOccupied = false;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			envCells[NUMCELLS  - 1].state = BOT_OBSTACLE;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000af8:	224f      	movs	r2, #79	@ 0x4f
 8000afa:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
			envCells[NUMCELLS  - 1].environmentOccupied = true;
 8000afe:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
}
 8000b06:	e026      	b.n	8000b56 <updateCellsEnv+0x1b2>
		} else if (rand() < (0.1 * RAND_MAX)) {
 8000b08:	f002 fd8a 	bl	8003620 <rand>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a16      	ldr	r2, [pc, #88]	@ (8000b68 <updateCellsEnv+0x1c4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	dc10      	bgt.n	8000b36 <updateCellsEnv+0x192>
			envCells[ROWLENGTH - 1].state = TOP_OBSTACLE;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b16:	2256      	movs	r2, #86	@ 0x56
 8000b18:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			envCells[ROWLENGTH - 1].environmentOccupied = true;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			envCells[NUMCELLS  - 1].state = ' ';
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b26:	2220      	movs	r2, #32
 8000b28:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
			envCells[NUMCELLS  - 1].environmentOccupied = false;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
}
 8000b34:	e00f      	b.n	8000b56 <updateCellsEnv+0x1b2>
			envCells[ROWLENGTH - 1].state = ' ';
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b38:	2220      	movs	r2, #32
 8000b3a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			envCells[ROWLENGTH - 1].environmentOccupied = false;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			envCells[NUMCELLS  - 1].state = ' ';
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b48:	2220      	movs	r2, #32
 8000b4a:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
			envCells[NUMCELLS  - 1].environmentOccupied = false;
 8000b4e:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <updateCellsEnv+0x1bc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000090 	.word	0x20000090
 8000b64:	26666666 	.word	0x26666666
 8000b68:	0ccccccc 	.word	0x0ccccccc

08000b6c <Keypadscan>:




void Keypadscan() {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
    unsigned short sIndex;
    unsigned short Temp;
    // Clear all key records
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	e007      	b.n	8000b88 <Keypadscan+0x1c>
        sKeyCurrentCol[sIndex] = 0x00;
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4a91      	ldr	r2, [pc, #580]	@ (8000dc0 <Keypadscan+0x254>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	3301      	adds	r3, #1
 8000b86:	80fb      	strh	r3, [r7, #6]
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d9f4      	bls.n	8000b78 <Keypadscan+0xc>
    }
    // Read all 3 column
    for (sIndex = 0; sIndex < Number_of_Keys; sIndex++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	e0bf      	b.n	8000d14 <Keypadscan+0x1a8>
        GPIOA->ODR &= ~(PA4 | PA1 | PA0);
 8000b94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b9e:	f023 0313 	bic.w	r3, r3, #19
 8000ba2:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= sKeyControl[sIndex].sKeySend;
 8000ba4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ba8:	6959      	ldr	r1, [r3, #20]
 8000baa:	88fa      	ldrh	r2, [r7, #6]
 8000bac:	4885      	ldr	r0, [pc, #532]	@ (8000dc4 <Keypadscan+0x258>)
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4403      	add	r3, r0
 8000bb8:	3304      	adds	r3, #4
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6153      	str	r3, [r2, #20]
        HAL_Delay(0.5);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 ff61 	bl	8001a8c <HAL_Delay>
        switch (sKeyControl[sIndex].sKeyCommand) {
 8000bca:	88fa      	ldrh	r2, [r7, #6]
 8000bcc:	497d      	ldr	r1, [pc, #500]	@ (8000dc4 <Keypadscan+0x258>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	330a      	adds	r3, #10
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	2b0b      	cmp	r3, #11
 8000bde:	bf8c      	ite	hi
 8000be0:	2201      	movhi	r2, #1
 8000be2:	2200      	movls	r2, #0
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	f040 8091 	bne.w	8000d0e <Keypadscan+0x1a2>
 8000bec:	2201      	movs	r2, #1
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	f240 6266 	movw	r2, #1638	@ 0x666
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2201      	movne	r2, #1
 8000bfe:	2200      	moveq	r2, #0
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d138      	bne.n	8000c78 <Keypadscan+0x10c>
 8000c06:	f640 0288 	movw	r2, #2184	@ 0x888
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	bf14      	ite	ne
 8000c10:	2201      	movne	r2, #1
 8000c12:	2200      	moveq	r2, #0
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d152      	bne.n	8000cc0 <Keypadscan+0x154>
 8000c1a:	f240 1211 	movw	r2, #273	@ 0x111
 8000c1e:	401a      	ands	r2, r3
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d06f      	beq.n	8000d0e <Keypadscan+0x1a2>
            case ONE_command:
            case TWO_command:
            case THREE_command:
                if (GPIOA->IDR & sKeyControl[sIndex].sKeyRead)
 8000c2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c32:	6919      	ldr	r1, [r3, #16]
 8000c34:	88fa      	ldrh	r2, [r7, #6]
 8000c36:	4863      	ldr	r0, [pc, #396]	@ (8000dc4 <Keypadscan+0x258>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4403      	add	r3, r0
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	400b      	ands	r3, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d05e      	beq.n	8000d08 <Keypadscan+0x19c>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000c4a:	88fa      	ldrh	r2, [r7, #6]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000c4c:	88f9      	ldrh	r1, [r7, #6]
 8000c4e:	485d      	ldr	r0, [pc, #372]	@ (8000dc4 <Keypadscan+0x258>)
 8000c50:	460b      	mov	r3, r1
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	440b      	add	r3, r1
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4403      	add	r3, r0
 8000c5a:	3306      	adds	r3, #6
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000c60:	4958      	ldr	r1, [pc, #352]	@ (8000dc4 <Keypadscan+0x258>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	881a      	ldrh	r2, [r3, #0]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000c70:	4b53      	ldr	r3, [pc, #332]	@ (8000dc0 <Keypadscan+0x254>)
 8000c72:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
                break;
 8000c76:	e047      	b.n	8000d08 <Keypadscan+0x19c>
            case FIVE_command:
            case SIX_command:
            case SEVEN_command:
            case EIGHT_command:
            case NINE_command:
                if (GPIOC->IDR & sKeyControl[sIndex].sKeyRead)
 8000c78:	4b53      	ldr	r3, [pc, #332]	@ (8000dc8 <Keypadscan+0x25c>)
 8000c7a:	6919      	ldr	r1, [r3, #16]
 8000c7c:	88fa      	ldrh	r2, [r7, #6]
 8000c7e:	4851      	ldr	r0, [pc, #324]	@ (8000dc4 <Keypadscan+0x258>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4403      	add	r3, r0
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	400b      	ands	r3, r1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d03c      	beq.n	8000d0c <Keypadscan+0x1a0>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000c92:	88fa      	ldrh	r2, [r7, #6]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000c94:	88f9      	ldrh	r1, [r7, #6]
 8000c96:	484b      	ldr	r0, [pc, #300]	@ (8000dc4 <Keypadscan+0x258>)
 8000c98:	460b      	mov	r3, r1
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	440b      	add	r3, r1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4403      	add	r3, r0
 8000ca2:	3306      	adds	r3, #6
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000ca8:	4946      	ldr	r1, [pc, #280]	@ (8000dc4 <Keypadscan+0x258>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	881a      	ldrh	r2, [r3, #0]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000cb8:	4b41      	ldr	r3, [pc, #260]	@ (8000dc0 <Keypadscan+0x254>)
 8000cba:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
                break;
 8000cbe:	e025      	b.n	8000d0c <Keypadscan+0x1a0>
            case STAR_command:
            case ZERO_command:
            case POUND_command:
                if (GPIOB->IDR & sKeyControl[sIndex].sKeyRead)
 8000cc0:	4b42      	ldr	r3, [pc, #264]	@ (8000dcc <Keypadscan+0x260>)
 8000cc2:	6919      	ldr	r1, [r3, #16]
 8000cc4:	88fa      	ldrh	r2, [r7, #6]
 8000cc6:	483f      	ldr	r0, [pc, #252]	@ (8000dc4 <Keypadscan+0x258>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4403      	add	r3, r0
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d019      	beq.n	8000d0e <Keypadscan+0x1a2>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000cda:	88fa      	ldrh	r2, [r7, #6]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000cdc:	88f9      	ldrh	r1, [r7, #6]
 8000cde:	4839      	ldr	r0, [pc, #228]	@ (8000dc4 <Keypadscan+0x258>)
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	440b      	add	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4403      	add	r3, r0
 8000cea:	3306      	adds	r3, #6
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
                        sKeyControl[sIndex].sKeyReadTempPos;
 8000cf0:	4934      	ldr	r1, [pc, #208]	@ (8000dc4 <Keypadscan+0x258>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	881a      	ldrh	r2, [r3, #0]
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] =
 8000d00:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc0 <Keypadscan+0x254>)
 8000d02:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 8000d06:	e002      	b.n	8000d0e <Keypadscan+0x1a2>
                break;
 8000d08:	bf00      	nop
 8000d0a:	e000      	b.n	8000d0e <Keypadscan+0x1a2>
                break;
 8000d0c:	bf00      	nop
    for (sIndex = 0; sIndex < Number_of_Keys; sIndex++) {
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	3301      	adds	r3, #1
 8000d12:	80fb      	strh	r3, [r7, #6]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	2b0b      	cmp	r3, #11
 8000d18:	f67f af3c 	bls.w	8000b94 <Keypadscan+0x28>
        }
    }
    // Check if a key is steadily read
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	80fb      	strh	r3, [r7, #6]
 8000d20:	e012      	b.n	8000d48 <Keypadscan+0x1dc>
        if ((sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex]) &&
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	4a26      	ldr	r2, [pc, #152]	@ (8000dc0 <Keypadscan+0x254>)
 8000d26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	4928      	ldr	r1, [pc, #160]	@ (8000dd0 <Keypadscan+0x264>)
 8000d2e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d105      	bne.n	8000d42 <Keypadscan+0x1d6>
            (sKeyCurrentCol[sIndex] != 0x0000))
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	4a21      	ldr	r2, [pc, #132]	@ (8000dc0 <Keypadscan+0x254>)
 8000d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        if ((sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex]) &&
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d106      	bne.n	8000d50 <Keypadscan+0x1e4>
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	3301      	adds	r3, #1
 8000d46:	80fb      	strh	r3, [r7, #6]
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d9e9      	bls.n	8000d22 <Keypadscan+0x1b6>
 8000d4e:	e000      	b.n	8000d52 <Keypadscan+0x1e6>
            break;
 8000d50:	bf00      	nop
    }
    if (sIndex < Number_of_Cols) {
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	f200 80ae 	bhi.w	8000eb6 <Keypadscan+0x34a>
        // Check for push on/ push off (Low To High)
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	80fb      	strh	r3, [r7, #6]
 8000d5e:	e017      	b.n	8000d90 <Keypadscan+0x224>
            Temp = sKeyCurrentCol[sIndex] ^ sKeyPreviousCol[sIndex];
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <Keypadscan+0x254>)
 8000d64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	491a      	ldr	r1, [pc, #104]	@ (8000dd4 <Keypadscan+0x268>)
 8000d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d70:	4053      	eors	r3, r2
 8000d72:	80bb      	strh	r3, [r7, #4]
            sKeyLow2HighCol[sIndex] = (sKeyCurrentCol[sIndex] & Temp);
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <Keypadscan+0x254>)
 8000d78:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	88ba      	ldrh	r2, [r7, #4]
 8000d80:	400a      	ands	r2, r1
 8000d82:	b291      	uxth	r1, r2
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <Keypadscan+0x26c>)
 8000d86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d9e4      	bls.n	8000d60 <Keypadscan+0x1f4>
        }
        // Update Previous records
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	80fb      	strh	r3, [r7, #6]
 8000d9a:	e00a      	b.n	8000db2 <Keypadscan+0x246>
            sKeyPreviousCol[sIndex] = sKeyCurrentCol[sIndex];
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	4907      	ldr	r1, [pc, #28]	@ (8000dc0 <Keypadscan+0x254>)
 8000da2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000da6:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <Keypadscan+0x268>)
 8000da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	3301      	adds	r3, #1
 8000db0:	80fb      	strh	r3, [r7, #6]
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d9f1      	bls.n	8000d9c <Keypadscan+0x230>
        }
        // Find which key is JUST depressed (Low To High) or KeyRepeat detected
        for (sIndex = 0; sIndex < Number_of_Keys; sIndex++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	80fb      	strh	r3, [r7, #6]
 8000dbc:	e077      	b.n	8000eae <Keypadscan+0x342>
 8000dbe:	bf00      	nop
 8000dc0:	20000208 	.word	0x20000208
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	48000800 	.word	0x48000800
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	20000210 	.word	0x20000210
 8000dd4:	2000021c 	.word	0x2000021c
 8000dd8:	20000224 	.word	0x20000224
            if (sKeyLow2HighCol[sKeyControl[sIndex].sKeyCol] &
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	494f      	ldr	r1, [pc, #316]	@ (8000f1c <Keypadscan+0x3b0>)
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	3306      	adds	r3, #6
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <Keypadscan+0x3b4>)
 8000df2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
                sKeyControl[sIndex].sKeyReadTempPos) {
 8000df6:	88fa      	ldrh	r2, [r7, #6]
 8000df8:	4848      	ldr	r0, [pc, #288]	@ (8000f1c <Keypadscan+0x3b0>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4403      	add	r3, r0
 8000e04:	3302      	adds	r3, #2
 8000e06:	881b      	ldrh	r3, [r3, #0]
            if (sKeyLow2HighCol[sKeyControl[sIndex].sKeyCol] &
 8000e08:	400b      	ands	r3, r1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d020      	beq.n	8000e52 <Keypadscan+0x2e6>
                sKeyIssued = sKeyControl[sIndex].sKeyCommand;
 8000e10:	88fa      	ldrh	r2, [r7, #6]
 8000e12:	4942      	ldr	r1, [pc, #264]	@ (8000f1c <Keypadscan+0x3b0>)
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	330a      	adds	r3, #10
 8000e20:	881a      	ldrh	r2, [r3, #0]
 8000e22:	4b40      	ldr	r3, [pc, #256]	@ (8000f24 <Keypadscan+0x3b8>)
 8000e24:	801a      	strh	r2, [r3, #0]
                sKeyStatus |= (KeyDetect | KeyLow2High);
 8000e26:	4b40      	ldr	r3, [pc, #256]	@ (8000f28 <Keypadscan+0x3bc>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	f043 0303 	orr.w	r3, r3, #3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b3d      	ldr	r3, [pc, #244]	@ (8000f28 <Keypadscan+0x3bc>)
 8000e32:	801a      	strh	r2, [r3, #0]
                sTimer[KEY_WAIT_REPEAT_TIMER] = KEY_WAIT_REPEAT_TIME;
 8000e34:	4b3d      	ldr	r3, [pc, #244]	@ (8000f2c <Keypadscan+0x3c0>)
 8000e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e3a:	809a      	strh	r2, [r3, #4]
                sKeyStatus |= KeyRepeat;   // a new key comes in, set the repeat flag
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f28 <Keypadscan+0x3bc>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b38      	ldr	r3, [pc, #224]	@ (8000f28 <Keypadscan+0x3bc>)
 8000e48:	801a      	strh	r2, [r3, #0]
                sIndexCopy = sIndex;  // save a copy of sIndex for push & held use
 8000e4a:	4a39      	ldr	r2, [pc, #228]	@ (8000f30 <Keypadscan+0x3c4>)
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	8013      	strh	r3, [r2, #0]
				break;
 8000e50:	e049      	b.n	8000ee6 <Keypadscan+0x37a>
            } else if ((sKeyStatus & KeyRepeat) &&
 8000e52:	4b35      	ldr	r3, [pc, #212]	@ (8000f28 <Keypadscan+0x3bc>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d020      	beq.n	8000ea0 <Keypadscan+0x334>
                       (sTimer[KEY_WAIT_REPEAT_TIMER] == 0)) {
 8000e5e:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <Keypadscan+0x3c0>)
 8000e60:	889b      	ldrh	r3, [r3, #4]
            } else if ((sKeyStatus & KeyRepeat) &&
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11c      	bne.n	8000ea0 <Keypadscan+0x334>
                if (sTimer[KEY_REPEAT_TIMER] == 0) {
 8000e66:	4b31      	ldr	r3, [pc, #196]	@ (8000f2c <Keypadscan+0x3c0>)
 8000e68:	88db      	ldrh	r3, [r3, #6]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d11c      	bne.n	8000ea8 <Keypadscan+0x33c>
                    sKeyIssued = sKeyControl[sIndexCopy].sKeyCommand;
 8000e6e:	4b30      	ldr	r3, [pc, #192]	@ (8000f30 <Keypadscan+0x3c4>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	4a29      	ldr	r2, [pc, #164]	@ (8000f1c <Keypadscan+0x3b0>)
 8000e76:	460b      	mov	r3, r1
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	440b      	add	r3, r1
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	330a      	adds	r3, #10
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <Keypadscan+0x3b8>)
 8000e86:	801a      	strh	r2, [r3, #0]
                    sKeyStatus |= (KeyDetect | KeyToBeRepeated);
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <Keypadscan+0x3bc>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	f043 0309 	orr.w	r3, r3, #9
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b25      	ldr	r3, [pc, #148]	@ (8000f28 <Keypadscan+0x3bc>)
 8000e94:	801a      	strh	r2, [r3, #0]
                    sTimer[KEY_REPEAT_TIMER] = KEY_REPEAT_TIME;
 8000e96:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <Keypadscan+0x3c0>)
 8000e98:	f240 124d 	movw	r2, #333	@ 0x14d
 8000e9c:	80da      	strh	r2, [r3, #6]
                if (sTimer[KEY_REPEAT_TIMER] == 0) {
 8000e9e:	e003      	b.n	8000ea8 <Keypadscan+0x33c>
                }
            } else
                sKeyIssued = 0xFFFF;
 8000ea0:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <Keypadscan+0x3b8>)
 8000ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ea6:	801a      	strh	r2, [r3, #0]
        for (sIndex = 0; sIndex < Number_of_Keys; sIndex++) {
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2b0b      	cmp	r3, #11
 8000eb2:	d993      	bls.n	8000ddc <Keypadscan+0x270>
 8000eb4:	e017      	b.n	8000ee6 <Keypadscan+0x37a>
        }
    } else {
        sKeyStatus &= ~(KeyDetect | KeyLow2High | KeyToBeRepeated | KeyRepeat);
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <Keypadscan+0x3bc>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	f023 030f 	bic.w	r3, r3, #15
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <Keypadscan+0x3bc>)
 8000ec2:	801a      	strh	r2, [r3, #0]
        sTimer[KEY_REPEAT_TIMER] = 0;  // Reset repeat timer if no key
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <Keypadscan+0x3c0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	80da      	strh	r2, [r3, #6]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	e007      	b.n	8000ee0 <Keypadscan+0x374>
            sKeyPreviousCol[sIndex] = 0;
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	4a18      	ldr	r2, [pc, #96]	@ (8000f34 <Keypadscan+0x3c8>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	3301      	adds	r3, #1
 8000ede:	80fb      	strh	r3, [r7, #6]
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d9f4      	bls.n	8000ed0 <Keypadscan+0x364>
    }
    // Transfer Current reading to debounced reading
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	e00f      	b.n	8000f0c <Keypadscan+0x3a0>
        sKeyDebouncedCol[sIndex] = sKeyCurrentCol[sIndex];
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	4911      	ldr	r1, [pc, #68]	@ (8000f38 <Keypadscan+0x3cc>)
 8000ef2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000ef6:	4a11      	ldr	r2, [pc, #68]	@ (8000f3c <Keypadscan+0x3d0>)
 8000ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyLow2HighCol[sIndex] = 0;
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <Keypadscan+0x3b4>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++) {
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	80fb      	strh	r3, [r7, #6]
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d9ec      	bls.n	8000eec <Keypadscan+0x380>
    }
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000224 	.word	0x20000224
 8000f24:	20000216 	.word	0x20000216
 8000f28:	20000206 	.word	0x20000206
 8000f2c:	200001fc 	.word	0x200001fc
 8000f30:	20000218 	.word	0x20000218
 8000f34:	2000021c 	.word	0x2000021c
 8000f38:	20000208 	.word	0x20000208
 8000f3c:	20000210 	.word	0x20000210

08000f40 <KeyProcess>:
void KeyProcess() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
    uint16_t sIndex;
    if ((sKeyStatus & KeyDetect) && (sKeyIssued != 0xFFFF)) {
 8000f46:	4b9f      	ldr	r3, [pc, #636]	@ (80011c4 <KeyProcess+0x284>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8133 	beq.w	80011ba <KeyProcess+0x27a>
 8000f54:	4b9c      	ldr	r3, [pc, #624]	@ (80011c8 <KeyProcess+0x288>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	f000 812c 	beq.w	80011ba <KeyProcess+0x27a>
        switch (sKeyIssued) {
 8000f62:	4b99      	ldr	r3, [pc, #612]	@ (80011c8 <KeyProcess+0x288>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	2b0b      	cmp	r3, #11
 8000f68:	f200 80f9 	bhi.w	800115e <KeyProcess+0x21e>
 8000f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f74 <KeyProcess+0x34>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000fa5 	.word	0x08000fa5
 8000f78:	08000fcb 	.word	0x08000fcb
 8000f7c:	08000ff1 	.word	0x08000ff1
 8000f80:	08001017 	.word	0x08001017
 8000f84:	0800103d 	.word	0x0800103d
 8000f88:	08001063 	.word	0x08001063
 8000f8c:	08001087 	.word	0x08001087
 8000f90:	080010ab 	.word	0x080010ab
 8000f94:	080010cf 	.word	0x080010cf
 8000f98:	080010f3 	.word	0x080010f3
 8000f9c:	08001117 	.word	0x08001117
 8000fa0:	0800113b 	.word	0x0800113b
            case ONE_command: {
                if (sKeyStatus & KeyLow2High)
 8000fa4:	4b87      	ldr	r3, [pc, #540]	@ (80011c4 <KeyProcess+0x284>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <KeyProcess+0x76>
                    key1();
 8000fb0:	f000 f90e 	bl	80011d0 <key1>
                else if (sKeyStatus & KeyToBeRepeated)
                    key1R();
                break;
 8000fb4:	e0d5      	b.n	8001162 <KeyProcess+0x222>
                else if (sKeyStatus & KeyToBeRepeated)
 8000fb6:	4b83      	ldr	r3, [pc, #524]	@ (80011c4 <KeyProcess+0x284>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80cf 	beq.w	8001162 <KeyProcess+0x222>
                    key1R();
 8000fc4:	f000 f99e 	bl	8001304 <key1R>
                break;
 8000fc8:	e0cb      	b.n	8001162 <KeyProcess+0x222>
            }
            case FOUR_command: {
                if (sKeyStatus & KeyLow2High)
 8000fca:	4b7e      	ldr	r3, [pc, #504]	@ (80011c4 <KeyProcess+0x284>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <KeyProcess+0x9c>
                    key4();
 8000fd6:	f000 f92b 	bl	8001230 <key4>
                else if (sKeyStatus & KeyToBeRepeated)
                    key4R();
                break;
 8000fda:	e0c4      	b.n	8001166 <KeyProcess+0x226>
                else if (sKeyStatus & KeyToBeRepeated)
 8000fdc:	4b79      	ldr	r3, [pc, #484]	@ (80011c4 <KeyProcess+0x284>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80be 	beq.w	8001166 <KeyProcess+0x226>
                    key4R();
 8000fea:	f000 f9bb 	bl	8001364 <key4R>
                break;
 8000fee:	e0ba      	b.n	8001166 <KeyProcess+0x226>
            }
            case SEVEN_command: {
                if (sKeyStatus & KeyLow2High)
 8000ff0:	4b74      	ldr	r3, [pc, #464]	@ (80011c4 <KeyProcess+0x284>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <KeyProcess+0xc2>
                    key7();
 8000ffc:	f000 f948 	bl	8001290 <key7>
                else if (sKeyStatus & KeyToBeRepeated)
                    key7R();
                break;
 8001000:	e0b3      	b.n	800116a <KeyProcess+0x22a>
                else if (sKeyStatus & KeyToBeRepeated)
 8001002:	4b70      	ldr	r3, [pc, #448]	@ (80011c4 <KeyProcess+0x284>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80ad 	beq.w	800116a <KeyProcess+0x22a>
                    key7R();
 8001010:	f000 f9d8 	bl	80013c4 <key7R>
                break;
 8001014:	e0a9      	b.n	800116a <KeyProcess+0x22a>
            }
            case STAR_command: {
                if (sKeyStatus & KeyLow2High)
 8001016:	4b6b      	ldr	r3, [pc, #428]	@ (80011c4 <KeyProcess+0x284>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <KeyProcess+0xe8>
                    keyS();
 8001022:	f000 f961 	bl	80012e8 <keyS>
                else if (sKeyStatus & KeyToBeRepeated)
                    keySR();
                break;
 8001026:	e0a2      	b.n	800116e <KeyProcess+0x22e>
                else if (sKeyStatus & KeyToBeRepeated)
 8001028:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <KeyProcess+0x284>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 809c 	beq.w	800116e <KeyProcess+0x22e>
                    keySR();
 8001036:	f000 f9f1 	bl	800141c <keySR>
                break;
 800103a:	e098      	b.n	800116e <KeyProcess+0x22e>
            }
            case TWO_command: {
                if (sKeyStatus & KeyLow2High)
 800103c:	4b61      	ldr	r3, [pc, #388]	@ (80011c4 <KeyProcess+0x284>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <KeyProcess+0x10e>
                    key2();
 8001048:	f000 f8d2 	bl	80011f0 <key2>
                else if (sKeyStatus & KeyToBeRepeated)
                    key2R();
                break;
 800104c:	e091      	b.n	8001172 <KeyProcess+0x232>
                else if (sKeyStatus & KeyToBeRepeated)
 800104e:	4b5d      	ldr	r3, [pc, #372]	@ (80011c4 <KeyProcess+0x284>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 808b 	beq.w	8001172 <KeyProcess+0x232>
                    key2R();
 800105c:	f000 f962 	bl	8001324 <key2R>
                break;
 8001060:	e087      	b.n	8001172 <KeyProcess+0x232>
            }
            case FIVE_command: {
                if (sKeyStatus & KeyLow2High)
 8001062:	4b58      	ldr	r3, [pc, #352]	@ (80011c4 <KeyProcess+0x284>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <KeyProcess+0x134>
                    key5();
 800106e:	f000 f8ef 	bl	8001250 <key5>
                else if (sKeyStatus & KeyToBeRepeated)
                    key5R();
                break;
 8001072:	e080      	b.n	8001176 <KeyProcess+0x236>
                else if (sKeyStatus & KeyToBeRepeated)
 8001074:	4b53      	ldr	r3, [pc, #332]	@ (80011c4 <KeyProcess+0x284>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d07a      	beq.n	8001176 <KeyProcess+0x236>
                    key5R();
 8001080:	f000 f980 	bl	8001384 <key5R>
                break;
 8001084:	e077      	b.n	8001176 <KeyProcess+0x236>
            }
            case EIGHT_command: {
                if (sKeyStatus & KeyLow2High)
 8001086:	4b4f      	ldr	r3, [pc, #316]	@ (80011c4 <KeyProcess+0x284>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <KeyProcess+0x158>
                    key8();
 8001092:	f000 f904 	bl	800129e <key8>
                else if (sKeyStatus & KeyToBeRepeated)
                    key8R();
                break;
 8001096:	e070      	b.n	800117a <KeyProcess+0x23a>
                else if (sKeyStatus & KeyToBeRepeated)
 8001098:	4b4a      	ldr	r3, [pc, #296]	@ (80011c4 <KeyProcess+0x284>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d06a      	beq.n	800117a <KeyProcess+0x23a>
                    key8R();
 80010a4:	f000 f995 	bl	80013d2 <key8R>
                break;
 80010a8:	e067      	b.n	800117a <KeyProcess+0x23a>
            }
            case ZERO_command: {
                if (sKeyStatus & KeyLow2High)
 80010aa:	4b46      	ldr	r3, [pc, #280]	@ (80011c4 <KeyProcess+0x284>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <KeyProcess+0x17c>
                    key0();
 80010b6:	f000 f901 	bl	80012bc <key0>
                else if (sKeyStatus & KeyToBeRepeated)
                    key0R();
                break;
 80010ba:	e060      	b.n	800117e <KeyProcess+0x23e>
                else if (sKeyStatus & KeyToBeRepeated)
 80010bc:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <KeyProcess+0x284>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d05a      	beq.n	800117e <KeyProcess+0x23e>
                    key0R();
 80010c8:	f000 f992 	bl	80013f0 <key0R>
                break;
 80010cc:	e057      	b.n	800117e <KeyProcess+0x23e>
            }
            case THREE_command: {
                if (sKeyStatus & KeyLow2High)
 80010ce:	4b3d      	ldr	r3, [pc, #244]	@ (80011c4 <KeyProcess+0x284>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <KeyProcess+0x1a0>
                    key3();
 80010da:	f000 f899 	bl	8001210 <key3>
                else if (sKeyStatus & KeyToBeRepeated)
                    key3R();
                break;
 80010de:	e050      	b.n	8001182 <KeyProcess+0x242>
                else if (sKeyStatus & KeyToBeRepeated)
 80010e0:	4b38      	ldr	r3, [pc, #224]	@ (80011c4 <KeyProcess+0x284>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d04a      	beq.n	8001182 <KeyProcess+0x242>
                    key3R();
 80010ec:	f000 f92a 	bl	8001344 <key3R>
                break;
 80010f0:	e047      	b.n	8001182 <KeyProcess+0x242>
            }
            case SIX_command: {
                if (sKeyStatus & KeyLow2High)
 80010f2:	4b34      	ldr	r3, [pc, #208]	@ (80011c4 <KeyProcess+0x284>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <KeyProcess+0x1c4>
                    key6();
 80010fe:	f000 f8b7 	bl	8001270 <key6>
                else if (sKeyStatus & KeyToBeRepeated)
                    key6R();
                break;
 8001102:	e040      	b.n	8001186 <KeyProcess+0x246>
                else if (sKeyStatus & KeyToBeRepeated)
 8001104:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <KeyProcess+0x284>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d03a      	beq.n	8001186 <KeyProcess+0x246>
                    key6R();
 8001110:	f000 f948 	bl	80013a4 <key6R>
                break;
 8001114:	e037      	b.n	8001186 <KeyProcess+0x246>
            }
            case NINE_command: {
                if (sKeyStatus & KeyLow2High)
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <KeyProcess+0x284>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <KeyProcess+0x1e8>
                    key9();
 8001122:	f000 f8c3 	bl	80012ac <key9>
                else if (sKeyStatus & KeyToBeRepeated)
                    key9R();
                break;
 8001126:	e030      	b.n	800118a <KeyProcess+0x24a>
                else if (sKeyStatus & KeyToBeRepeated)
 8001128:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <KeyProcess+0x284>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d02a      	beq.n	800118a <KeyProcess+0x24a>
                    key9R();
 8001134:	f000 f954 	bl	80013e0 <key9R>
                break;
 8001138:	e027      	b.n	800118a <KeyProcess+0x24a>
            }
            case POUND_command: {
                if (sKeyStatus & KeyLow2High)
 800113a:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <KeyProcess+0x284>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <KeyProcess+0x20c>
                    keyP();
 8001146:	f000 f8d6 	bl	80012f6 <keyP>
                else if (sKeyStatus & KeyToBeRepeated)
                    keyPR();
                break;
 800114a:	e020      	b.n	800118e <KeyProcess+0x24e>
                else if (sKeyStatus & KeyToBeRepeated)
 800114c:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <KeyProcess+0x284>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01a      	beq.n	800118e <KeyProcess+0x24e>
                    keyPR();
 8001158:	f000 f967 	bl	800142a <keyPR>
                break;
 800115c:	e017      	b.n	800118e <KeyProcess+0x24e>
            }
            default:
                break;
 800115e:	bf00      	nop
 8001160:	e016      	b.n	8001190 <KeyProcess+0x250>
                break;
 8001162:	bf00      	nop
 8001164:	e014      	b.n	8001190 <KeyProcess+0x250>
                break;
 8001166:	bf00      	nop
 8001168:	e012      	b.n	8001190 <KeyProcess+0x250>
                break;
 800116a:	bf00      	nop
 800116c:	e010      	b.n	8001190 <KeyProcess+0x250>
                break;
 800116e:	bf00      	nop
 8001170:	e00e      	b.n	8001190 <KeyProcess+0x250>
                break;
 8001172:	bf00      	nop
 8001174:	e00c      	b.n	8001190 <KeyProcess+0x250>
                break;
 8001176:	bf00      	nop
 8001178:	e00a      	b.n	8001190 <KeyProcess+0x250>
                break;
 800117a:	bf00      	nop
 800117c:	e008      	b.n	8001190 <KeyProcess+0x250>
                break;
 800117e:	bf00      	nop
 8001180:	e006      	b.n	8001190 <KeyProcess+0x250>
                break;
 8001182:	bf00      	nop
 8001184:	e004      	b.n	8001190 <KeyProcess+0x250>
                break;
 8001186:	bf00      	nop
 8001188:	e002      	b.n	8001190 <KeyProcess+0x250>
                break;
 800118a:	bf00      	nop
 800118c:	e000      	b.n	8001190 <KeyProcess+0x250>
                break;
 800118e:	bf00      	nop
        }
        sKeyStatus &= ~(KeyDetect | KeyLow2High | KeyToBeRepeated);
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <KeyProcess+0x284>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	f023 030b 	bic.w	r3, r3, #11
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <KeyProcess+0x284>)
 800119c:	801a      	strh	r2, [r3, #0]
        // Clear all Low-2-High and High-2-Low records
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 800119e:	2300      	movs	r3, #0
 80011a0:	80fb      	strh	r3, [r7, #6]
 80011a2:	e007      	b.n	80011b4 <KeyProcess+0x274>
            sKeyLow2HighCol[sIndex] = 0x0000;
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	4a09      	ldr	r2, [pc, #36]	@ (80011cc <KeyProcess+0x28c>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	3301      	adds	r3, #1
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d9f4      	bls.n	80011a4 <KeyProcess+0x264>
    }
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000206 	.word	0x20000206
 80011c8:	20000216 	.word	0x20000216
 80011cc:	20000224 	.word	0x20000224

080011d0 <key1>:



void key1() {
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	hour++;
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <key1+0x1c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <key1+0x1c>)
 80011de:	701a      	strb	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000174 	.word	0x20000174

080011f0 <key2>:
void key2() {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	minute++;
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <key2+0x1c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <key2+0x1c>)
 80011fe:	701a      	strb	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000175 	.word	0x20000175

08001210 <key3>:
void key3() {
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	second++;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <key3+0x1c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <key3+0x1c>)
 800121e:	701a      	strb	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000176 	.word	0x20000176

08001230 <key4>:
void key4() {
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	hour++;
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <key4+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <key4+0x1c>)
 800123e:	701a      	strb	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000174 	.word	0x20000174

08001250 <key5>:
void key5() {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	minute++;
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <key5+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <key5+0x1c>)
 800125e:	701a      	strb	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000175 	.word	0x20000175

08001270 <key6>:
void key6() {
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	second++;
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <key6+0x1c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <key6+0x1c>)
 800127e:	701a      	strb	r2, [r3, #0]

}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000176 	.word	0x20000176

08001290 <key7>:
void key7() {
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <key8>:
void key8() {
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <key9>:
void key9() {
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <key0>:
void key0() {
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	// if character is not jumping set jumping to true and frame to 0
	if (!character.jumping) {
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <key0+0x28>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	f083 0301 	eor.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <key0+0x1e>
		character.jumping = true;
 80012ce:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <key0+0x28>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	709a      	strb	r2, [r3, #2]
		character.jumpFrame = 0;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <key0+0x28>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	809a      	strh	r2, [r3, #4]
	}

}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000150 	.word	0x20000150

080012e8 <keyS>:
void keyS() {
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <keyP>:
void keyP() {
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <key1R>:




void key1R() {
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	hour++;
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <key1R+0x1c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <key1R+0x1c>)
 8001312:	701a      	strb	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000174 	.word	0x20000174

08001324 <key2R>:
void key2R() {
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	minute++;
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <key2R+0x1c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <key2R+0x1c>)
 8001332:	701a      	strb	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000175 	.word	0x20000175

08001344 <key3R>:
void key3R() {
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	second++;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <key3R+0x1c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <key3R+0x1c>)
 8001352:	701a      	strb	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000176 	.word	0x20000176

08001364 <key4R>:
void key4R() {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	hour++;
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <key4R+0x1c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <key4R+0x1c>)
 8001372:	701a      	strb	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000174 	.word	0x20000174

08001384 <key5R>:
void key5R() {
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	minute++;
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <key5R+0x1c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <key5R+0x1c>)
 8001392:	701a      	strb	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000175 	.word	0x20000175

080013a4 <key6R>:
void key6R() {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	second++;
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <key6R+0x1c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <key6R+0x1c>)
 80013b2:	701a      	strb	r2, [r3, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000176 	.word	0x20000176

080013c4 <key7R>:
void key7R() {
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <key8R>:
void key8R() {
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <key9R>:
void key9R() {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <key0R>:
void key0R() {
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
	// if character is not jumping set jumping to true and frame to 0
	if (!character.jumping) {
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <key0R+0x28>)
 80013f6:	789b      	ldrb	r3, [r3, #2]
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <key0R+0x1e>
		character.jumping = true;
 8001402:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <key0R+0x28>)
 8001404:	2201      	movs	r2, #1
 8001406:	709a      	strb	r2, [r3, #2]
		character.jumpFrame = 0;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <key0R+0x28>)
 800140a:	2200      	movs	r2, #0
 800140c:	809a      	strh	r2, [r3, #4]
	}
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20000150 	.word	0x20000150

0800141c <keySR>:
void keySR() {
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <keyPR>:
void keyPR() {
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b096      	sub	sp, #88	@ 0x58
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2244      	movs	r2, #68	@ 0x44
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f002 f9ea 	bl	8003820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800145a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800145e:	f000 fe1b 	bl	8002098 <HAL_PWREx_ControlVoltageScaling>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001468:	f000 f912 	bl	8001690 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2302      	movs	r3, #2
 800146e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001474:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001476:	2310      	movs	r3, #16
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147e:	2302      	movs	r3, #2
 8001480:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001486:	230a      	movs	r3, #10
 8001488:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800148a:	2307      	movs	r3, #7
 800148c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800148e:	2302      	movs	r3, #2
 8001490:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001492:	2302      	movs	r3, #2
 8001494:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fe52 	bl	8002144 <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014a6:	f000 f8f3 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2303      	movs	r3, #3
 80014b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	2104      	movs	r1, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 fa1a 	bl	80028fc <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ce:	f000 f8df 	bl	8001690 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3758      	adds	r7, #88	@ 0x58
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <MX_TIM2_Init+0x98>)
 80014fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001500:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8001502:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <MX_TIM2_Init+0x98>)
 8001504:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_TIM2_Init+0x98>)
 800150c:	2210      	movs	r2, #16
 800150e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_TIM2_Init+0x98>)
 8001512:	2213      	movs	r2, #19
 8001514:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <MX_TIM2_Init+0x98>)
 8001518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800151c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_TIM2_Init+0x98>)
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001524:	4813      	ldr	r0, [pc, #76]	@ (8001574 <MX_TIM2_Init+0x98>)
 8001526:	f001 fbd5 	bl	8002cd4 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001530:	f000 f8ae 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001538:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_TIM2_Init+0x98>)
 8001542:	f001 fd96 	bl	8003072 <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800154c:	f000 f8a0 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_TIM2_Init+0x98>)
 800155e:	f001 ffb9 	bl	80034d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001568:	f000 f892 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000022c 	.word	0x2000022c

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <MX_GPIO_Init+0x10c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a3c      	ldr	r2, [pc, #240]	@ (8001684 <MX_GPIO_Init+0x10c>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <MX_GPIO_Init+0x10c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <MX_GPIO_Init+0x10c>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a36      	ldr	r2, [pc, #216]	@ (8001684 <MX_GPIO_Init+0x10c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <MX_GPIO_Init+0x10c>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <MX_GPIO_Init+0x10c>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a30      	ldr	r2, [pc, #192]	@ (8001684 <MX_GPIO_Init+0x10c>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001684 <MX_GPIO_Init+0x10c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 80015d6:	2200      	movs	r2, #0
 80015d8:	f240 3113 	movw	r1, #787	@ 0x313
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f000 fd34 	bl	800204c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 80015ea:	4827      	ldr	r0, [pc, #156]	@ (8001688 <MX_GPIO_Init+0x110>)
 80015ec:	f000 fd2e 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015f0:	2303      	movs	r3, #3
 80015f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f8:	2302      	movs	r3, #2
 80015fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4619      	mov	r1, r3
 8001602:	4822      	ldr	r0, [pc, #136]	@ (800168c <MX_GPIO_Init+0x114>)
 8001604:	f000 fb78 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8001608:	f240 3313 	movw	r3, #787	@ 0x313
 800160c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001624:	f000 fb68 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001628:	2301      	movs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001630:	2302      	movs	r3, #2
 8001632:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	4813      	ldr	r0, [pc, #76]	@ (8001688 <MX_GPIO_Init+0x110>)
 800163c:	f000 fb5c 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001640:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4619      	mov	r1, r3
 8001658:	480b      	ldr	r0, [pc, #44]	@ (8001688 <MX_GPIO_Init+0x110>)
 800165a:	f000 fb4d 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800165e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001668:	2302      	movs	r3, #2
 800166a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001676:	f000 fb3f 	bl	8001cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	48000400 	.word	0x48000400
 800168c:	48000800 	.word	0x48000800

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <Error_Handler+0x8>

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_MspInit+0x44>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_MspInit+0x44>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_MspInit+0x44>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_MspInit+0x44>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <HAL_MspInit+0x44>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_MspInit+0x44>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f4:	d113      	bne.n	800171e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	201c      	movs	r0, #28
 8001714:	f000 fab9 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001718:	201c      	movs	r0, #28
 800171a:	f000 fad2 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001782:	f000 f963 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <TIM2_IRQHandler+0x10>)
 8001792:	f001 fb67 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000022c 	.word	0x2000022c

080017a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return 1;
 80017a4:	2301      	movs	r3, #1
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_kill>:

int _kill(int pid, int sig)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ba:	f002 f839 	bl	8003830 <__errno>
 80017be:	4603      	mov	r3, r0
 80017c0:	2216      	movs	r2, #22
 80017c2:	601a      	str	r2, [r3, #0]
  return -1;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_exit>:

void _exit (int status)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ffe7 	bl	80017b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017e2:	bf00      	nop
 80017e4:	e7fd      	b.n	80017e2 <_exit+0x12>

080017e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e00a      	b.n	800180e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f8:	f3af 8000 	nop.w
 80017fc:	4601      	mov	r1, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60ba      	str	r2, [r7, #8]
 8001804:	b2ca      	uxtb	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	429a      	cmp	r2, r3
 8001814:	dbf0      	blt.n	80017f8 <_read+0x12>
  }

  return len;
 8001816:	687b      	ldr	r3, [r7, #4]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e009      	b.n	8001846 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	60ba      	str	r2, [r7, #8]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	dbf1      	blt.n	8001832 <_write+0x12>
  }
  return len;
 800184e:	687b      	ldr	r3, [r7, #4]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_close>:

int _close(int file)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001880:	605a      	str	r2, [r3, #4]
  return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_isatty>:

int _isatty(int file)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c8:	4a14      	ldr	r2, [pc, #80]	@ (800191c <_sbrk+0x5c>)
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <_sbrk+0x60>)
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <_sbrk+0x64>)
 80018de:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <_sbrk+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f0:	f001 ff9e 	bl	8003830 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	220c      	movs	r2, #12
 80018f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018fe:	e009      	b.n	8001914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <_sbrk+0x64>)
 8001910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20018000 	.word	0x20018000
 8001920:	00000400 	.word	0x00000400
 8001924:	20000278 	.word	0x20000278
 8001928:	200003d0 	.word	0x200003d0

0800192c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <SystemInit+0x20>)
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001936:	4a05      	ldr	r2, [pc, #20]	@ (800194c <SystemInit+0x20>)
 8001938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800193c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001988 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001954:	f7ff ffea 	bl	800192c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoopForever+0x6>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <LoopForever+0xe>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	@ (800199c <LoopForever+0x16>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f001 ff5d 	bl	800383c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001982:	f7fe fe29 	bl	80005d8 <main>

08001986 <LoopForever>:

LoopForever:
    b LoopForever
 8001986:	e7fe      	b.n	8001986 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001988:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001994:	08004748 	.word	0x08004748
  ldr r2, =_sbss
 8001998:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800199c:	200003cc 	.word	0x200003cc

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>

080019a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f961 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f80e 	bl	80019d4 <HAL_InitTick>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	e001      	b.n	80019c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019c4:	f7ff fe6a 	bl	800169c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019e0:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <HAL_InitTick+0x6c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d023      	beq.n	8001a30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019e8:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <HAL_InitTick+0x70>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <HAL_InitTick+0x6c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f96d 	bl	8001cde <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d809      	bhi.n	8001a24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a18:	f000 f937 	bl	8001c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <HAL_InitTick+0x74>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e007      	b.n	8001a34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e004      	b.n	8001a34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e001      	b.n	8001a34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000180 	.word	0x20000180
 8001a44:	20000178 	.word	0x20000178
 8001a48:	2000017c 	.word	0x2000017c

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000180 	.word	0x20000180
 8001a70:	2000027c 	.word	0x2000027c

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000027c 	.word	0x2000027c

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff ffee 	bl	8001a74 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000180 	.word	0x20000180

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <__NVIC_EnableIRQ+0x38>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	@ 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff29 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff3e 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff31 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa2 	bl	8001c30 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d06:	e17f      	b.n	8002008 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8171 	beq.w	8002002 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d005      	beq.n	8001d38 <HAL_GPIO_Init+0x40>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d130      	bne.n	8001d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d6e:	2201      	movs	r2, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	f003 0201 	and.w	r2, r3, #1
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d118      	bne.n	8001dd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dac:	2201      	movs	r2, #1
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	f003 0201 	and.w	r2, r3, #1
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d017      	beq.n	8001e14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d123      	bne.n	8001e68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	6939      	ldr	r1, [r7, #16]
 8001e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80ac 	beq.w	8002002 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <HAL_GPIO_Init+0x330>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eae:	4a5e      	ldr	r2, [pc, #376]	@ (8002028 <HAL_GPIO_Init+0x330>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002028 <HAL_GPIO_Init+0x330>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec2:	4a5a      	ldr	r2, [pc, #360]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x242>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8002030 <HAL_GPIO_Init+0x338>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x23e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8002034 <HAL_GPIO_Init+0x33c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x23a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	@ (8002038 <HAL_GPIO_Init+0x340>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x236>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	@ (800203c <HAL_GPIO_Init+0x344>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x232>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	@ (8002040 <HAL_GPIO_Init+0x348>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x22e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	@ (8002044 <HAL_GPIO_Init+0x34c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x22a>
 8001f1e:	2306      	movs	r3, #6
 8001f20:	e00c      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e00a      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f26:	2305      	movs	r3, #5
 8001f28:	e008      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e004      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	f002 0203 	and.w	r2, r2, #3
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	4093      	lsls	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4c:	4937      	ldr	r1, [pc, #220]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002048 <HAL_GPIO_Init+0x350>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f7e:	4a32      	ldr	r2, [pc, #200]	@ (8002048 <HAL_GPIO_Init+0x350>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f84:	4b30      	ldr	r3, [pc, #192]	@ (8002048 <HAL_GPIO_Init+0x350>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fa8:	4a27      	ldr	r2, [pc, #156]	@ (8002048 <HAL_GPIO_Init+0x350>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fae:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <HAL_GPIO_Init+0x350>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002048 <HAL_GPIO_Init+0x350>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_GPIO_Init+0x350>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ffc:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <HAL_GPIO_Init+0x350>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	f47f ae78 	bne.w	8001d08 <HAL_GPIO_Init+0x10>
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	48000c00 	.word	0x48000c00
 800203c:	48001000 	.word	0x48001000
 8002040:	48001400 	.word	0x48001400
 8002044:	48001800 	.word	0x48001800
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002068:	e002      	b.n	8002070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <HAL_PWREx_GetVoltageRange+0x18>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40007000 	.word	0x40007000

08002098 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020a6:	d130      	bne.n	800210a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a8:	4b23      	ldr	r3, [pc, #140]	@ (8002138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020b4:	d038      	beq.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b6:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020be:	4a1e      	ldr	r2, [pc, #120]	@ (8002138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c6:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2232      	movs	r2, #50	@ 0x32
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002140 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9b      	lsrs	r3, r3, #18
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020dc:	e002      	b.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f0:	d102      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f2      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002104:	d110      	bne.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e00f      	b.n	800212a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800210a:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002116:	d007      	beq.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002118:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002120:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002122:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002126:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40007000 	.word	0x40007000
 800213c:	20000178 	.word	0x20000178
 8002140:	431bde83 	.word	0x431bde83

08002144 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e3ca      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002156:	4b97      	ldr	r3, [pc, #604]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002160:	4b94      	ldr	r3, [pc, #592]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80e4 	beq.w	8002340 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_RCC_OscConfig+0x4a>
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b0c      	cmp	r3, #12
 8002182:	f040 808b 	bne.w	800229c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b01      	cmp	r3, #1
 800218a:	f040 8087 	bne.w	800229c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800218e:	4b89      	ldr	r3, [pc, #548]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x62>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e3a2      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	4b82      	ldr	r3, [pc, #520]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <HAL_RCC_OscConfig+0x7c>
 80021b6:	4b7f      	ldr	r3, [pc, #508]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021be:	e005      	b.n	80021cc <HAL_RCC_OscConfig+0x88>
 80021c0:	4b7c      	ldr	r3, [pc, #496]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d223      	bcs.n	8002218 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fd1d 	bl	8002c14 <RCC_SetFlashLatencyFromMSIRange>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e383      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e4:	4b73      	ldr	r3, [pc, #460]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a72      	ldr	r2, [pc, #456]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b70      	ldr	r3, [pc, #448]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	496d      	ldr	r1, [pc, #436]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002202:	4b6c      	ldr	r3, [pc, #432]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4968      	ldr	r1, [pc, #416]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
 8002216:	e025      	b.n	8002264 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002218:	4b66      	ldr	r3, [pc, #408]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a65      	ldr	r2, [pc, #404]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b63      	ldr	r3, [pc, #396]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4960      	ldr	r1, [pc, #384]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002236:	4b5f      	ldr	r3, [pc, #380]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	495b      	ldr	r1, [pc, #364]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fcdd 	bl	8002c14 <RCC_SetFlashLatencyFromMSIRange>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e343      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002264:	f000 fc4a 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b52      	ldr	r3, [pc, #328]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	4950      	ldr	r1, [pc, #320]	@ (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	4a4e      	ldr	r2, [pc, #312]	@ (80023bc <HAL_RCC_OscConfig+0x278>)
 8002282:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002284:	4b4e      	ldr	r3, [pc, #312]	@ (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fba3 	bl	80019d4 <HAL_InitTick>
 800228e:	4603      	mov	r3, r0
 8002290:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d052      	beq.n	800233e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	e327      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d032      	beq.n	800230a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022a4:	4b43      	ldr	r3, [pc, #268]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a42      	ldr	r2, [pc, #264]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fbe0 	bl	8001a74 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b8:	f7ff fbdc 	bl	8001a74 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e310      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ca:	4b3a      	ldr	r3, [pc, #232]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d6:	4b37      	ldr	r3, [pc, #220]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a36      	ldr	r2, [pc, #216]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b34      	ldr	r3, [pc, #208]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4931      	ldr	r1, [pc, #196]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f4:	4b2f      	ldr	r3, [pc, #188]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	492c      	ldr	r1, [pc, #176]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
 8002308:	e01a      	b.n	8002340 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800230a:	4b2a      	ldr	r3, [pc, #168]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a29      	ldr	r2, [pc, #164]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002316:	f7ff fbad 	bl	8001a74 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800231e:	f7ff fba9 	bl	8001a74 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e2dd      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002330:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x1da>
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800233e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d074      	beq.n	8002436 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b08      	cmp	r3, #8
 8002350:	d005      	beq.n	800235e <HAL_RCC_OscConfig+0x21a>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d10e      	bne.n	8002376 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d10b      	bne.n	8002376 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d064      	beq.n	8002434 <HAL_RCC_OscConfig+0x2f0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d160      	bne.n	8002434 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e2ba      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x24a>
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0b      	ldr	r2, [pc, #44]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e026      	b.n	80023dc <HAL_RCC_OscConfig+0x298>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002396:	d115      	bne.n	80023c4 <HAL_RCC_OscConfig+0x280>
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a05      	ldr	r2, [pc, #20]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a02      	ldr	r2, [pc, #8]	@ (80023b4 <HAL_RCC_OscConfig+0x270>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x298>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08004618 	.word	0x08004618
 80023bc:	20000178 	.word	0x20000178
 80023c0:	2000017c 	.word	0x2000017c
 80023c4:	4ba0      	ldr	r3, [pc, #640]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a9f      	ldr	r2, [pc, #636]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b9d      	ldr	r3, [pc, #628]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a9c      	ldr	r2, [pc, #624]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7ff fb46 	bl	8001a74 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7ff fb42 	bl	8001a74 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e276      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fe:	4b92      	ldr	r3, [pc, #584]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x2a8>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7ff fb32 	bl	8001a74 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff fb2e 	bl	8001a74 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	@ 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e262      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002426:	4b88      	ldr	r3, [pc, #544]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x2d0>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d060      	beq.n	8002504 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d005      	beq.n	8002454 <HAL_RCC_OscConfig+0x310>
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d119      	bne.n	8002482 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d116      	bne.n	8002482 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002454:	4b7c      	ldr	r3, [pc, #496]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_OscConfig+0x328>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e23f      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246c:	4b76      	ldr	r3, [pc, #472]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	4973      	ldr	r1, [pc, #460]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002480:	e040      	b.n	8002504 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d023      	beq.n	80024d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248a:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6e      	ldr	r2, [pc, #440]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7ff faed 	bl	8001a74 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff fae9 	bl	8001a74 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e21d      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b0:	4b65      	ldr	r3, [pc, #404]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b62      	ldr	r3, [pc, #392]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	495f      	ldr	r1, [pc, #380]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e018      	b.n	8002504 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80024d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7ff fac9 	bl	8001a74 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7ff fac5 	bl	8001a74 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1f9      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f8:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d03c      	beq.n	800258a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01c      	beq.n	8002552 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002518:	4b4b      	ldr	r3, [pc, #300]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800251a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800251e:	4a4a      	ldr	r2, [pc, #296]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7ff faa4 	bl	8001a74 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7ff faa0 	bl	8001a74 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1d4      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002542:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ef      	beq.n	8002530 <HAL_RCC_OscConfig+0x3ec>
 8002550:	e01b      	b.n	800258a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002552:	4b3d      	ldr	r3, [pc, #244]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002558:	4a3b      	ldr	r2, [pc, #236]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7ff fa87 	bl	8001a74 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256a:	f7ff fa83 	bl	8001a74 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1b7      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800257c:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ef      	bne.n	800256a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80a6 	beq.w	80026e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002598:	2300      	movs	r3, #0
 800259a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800259c:	4b2a      	ldr	r3, [pc, #168]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	4a26      	ldr	r2, [pc, #152]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025b4:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c0:	2301      	movs	r3, #1
 80025c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c4:	4b21      	ldr	r3, [pc, #132]	@ (800264c <HAL_RCC_OscConfig+0x508>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d118      	bne.n	8002602 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d0:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <HAL_RCC_OscConfig+0x508>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <HAL_RCC_OscConfig+0x508>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025dc:	f7ff fa4a 	bl	8001a74 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7ff fa46 	bl	8001a74 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e17a      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <HAL_RCC_OscConfig+0x508>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d108      	bne.n	800261c <HAL_RCC_OscConfig+0x4d8>
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002610:	4a0d      	ldr	r2, [pc, #52]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800261a:	e029      	b.n	8002670 <HAL_RCC_OscConfig+0x52c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b05      	cmp	r3, #5
 8002622:	d115      	bne.n	8002650 <HAL_RCC_OscConfig+0x50c>
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262a:	4a07      	ldr	r2, [pc, #28]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002634:	4b04      	ldr	r3, [pc, #16]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263a:	4a03      	ldr	r2, [pc, #12]	@ (8002648 <HAL_RCC_OscConfig+0x504>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x52c>
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	4b9c      	ldr	r3, [pc, #624]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002656:	4a9b      	ldr	r2, [pc, #620]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002660:	4b98      	ldr	r3, [pc, #608]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002666:	4a97      	ldr	r2, [pc, #604]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d016      	beq.n	80026a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff f9fc 	bl	8001a74 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267e:	e00a      	b.n	8002696 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7ff f9f8 	bl	8001a74 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e12a      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002696:	4b8b      	ldr	r3, [pc, #556]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ed      	beq.n	8002680 <HAL_RCC_OscConfig+0x53c>
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7ff f9e5 	bl	8001a74 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7ff f9e1 	bl	8001a74 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e113      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c4:	4b7f      	ldr	r3, [pc, #508]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ed      	bne.n	80026ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d2:	7ffb      	ldrb	r3, [r7, #31]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d8:	4b7a      	ldr	r3, [pc, #488]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	4a79      	ldr	r2, [pc, #484]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 80026de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80fe 	beq.w	80028ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	f040 80d0 	bne.w	8002898 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026f8:	4b72      	ldr	r3, [pc, #456]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0203 	and.w	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	429a      	cmp	r2, r3
 800270a:	d130      	bne.n	800276e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	3b01      	subs	r3, #1
 8002718:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d127      	bne.n	800276e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002728:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d11f      	bne.n	800276e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002738:	2a07      	cmp	r2, #7
 800273a:	bf14      	ite	ne
 800273c:	2201      	movne	r2, #1
 800273e:	2200      	moveq	r2, #0
 8002740:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002742:	4293      	cmp	r3, r2
 8002744:	d113      	bne.n	800276e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	3b01      	subs	r3, #1
 8002754:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d109      	bne.n	800276e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	3b01      	subs	r3, #1
 8002768:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d06e      	beq.n	800284c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d069      	beq.n	8002848 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002774:	4b53      	ldr	r3, [pc, #332]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002780:	4b50      	ldr	r3, [pc, #320]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0ad      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002790:	4b4c      	ldr	r3, [pc, #304]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a4b      	ldr	r2, [pc, #300]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800279c:	f7ff f96a 	bl	8001a74 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7ff f966 	bl	8001a74 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e09a      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b6:	4b43      	ldr	r3, [pc, #268]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c2:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	4b40      	ldr	r3, [pc, #256]	@ (80028c8 <HAL_RCC_OscConfig+0x784>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027d2:	3a01      	subs	r2, #1
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027dc:	0212      	lsls	r2, r2, #8
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027e4:	0852      	lsrs	r2, r2, #1
 80027e6:	3a01      	subs	r2, #1
 80027e8:	0552      	lsls	r2, r2, #21
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027f0:	0852      	lsrs	r2, r2, #1
 80027f2:	3a01      	subs	r2, #1
 80027f4:	0652      	lsls	r2, r2, #25
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027fc:	0912      	lsrs	r2, r2, #4
 80027fe:	0452      	lsls	r2, r2, #17
 8002800:	430a      	orrs	r2, r1
 8002802:	4930      	ldr	r1, [pc, #192]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002804:	4313      	orrs	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002808:	4b2e      	ldr	r3, [pc, #184]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2d      	ldr	r2, [pc, #180]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800280e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002812:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002814:	4b2b      	ldr	r3, [pc, #172]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a2a      	ldr	r2, [pc, #168]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800281a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800281e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002820:	f7ff f928 	bl	8001a74 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7ff f924 	bl	8001a74 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e058      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283a:	4b22      	ldr	r3, [pc, #136]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002846:	e050      	b.n	80028ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e04f      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d148      	bne.n	80028ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002864:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a16      	ldr	r2, [pc, #88]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800286e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002870:	f7ff f900 	bl	8001a74 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7ff f8fc 	bl	8001a74 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e030      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x734>
 8002896:	e028      	b.n	80028ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d023      	beq.n	80028e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <HAL_RCC_OscConfig+0x780>)
 80028a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7ff f8e3 	bl	8001a74 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b0:	e00c      	b.n	80028cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7ff f8df 	bl	8001a74 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d905      	bls.n	80028cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e013      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_OscConfig+0x7b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ec      	bne.n	80028b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_OscConfig+0x7b0>)
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4905      	ldr	r1, [pc, #20]	@ (80028f4 <HAL_RCC_OscConfig+0x7b0>)
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_OscConfig+0x7b4>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	60cb      	str	r3, [r1, #12]
 80028e4:	e001      	b.n	80028ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	feeefffc 	.word	0xfeeefffc

080028fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0e7      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b75      	ldr	r3, [pc, #468]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1ec>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d910      	bls.n	8002940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b72      	ldr	r3, [pc, #456]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1ec>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4970      	ldr	r1, [pc, #448]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1ec>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1ec>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0cf      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d010      	beq.n	800296e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	4b66      	ldr	r3, [pc, #408]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002958:	429a      	cmp	r2, r3
 800295a:	d908      	bls.n	800296e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b63      	ldr	r3, [pc, #396]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4960      	ldr	r1, [pc, #384]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d04c      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	4b5a      	ldr	r3, [pc, #360]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d121      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0a6      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800299a:	4b54      	ldr	r3, [pc, #336]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d115      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e09a      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b2:	4b4e      	ldr	r3, [pc, #312]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e08e      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c2:	4b4a      	ldr	r3, [pc, #296]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e086      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029d2:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f023 0203 	bic.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4943      	ldr	r1, [pc, #268]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e4:	f7ff f846 	bl	8001a74 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7ff f842 	bl	8001a74 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e06e      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 020c 	and.w	r2, r3, #12
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1eb      	bne.n	80029ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	4b31      	ldr	r3, [pc, #196]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d208      	bcs.n	8002a42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b2e      	ldr	r3, [pc, #184]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	492b      	ldr	r1, [pc, #172]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a42:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d210      	bcs.n	8002a72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a50:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 0207 	bic.w	r2, r3, #7
 8002a58:	4923      	ldr	r1, [pc, #140]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a60:	4b21      	ldr	r3, [pc, #132]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e036      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4918      	ldr	r1, [pc, #96]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9c:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4910      	ldr	r1, [pc, #64]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ab0:	f000 f824 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	490b      	ldr	r1, [pc, #44]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8002acc:	4a09      	ldr	r2, [pc, #36]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ace:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_ClockConfig+0x1fc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe ff7d 	bl	80019d4 <HAL_InitTick>
 8002ada:	4603      	mov	r3, r0
 8002adc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ade:	7afb      	ldrb	r3, [r7, #11]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08004618 	.word	0x08004618
 8002af4:	20000178 	.word	0x20000178
 8002af8:	2000017c 	.word	0x2000017c

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b14:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	d121      	bne.n	8002b6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d11e      	bne.n	8002b6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b30:	4b34      	ldr	r3, [pc, #208]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b3c:	4b31      	ldr	r3, [pc, #196]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e005      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b58:	4a2b      	ldr	r2, [pc, #172]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10d      	bne.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b74:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	e004      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b80:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d134      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d003      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ba0:	e005      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ba4:	617b      	str	r3, [r7, #20]
      break;
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002baa:	617b      	str	r3, [r7, #20]
      break;
 8002bac:	e002      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	617b      	str	r3, [r7, #20]
      break;
 8002bb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb4:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	fb03 f202 	mul.w	r2, r3, r2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bda:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	0e5b      	lsrs	r3, r3, #25
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	3301      	adds	r3, #1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	@ 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	08004628 	.word	0x08004628
 8002c0c:	00f42400 	.word	0x00f42400
 8002c10:	007a1200 	.word	0x007a1200

08002c14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c2c:	f7ff fa26 	bl	800207c <HAL_PWREx_GetVoltageRange>
 8002c30:	6178      	str	r0, [r7, #20]
 8002c32:	e014      	b.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	4a24      	ldr	r2, [pc, #144]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c40:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c4c:	f7ff fa16 	bl	800207c <HAL_PWREx_GetVoltageRange>
 8002c50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	4a1d      	ldr	r2, [pc, #116]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c64:	d10b      	bne.n	8002c7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b80      	cmp	r3, #128	@ 0x80
 8002c6a:	d919      	bls.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c70:	d902      	bls.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c72:	2302      	movs	r3, #2
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	e013      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c78:	2301      	movs	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e010      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b80      	cmp	r3, #128	@ 0x80
 8002c82:	d902      	bls.n	8002c8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c84:	2303      	movs	r3, #3
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	e00a      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b80      	cmp	r3, #128	@ 0x80
 8002c8e:	d102      	bne.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c90:	2302      	movs	r3, #2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e004      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b70      	cmp	r3, #112	@ 0x70
 8002c9a:	d101      	bne.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 0207 	bic.w	r2, r3, #7
 8002ca8:	4909      	ldr	r1, [pc, #36]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb0:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40022000 	.word	0x40022000

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e049      	b.n	8002d7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe fcf2 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 fa9e 	bl	8003254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d001      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e04f      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a23      	ldr	r2, [pc, #140]	@ (8002e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc6:	d018      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d115      	bne.n	8002e26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d015      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0xb4>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e12:	d011      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	e008      	b.n	8002e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e000      	b.n	8002e3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	40013400 	.word	0x40013400
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	00010007 	.word	0x00010007

08002e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d020      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0202 	mvn.w	r2, #2
 8002e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9b2 	bl	8003218 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9a4 	bl	8003204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f9b5 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01b      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0204 	mvn.w	r2, #4
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f98c 	bl	8003218 <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f97e 	bl	8003204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f98f 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0208 	mvn.w	r2, #8
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f966 	bl	8003218 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f958 	bl	8003204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f969 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f940 	bl	8003218 <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f932 	bl	8003204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f943 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0201 	mvn.w	r2, #1
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd fafa 	bl	80005c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00c      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fafd 	bl	80035f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 faf5 	bl	800360c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800303e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f8fd 	bl	8003240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0220 	mvn.w	r2, #32
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fabd 	bl	80035e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_TIM_ConfigClockSource+0x1c>
 800308a:	2302      	movs	r3, #2
 800308c:	e0b6      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x18a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2202      	movs	r2, #2
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ca:	d03e      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xd8>
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d0:	f200 8087 	bhi.w	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d8:	f000 8086 	beq.w	80031e8 <HAL_TIM_ConfigClockSource+0x176>
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e0:	d87f      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030e2:	2b70      	cmp	r3, #112	@ 0x70
 80030e4:	d01a      	beq.n	800311c <HAL_TIM_ConfigClockSource+0xaa>
 80030e6:	2b70      	cmp	r3, #112	@ 0x70
 80030e8:	d87b      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030ea:	2b60      	cmp	r3, #96	@ 0x60
 80030ec:	d050      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0x11e>
 80030ee:	2b60      	cmp	r3, #96	@ 0x60
 80030f0:	d877      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030f2:	2b50      	cmp	r3, #80	@ 0x50
 80030f4:	d03c      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0xfe>
 80030f6:	2b50      	cmp	r3, #80	@ 0x50
 80030f8:	d873      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d058      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0x13e>
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	d86f      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 8003102:	2b30      	cmp	r3, #48	@ 0x30
 8003104:	d064      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15e>
 8003106:	2b30      	cmp	r3, #48	@ 0x30
 8003108:	d86b      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 800310a:	2b20      	cmp	r3, #32
 800310c:	d060      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15e>
 800310e:	2b20      	cmp	r3, #32
 8003110:	d867      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d05c      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15e>
 8003116:	2b10      	cmp	r3, #16
 8003118:	d05a      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15e>
 800311a:	e062      	b.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	f000 f9b2 	bl	8003494 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800313e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	609a      	str	r2, [r3, #8]
      break;
 8003148:	e04f      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	f000 f99b 	bl	8003494 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800316c:	609a      	str	r2, [r3, #8]
      break;
 800316e:	e03c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317c:	461a      	mov	r2, r3
 800317e:	f000 f90f 	bl	80033a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2150      	movs	r1, #80	@ 0x50
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f968 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 800318e:	e02c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800319c:	461a      	mov	r2, r3
 800319e:	f000 f92e 	bl	80033fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2160      	movs	r1, #96	@ 0x60
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f958 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 80031ae:	e01c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031bc:	461a      	mov	r2, r3
 80031be:	f000 f8ef 	bl	80033a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2140      	movs	r1, #64	@ 0x40
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f948 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 80031ce:	e00c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 f93f 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 80031e0:	e003      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      break;
 80031e6:	e000      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a46      	ldr	r2, [pc, #280]	@ (8003380 <TIM_Base_SetConfig+0x12c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003272:	d00f      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a43      	ldr	r2, [pc, #268]	@ (8003384 <TIM_Base_SetConfig+0x130>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00b      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a42      	ldr	r2, [pc, #264]	@ (8003388 <TIM_Base_SetConfig+0x134>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d007      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a41      	ldr	r2, [pc, #260]	@ (800338c <TIM_Base_SetConfig+0x138>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a40      	ldr	r2, [pc, #256]	@ (8003390 <TIM_Base_SetConfig+0x13c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a35      	ldr	r2, [pc, #212]	@ (8003380 <TIM_Base_SetConfig+0x12c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01f      	beq.n	80032ee <TIM_Base_SetConfig+0x9a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d01b      	beq.n	80032ee <TIM_Base_SetConfig+0x9a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a32      	ldr	r2, [pc, #200]	@ (8003384 <TIM_Base_SetConfig+0x130>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d017      	beq.n	80032ee <TIM_Base_SetConfig+0x9a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a31      	ldr	r2, [pc, #196]	@ (8003388 <TIM_Base_SetConfig+0x134>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <TIM_Base_SetConfig+0x9a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a30      	ldr	r2, [pc, #192]	@ (800338c <TIM_Base_SetConfig+0x138>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00f      	beq.n	80032ee <TIM_Base_SetConfig+0x9a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003390 <TIM_Base_SetConfig+0x13c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x9a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003394 <TIM_Base_SetConfig+0x140>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x9a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003398 <TIM_Base_SetConfig+0x144>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x9a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	@ (800339c <TIM_Base_SetConfig+0x148>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a16      	ldr	r2, [pc, #88]	@ (8003380 <TIM_Base_SetConfig+0x12c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00f      	beq.n	800334c <TIM_Base_SetConfig+0xf8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <TIM_Base_SetConfig+0x13c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00b      	beq.n	800334c <TIM_Base_SetConfig+0xf8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <TIM_Base_SetConfig+0x140>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d007      	beq.n	800334c <TIM_Base_SetConfig+0xf8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a16      	ldr	r2, [pc, #88]	@ (8003398 <TIM_Base_SetConfig+0x144>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d003      	beq.n	800334c <TIM_Base_SetConfig+0xf8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a15      	ldr	r2, [pc, #84]	@ (800339c <TIM_Base_SetConfig+0x148>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d103      	bne.n	8003354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f023 0201 	bic.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	611a      	str	r2, [r3, #16]
  }
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800
 800338c:	40000c00 	.word	0x40000c00
 8003390:	40013400 	.word	0x40013400
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800

080033a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f023 0201 	bic.w	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f023 030a 	bic.w	r3, r3, #10
 80033dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	621a      	str	r2, [r3, #32]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fe:	b480      	push	{r7}
 8003400:	b087      	sub	sp, #28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f023 0210 	bic.w	r2, r3, #16
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	031b      	lsls	r3, r3, #12
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800343a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	f043 0307 	orr.w	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	609a      	str	r2, [r3, #8]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	021a      	lsls	r2, r3, #8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e068      	b.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d108      	bne.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003526:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003538:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01d      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355e:	d018      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1b      	ldr	r2, [pc, #108]	@ (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1a      	ldr	r2, [pc, #104]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a13      	ldr	r2, [pc, #76]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a14      	ldr	r2, [pc, #80]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10c      	bne.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	40013400 	.word	0x40013400
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40014000 	.word	0x40014000

080035e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <rand>:
 8003620:	4b16      	ldr	r3, [pc, #88]	@ (800367c <rand+0x5c>)
 8003622:	b510      	push	{r4, lr}
 8003624:	681c      	ldr	r4, [r3, #0]
 8003626:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003628:	b9b3      	cbnz	r3, 8003658 <rand+0x38>
 800362a:	2018      	movs	r0, #24
 800362c:	f000 f94c 	bl	80038c8 <malloc>
 8003630:	4602      	mov	r2, r0
 8003632:	6320      	str	r0, [r4, #48]	@ 0x30
 8003634:	b920      	cbnz	r0, 8003640 <rand+0x20>
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <rand+0x60>)
 8003638:	4812      	ldr	r0, [pc, #72]	@ (8003684 <rand+0x64>)
 800363a:	2152      	movs	r1, #82	@ 0x52
 800363c:	f000 f926 	bl	800388c <__assert_func>
 8003640:	4911      	ldr	r1, [pc, #68]	@ (8003688 <rand+0x68>)
 8003642:	4b12      	ldr	r3, [pc, #72]	@ (800368c <rand+0x6c>)
 8003644:	e9c0 1300 	strd	r1, r3, [r0]
 8003648:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <rand+0x70>)
 800364a:	6083      	str	r3, [r0, #8]
 800364c:	230b      	movs	r3, #11
 800364e:	8183      	strh	r3, [r0, #12]
 8003650:	2100      	movs	r1, #0
 8003652:	2001      	movs	r0, #1
 8003654:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003658:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800365a:	480e      	ldr	r0, [pc, #56]	@ (8003694 <rand+0x74>)
 800365c:	690b      	ldr	r3, [r1, #16]
 800365e:	694c      	ldr	r4, [r1, #20]
 8003660:	4a0d      	ldr	r2, [pc, #52]	@ (8003698 <rand+0x78>)
 8003662:	4358      	muls	r0, r3
 8003664:	fb02 0004 	mla	r0, r2, r4, r0
 8003668:	fba3 3202 	umull	r3, r2, r3, r2
 800366c:	3301      	adds	r3, #1
 800366e:	eb40 0002 	adc.w	r0, r0, r2
 8003672:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003676:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800367a:	bd10      	pop	{r4, pc}
 800367c:	20000190 	.word	0x20000190
 8003680:	08004658 	.word	0x08004658
 8003684:	0800466f 	.word	0x0800466f
 8003688:	abcd330e 	.word	0xabcd330e
 800368c:	e66d1234 	.word	0xe66d1234
 8003690:	0005deec 	.word	0x0005deec
 8003694:	5851f42d 	.word	0x5851f42d
 8003698:	4c957f2d 	.word	0x4c957f2d

0800369c <std>:
 800369c:	2300      	movs	r3, #0
 800369e:	b510      	push	{r4, lr}
 80036a0:	4604      	mov	r4, r0
 80036a2:	e9c0 3300 	strd	r3, r3, [r0]
 80036a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036aa:	6083      	str	r3, [r0, #8]
 80036ac:	8181      	strh	r1, [r0, #12]
 80036ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80036b0:	81c2      	strh	r2, [r0, #14]
 80036b2:	6183      	str	r3, [r0, #24]
 80036b4:	4619      	mov	r1, r3
 80036b6:	2208      	movs	r2, #8
 80036b8:	305c      	adds	r0, #92	@ 0x5c
 80036ba:	f000 f8b1 	bl	8003820 <memset>
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <std+0x58>)
 80036c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <std+0x5c>)
 80036c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <std+0x60>)
 80036c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <std+0x64>)
 80036cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80036ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003704 <std+0x68>)
 80036d0:	6224      	str	r4, [r4, #32]
 80036d2:	429c      	cmp	r4, r3
 80036d4:	d006      	beq.n	80036e4 <std+0x48>
 80036d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036da:	4294      	cmp	r4, r2
 80036dc:	d002      	beq.n	80036e4 <std+0x48>
 80036de:	33d0      	adds	r3, #208	@ 0xd0
 80036e0:	429c      	cmp	r4, r3
 80036e2:	d105      	bne.n	80036f0 <std+0x54>
 80036e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ec:	f000 b8ca 	b.w	8003884 <__retarget_lock_init_recursive>
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	bf00      	nop
 80036f4:	08003b8d 	.word	0x08003b8d
 80036f8:	08003baf 	.word	0x08003baf
 80036fc:	08003be7 	.word	0x08003be7
 8003700:	08003c0b 	.word	0x08003c0b
 8003704:	20000280 	.word	0x20000280

08003708 <stdio_exit_handler>:
 8003708:	4a02      	ldr	r2, [pc, #8]	@ (8003714 <stdio_exit_handler+0xc>)
 800370a:	4903      	ldr	r1, [pc, #12]	@ (8003718 <stdio_exit_handler+0x10>)
 800370c:	4803      	ldr	r0, [pc, #12]	@ (800371c <stdio_exit_handler+0x14>)
 800370e:	f000 b869 	b.w	80037e4 <_fwalk_sglue>
 8003712:	bf00      	nop
 8003714:	20000184 	.word	0x20000184
 8003718:	08003b25 	.word	0x08003b25
 800371c:	20000194 	.word	0x20000194

08003720 <cleanup_stdio>:
 8003720:	6841      	ldr	r1, [r0, #4]
 8003722:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <cleanup_stdio+0x34>)
 8003724:	4299      	cmp	r1, r3
 8003726:	b510      	push	{r4, lr}
 8003728:	4604      	mov	r4, r0
 800372a:	d001      	beq.n	8003730 <cleanup_stdio+0x10>
 800372c:	f000 f9fa 	bl	8003b24 <_fflush_r>
 8003730:	68a1      	ldr	r1, [r4, #8]
 8003732:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <cleanup_stdio+0x38>)
 8003734:	4299      	cmp	r1, r3
 8003736:	d002      	beq.n	800373e <cleanup_stdio+0x1e>
 8003738:	4620      	mov	r0, r4
 800373a:	f000 f9f3 	bl	8003b24 <_fflush_r>
 800373e:	68e1      	ldr	r1, [r4, #12]
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <cleanup_stdio+0x3c>)
 8003742:	4299      	cmp	r1, r3
 8003744:	d004      	beq.n	8003750 <cleanup_stdio+0x30>
 8003746:	4620      	mov	r0, r4
 8003748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800374c:	f000 b9ea 	b.w	8003b24 <_fflush_r>
 8003750:	bd10      	pop	{r4, pc}
 8003752:	bf00      	nop
 8003754:	20000280 	.word	0x20000280
 8003758:	200002e8 	.word	0x200002e8
 800375c:	20000350 	.word	0x20000350

08003760 <global_stdio_init.part.0>:
 8003760:	b510      	push	{r4, lr}
 8003762:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <global_stdio_init.part.0+0x30>)
 8003764:	4c0b      	ldr	r4, [pc, #44]	@ (8003794 <global_stdio_init.part.0+0x34>)
 8003766:	4a0c      	ldr	r2, [pc, #48]	@ (8003798 <global_stdio_init.part.0+0x38>)
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	4620      	mov	r0, r4
 800376c:	2200      	movs	r2, #0
 800376e:	2104      	movs	r1, #4
 8003770:	f7ff ff94 	bl	800369c <std>
 8003774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003778:	2201      	movs	r2, #1
 800377a:	2109      	movs	r1, #9
 800377c:	f7ff ff8e 	bl	800369c <std>
 8003780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003784:	2202      	movs	r2, #2
 8003786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800378a:	2112      	movs	r1, #18
 800378c:	f7ff bf86 	b.w	800369c <std>
 8003790:	200003b8 	.word	0x200003b8
 8003794:	20000280 	.word	0x20000280
 8003798:	08003709 	.word	0x08003709

0800379c <__sfp_lock_acquire>:
 800379c:	4801      	ldr	r0, [pc, #4]	@ (80037a4 <__sfp_lock_acquire+0x8>)
 800379e:	f000 b872 	b.w	8003886 <__retarget_lock_acquire_recursive>
 80037a2:	bf00      	nop
 80037a4:	200003bd 	.word	0x200003bd

080037a8 <__sfp_lock_release>:
 80037a8:	4801      	ldr	r0, [pc, #4]	@ (80037b0 <__sfp_lock_release+0x8>)
 80037aa:	f000 b86d 	b.w	8003888 <__retarget_lock_release_recursive>
 80037ae:	bf00      	nop
 80037b0:	200003bd 	.word	0x200003bd

080037b4 <__sinit>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	4604      	mov	r4, r0
 80037b8:	f7ff fff0 	bl	800379c <__sfp_lock_acquire>
 80037bc:	6a23      	ldr	r3, [r4, #32]
 80037be:	b11b      	cbz	r3, 80037c8 <__sinit+0x14>
 80037c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c4:	f7ff bff0 	b.w	80037a8 <__sfp_lock_release>
 80037c8:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <__sinit+0x28>)
 80037ca:	6223      	str	r3, [r4, #32]
 80037cc:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <__sinit+0x2c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f5      	bne.n	80037c0 <__sinit+0xc>
 80037d4:	f7ff ffc4 	bl	8003760 <global_stdio_init.part.0>
 80037d8:	e7f2      	b.n	80037c0 <__sinit+0xc>
 80037da:	bf00      	nop
 80037dc:	08003721 	.word	0x08003721
 80037e0:	200003b8 	.word	0x200003b8

080037e4 <_fwalk_sglue>:
 80037e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e8:	4607      	mov	r7, r0
 80037ea:	4688      	mov	r8, r1
 80037ec:	4614      	mov	r4, r2
 80037ee:	2600      	movs	r6, #0
 80037f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037f4:	f1b9 0901 	subs.w	r9, r9, #1
 80037f8:	d505      	bpl.n	8003806 <_fwalk_sglue+0x22>
 80037fa:	6824      	ldr	r4, [r4, #0]
 80037fc:	2c00      	cmp	r4, #0
 80037fe:	d1f7      	bne.n	80037f0 <_fwalk_sglue+0xc>
 8003800:	4630      	mov	r0, r6
 8003802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003806:	89ab      	ldrh	r3, [r5, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d907      	bls.n	800381c <_fwalk_sglue+0x38>
 800380c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003810:	3301      	adds	r3, #1
 8003812:	d003      	beq.n	800381c <_fwalk_sglue+0x38>
 8003814:	4629      	mov	r1, r5
 8003816:	4638      	mov	r0, r7
 8003818:	47c0      	blx	r8
 800381a:	4306      	orrs	r6, r0
 800381c:	3568      	adds	r5, #104	@ 0x68
 800381e:	e7e9      	b.n	80037f4 <_fwalk_sglue+0x10>

08003820 <memset>:
 8003820:	4402      	add	r2, r0
 8003822:	4603      	mov	r3, r0
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	f803 1b01 	strb.w	r1, [r3], #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <__errno>:
 8003830:	4b01      	ldr	r3, [pc, #4]	@ (8003838 <__errno+0x8>)
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000190 	.word	0x20000190

0800383c <__libc_init_array>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4d0d      	ldr	r5, [pc, #52]	@ (8003874 <__libc_init_array+0x38>)
 8003840:	4c0d      	ldr	r4, [pc, #52]	@ (8003878 <__libc_init_array+0x3c>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	2600      	movs	r6, #0
 8003848:	42a6      	cmp	r6, r4
 800384a:	d109      	bne.n	8003860 <__libc_init_array+0x24>
 800384c:	4d0b      	ldr	r5, [pc, #44]	@ (800387c <__libc_init_array+0x40>)
 800384e:	4c0c      	ldr	r4, [pc, #48]	@ (8003880 <__libc_init_array+0x44>)
 8003850:	f000 fec4 	bl	80045dc <_init>
 8003854:	1b64      	subs	r4, r4, r5
 8003856:	10a4      	asrs	r4, r4, #2
 8003858:	2600      	movs	r6, #0
 800385a:	42a6      	cmp	r6, r4
 800385c:	d105      	bne.n	800386a <__libc_init_array+0x2e>
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	f855 3b04 	ldr.w	r3, [r5], #4
 8003864:	4798      	blx	r3
 8003866:	3601      	adds	r6, #1
 8003868:	e7ee      	b.n	8003848 <__libc_init_array+0xc>
 800386a:	f855 3b04 	ldr.w	r3, [r5], #4
 800386e:	4798      	blx	r3
 8003870:	3601      	adds	r6, #1
 8003872:	e7f2      	b.n	800385a <__libc_init_array+0x1e>
 8003874:	08004740 	.word	0x08004740
 8003878:	08004740 	.word	0x08004740
 800387c:	08004740 	.word	0x08004740
 8003880:	08004744 	.word	0x08004744

08003884 <__retarget_lock_init_recursive>:
 8003884:	4770      	bx	lr

08003886 <__retarget_lock_acquire_recursive>:
 8003886:	4770      	bx	lr

08003888 <__retarget_lock_release_recursive>:
 8003888:	4770      	bx	lr
	...

0800388c <__assert_func>:
 800388c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800388e:	4614      	mov	r4, r2
 8003890:	461a      	mov	r2, r3
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <__assert_func+0x2c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4605      	mov	r5, r0
 8003898:	68d8      	ldr	r0, [r3, #12]
 800389a:	b14c      	cbz	r4, 80038b0 <__assert_func+0x24>
 800389c:	4b07      	ldr	r3, [pc, #28]	@ (80038bc <__assert_func+0x30>)
 800389e:	9100      	str	r1, [sp, #0]
 80038a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80038a4:	4906      	ldr	r1, [pc, #24]	@ (80038c0 <__assert_func+0x34>)
 80038a6:	462b      	mov	r3, r5
 80038a8:	f000 f9b4 	bl	8003c14 <fiprintf>
 80038ac:	f000 fa1a 	bl	8003ce4 <abort>
 80038b0:	4b04      	ldr	r3, [pc, #16]	@ (80038c4 <__assert_func+0x38>)
 80038b2:	461c      	mov	r4, r3
 80038b4:	e7f3      	b.n	800389e <__assert_func+0x12>
 80038b6:	bf00      	nop
 80038b8:	20000190 	.word	0x20000190
 80038bc:	080046c7 	.word	0x080046c7
 80038c0:	080046d4 	.word	0x080046d4
 80038c4:	08004702 	.word	0x08004702

080038c8 <malloc>:
 80038c8:	4b02      	ldr	r3, [pc, #8]	@ (80038d4 <malloc+0xc>)
 80038ca:	4601      	mov	r1, r0
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	f000 b825 	b.w	800391c <_malloc_r>
 80038d2:	bf00      	nop
 80038d4:	20000190 	.word	0x20000190

080038d8 <sbrk_aligned>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	4e0f      	ldr	r6, [pc, #60]	@ (8003918 <sbrk_aligned+0x40>)
 80038dc:	460c      	mov	r4, r1
 80038de:	6831      	ldr	r1, [r6, #0]
 80038e0:	4605      	mov	r5, r0
 80038e2:	b911      	cbnz	r1, 80038ea <sbrk_aligned+0x12>
 80038e4:	f000 f9cc 	bl	8003c80 <_sbrk_r>
 80038e8:	6030      	str	r0, [r6, #0]
 80038ea:	4621      	mov	r1, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	f000 f9c7 	bl	8003c80 <_sbrk_r>
 80038f2:	1c43      	adds	r3, r0, #1
 80038f4:	d103      	bne.n	80038fe <sbrk_aligned+0x26>
 80038f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80038fa:	4620      	mov	r0, r4
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
 80038fe:	1cc4      	adds	r4, r0, #3
 8003900:	f024 0403 	bic.w	r4, r4, #3
 8003904:	42a0      	cmp	r0, r4
 8003906:	d0f8      	beq.n	80038fa <sbrk_aligned+0x22>
 8003908:	1a21      	subs	r1, r4, r0
 800390a:	4628      	mov	r0, r5
 800390c:	f000 f9b8 	bl	8003c80 <_sbrk_r>
 8003910:	3001      	adds	r0, #1
 8003912:	d1f2      	bne.n	80038fa <sbrk_aligned+0x22>
 8003914:	e7ef      	b.n	80038f6 <sbrk_aligned+0x1e>
 8003916:	bf00      	nop
 8003918:	200003c0 	.word	0x200003c0

0800391c <_malloc_r>:
 800391c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003920:	1ccd      	adds	r5, r1, #3
 8003922:	f025 0503 	bic.w	r5, r5, #3
 8003926:	3508      	adds	r5, #8
 8003928:	2d0c      	cmp	r5, #12
 800392a:	bf38      	it	cc
 800392c:	250c      	movcc	r5, #12
 800392e:	2d00      	cmp	r5, #0
 8003930:	4606      	mov	r6, r0
 8003932:	db01      	blt.n	8003938 <_malloc_r+0x1c>
 8003934:	42a9      	cmp	r1, r5
 8003936:	d904      	bls.n	8003942 <_malloc_r+0x26>
 8003938:	230c      	movs	r3, #12
 800393a:	6033      	str	r3, [r6, #0]
 800393c:	2000      	movs	r0, #0
 800393e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a18 <_malloc_r+0xfc>
 8003946:	f000 f915 	bl	8003b74 <__malloc_lock>
 800394a:	f8d8 3000 	ldr.w	r3, [r8]
 800394e:	461c      	mov	r4, r3
 8003950:	bb44      	cbnz	r4, 80039a4 <_malloc_r+0x88>
 8003952:	4629      	mov	r1, r5
 8003954:	4630      	mov	r0, r6
 8003956:	f7ff ffbf 	bl	80038d8 <sbrk_aligned>
 800395a:	1c43      	adds	r3, r0, #1
 800395c:	4604      	mov	r4, r0
 800395e:	d158      	bne.n	8003a12 <_malloc_r+0xf6>
 8003960:	f8d8 4000 	ldr.w	r4, [r8]
 8003964:	4627      	mov	r7, r4
 8003966:	2f00      	cmp	r7, #0
 8003968:	d143      	bne.n	80039f2 <_malloc_r+0xd6>
 800396a:	2c00      	cmp	r4, #0
 800396c:	d04b      	beq.n	8003a06 <_malloc_r+0xea>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	4639      	mov	r1, r7
 8003972:	4630      	mov	r0, r6
 8003974:	eb04 0903 	add.w	r9, r4, r3
 8003978:	f000 f982 	bl	8003c80 <_sbrk_r>
 800397c:	4581      	cmp	r9, r0
 800397e:	d142      	bne.n	8003a06 <_malloc_r+0xea>
 8003980:	6821      	ldr	r1, [r4, #0]
 8003982:	1a6d      	subs	r5, r5, r1
 8003984:	4629      	mov	r1, r5
 8003986:	4630      	mov	r0, r6
 8003988:	f7ff ffa6 	bl	80038d8 <sbrk_aligned>
 800398c:	3001      	adds	r0, #1
 800398e:	d03a      	beq.n	8003a06 <_malloc_r+0xea>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	442b      	add	r3, r5
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	f8d8 3000 	ldr.w	r3, [r8]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	bb62      	cbnz	r2, 80039f8 <_malloc_r+0xdc>
 800399e:	f8c8 7000 	str.w	r7, [r8]
 80039a2:	e00f      	b.n	80039c4 <_malloc_r+0xa8>
 80039a4:	6822      	ldr	r2, [r4, #0]
 80039a6:	1b52      	subs	r2, r2, r5
 80039a8:	d420      	bmi.n	80039ec <_malloc_r+0xd0>
 80039aa:	2a0b      	cmp	r2, #11
 80039ac:	d917      	bls.n	80039de <_malloc_r+0xc2>
 80039ae:	1961      	adds	r1, r4, r5
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	6025      	str	r5, [r4, #0]
 80039b4:	bf18      	it	ne
 80039b6:	6059      	strne	r1, [r3, #4]
 80039b8:	6863      	ldr	r3, [r4, #4]
 80039ba:	bf08      	it	eq
 80039bc:	f8c8 1000 	streq.w	r1, [r8]
 80039c0:	5162      	str	r2, [r4, r5]
 80039c2:	604b      	str	r3, [r1, #4]
 80039c4:	4630      	mov	r0, r6
 80039c6:	f000 f8db 	bl	8003b80 <__malloc_unlock>
 80039ca:	f104 000b 	add.w	r0, r4, #11
 80039ce:	1d23      	adds	r3, r4, #4
 80039d0:	f020 0007 	bic.w	r0, r0, #7
 80039d4:	1ac2      	subs	r2, r0, r3
 80039d6:	bf1c      	itt	ne
 80039d8:	1a1b      	subne	r3, r3, r0
 80039da:	50a3      	strne	r3, [r4, r2]
 80039dc:	e7af      	b.n	800393e <_malloc_r+0x22>
 80039de:	6862      	ldr	r2, [r4, #4]
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	bf0c      	ite	eq
 80039e4:	f8c8 2000 	streq.w	r2, [r8]
 80039e8:	605a      	strne	r2, [r3, #4]
 80039ea:	e7eb      	b.n	80039c4 <_malloc_r+0xa8>
 80039ec:	4623      	mov	r3, r4
 80039ee:	6864      	ldr	r4, [r4, #4]
 80039f0:	e7ae      	b.n	8003950 <_malloc_r+0x34>
 80039f2:	463c      	mov	r4, r7
 80039f4:	687f      	ldr	r7, [r7, #4]
 80039f6:	e7b6      	b.n	8003966 <_malloc_r+0x4a>
 80039f8:	461a      	mov	r2, r3
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	d1fb      	bne.n	80039f8 <_malloc_r+0xdc>
 8003a00:	2300      	movs	r3, #0
 8003a02:	6053      	str	r3, [r2, #4]
 8003a04:	e7de      	b.n	80039c4 <_malloc_r+0xa8>
 8003a06:	230c      	movs	r3, #12
 8003a08:	6033      	str	r3, [r6, #0]
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f000 f8b8 	bl	8003b80 <__malloc_unlock>
 8003a10:	e794      	b.n	800393c <_malloc_r+0x20>
 8003a12:	6005      	str	r5, [r0, #0]
 8003a14:	e7d6      	b.n	80039c4 <_malloc_r+0xa8>
 8003a16:	bf00      	nop
 8003a18:	200003c4 	.word	0x200003c4

08003a1c <__sflush_r>:
 8003a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a24:	0716      	lsls	r6, r2, #28
 8003a26:	4605      	mov	r5, r0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	d454      	bmi.n	8003ad6 <__sflush_r+0xba>
 8003a2c:	684b      	ldr	r3, [r1, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	dc02      	bgt.n	8003a38 <__sflush_r+0x1c>
 8003a32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	dd48      	ble.n	8003aca <__sflush_r+0xae>
 8003a38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a3a:	2e00      	cmp	r6, #0
 8003a3c:	d045      	beq.n	8003aca <__sflush_r+0xae>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a44:	682f      	ldr	r7, [r5, #0]
 8003a46:	6a21      	ldr	r1, [r4, #32]
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	d030      	beq.n	8003aae <__sflush_r+0x92>
 8003a4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	0759      	lsls	r1, r3, #29
 8003a52:	d505      	bpl.n	8003a60 <__sflush_r+0x44>
 8003a54:	6863      	ldr	r3, [r4, #4]
 8003a56:	1ad2      	subs	r2, r2, r3
 8003a58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a5a:	b10b      	cbz	r3, 8003a60 <__sflush_r+0x44>
 8003a5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a5e:	1ad2      	subs	r2, r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a64:	6a21      	ldr	r1, [r4, #32]
 8003a66:	4628      	mov	r0, r5
 8003a68:	47b0      	blx	r6
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	d106      	bne.n	8003a7e <__sflush_r+0x62>
 8003a70:	6829      	ldr	r1, [r5, #0]
 8003a72:	291d      	cmp	r1, #29
 8003a74:	d82b      	bhi.n	8003ace <__sflush_r+0xb2>
 8003a76:	4a2a      	ldr	r2, [pc, #168]	@ (8003b20 <__sflush_r+0x104>)
 8003a78:	40ca      	lsrs	r2, r1
 8003a7a:	07d6      	lsls	r6, r2, #31
 8003a7c:	d527      	bpl.n	8003ace <__sflush_r+0xb2>
 8003a7e:	2200      	movs	r2, #0
 8003a80:	6062      	str	r2, [r4, #4]
 8003a82:	04d9      	lsls	r1, r3, #19
 8003a84:	6922      	ldr	r2, [r4, #16]
 8003a86:	6022      	str	r2, [r4, #0]
 8003a88:	d504      	bpl.n	8003a94 <__sflush_r+0x78>
 8003a8a:	1c42      	adds	r2, r0, #1
 8003a8c:	d101      	bne.n	8003a92 <__sflush_r+0x76>
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	b903      	cbnz	r3, 8003a94 <__sflush_r+0x78>
 8003a92:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a96:	602f      	str	r7, [r5, #0]
 8003a98:	b1b9      	cbz	r1, 8003aca <__sflush_r+0xae>
 8003a9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a9e:	4299      	cmp	r1, r3
 8003aa0:	d002      	beq.n	8003aa8 <__sflush_r+0x8c>
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 f926 	bl	8003cf4 <_free_r>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8003aac:	e00d      	b.n	8003aca <__sflush_r+0xae>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b0      	blx	r6
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	1c50      	adds	r0, r2, #1
 8003ab8:	d1c9      	bne.n	8003a4e <__sflush_r+0x32>
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0c6      	beq.n	8003a4e <__sflush_r+0x32>
 8003ac0:	2b1d      	cmp	r3, #29
 8003ac2:	d001      	beq.n	8003ac8 <__sflush_r+0xac>
 8003ac4:	2b16      	cmp	r3, #22
 8003ac6:	d11e      	bne.n	8003b06 <__sflush_r+0xea>
 8003ac8:	602f      	str	r7, [r5, #0]
 8003aca:	2000      	movs	r0, #0
 8003acc:	e022      	b.n	8003b14 <__sflush_r+0xf8>
 8003ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	e01b      	b.n	8003b0e <__sflush_r+0xf2>
 8003ad6:	690f      	ldr	r7, [r1, #16]
 8003ad8:	2f00      	cmp	r7, #0
 8003ada:	d0f6      	beq.n	8003aca <__sflush_r+0xae>
 8003adc:	0793      	lsls	r3, r2, #30
 8003ade:	680e      	ldr	r6, [r1, #0]
 8003ae0:	bf08      	it	eq
 8003ae2:	694b      	ldreq	r3, [r1, #20]
 8003ae4:	600f      	str	r7, [r1, #0]
 8003ae6:	bf18      	it	ne
 8003ae8:	2300      	movne	r3, #0
 8003aea:	eba6 0807 	sub.w	r8, r6, r7
 8003aee:	608b      	str	r3, [r1, #8]
 8003af0:	f1b8 0f00 	cmp.w	r8, #0
 8003af4:	dde9      	ble.n	8003aca <__sflush_r+0xae>
 8003af6:	6a21      	ldr	r1, [r4, #32]
 8003af8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003afa:	4643      	mov	r3, r8
 8003afc:	463a      	mov	r2, r7
 8003afe:	4628      	mov	r0, r5
 8003b00:	47b0      	blx	r6
 8003b02:	2800      	cmp	r0, #0
 8003b04:	dc08      	bgt.n	8003b18 <__sflush_r+0xfc>
 8003b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b18:	4407      	add	r7, r0
 8003b1a:	eba8 0800 	sub.w	r8, r8, r0
 8003b1e:	e7e7      	b.n	8003af0 <__sflush_r+0xd4>
 8003b20:	20400001 	.word	0x20400001

08003b24 <_fflush_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	690b      	ldr	r3, [r1, #16]
 8003b28:	4605      	mov	r5, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	b913      	cbnz	r3, 8003b34 <_fflush_r+0x10>
 8003b2e:	2500      	movs	r5, #0
 8003b30:	4628      	mov	r0, r5
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	b118      	cbz	r0, 8003b3e <_fflush_r+0x1a>
 8003b36:	6a03      	ldr	r3, [r0, #32]
 8003b38:	b90b      	cbnz	r3, 8003b3e <_fflush_r+0x1a>
 8003b3a:	f7ff fe3b 	bl	80037b4 <__sinit>
 8003b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f3      	beq.n	8003b2e <_fflush_r+0xa>
 8003b46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b48:	07d0      	lsls	r0, r2, #31
 8003b4a:	d404      	bmi.n	8003b56 <_fflush_r+0x32>
 8003b4c:	0599      	lsls	r1, r3, #22
 8003b4e:	d402      	bmi.n	8003b56 <_fflush_r+0x32>
 8003b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b52:	f7ff fe98 	bl	8003886 <__retarget_lock_acquire_recursive>
 8003b56:	4628      	mov	r0, r5
 8003b58:	4621      	mov	r1, r4
 8003b5a:	f7ff ff5f 	bl	8003a1c <__sflush_r>
 8003b5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b60:	07da      	lsls	r2, r3, #31
 8003b62:	4605      	mov	r5, r0
 8003b64:	d4e4      	bmi.n	8003b30 <_fflush_r+0xc>
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	059b      	lsls	r3, r3, #22
 8003b6a:	d4e1      	bmi.n	8003b30 <_fflush_r+0xc>
 8003b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b6e:	f7ff fe8b 	bl	8003888 <__retarget_lock_release_recursive>
 8003b72:	e7dd      	b.n	8003b30 <_fflush_r+0xc>

08003b74 <__malloc_lock>:
 8003b74:	4801      	ldr	r0, [pc, #4]	@ (8003b7c <__malloc_lock+0x8>)
 8003b76:	f7ff be86 	b.w	8003886 <__retarget_lock_acquire_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	200003bc 	.word	0x200003bc

08003b80 <__malloc_unlock>:
 8003b80:	4801      	ldr	r0, [pc, #4]	@ (8003b88 <__malloc_unlock+0x8>)
 8003b82:	f7ff be81 	b.w	8003888 <__retarget_lock_release_recursive>
 8003b86:	bf00      	nop
 8003b88:	200003bc 	.word	0x200003bc

08003b8c <__sread>:
 8003b8c:	b510      	push	{r4, lr}
 8003b8e:	460c      	mov	r4, r1
 8003b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b94:	f000 f862 	bl	8003c5c <_read_r>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	bfab      	itete	ge
 8003b9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003ba0:	181b      	addge	r3, r3, r0
 8003ba2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ba6:	bfac      	ite	ge
 8003ba8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003baa:	81a3      	strhlt	r3, [r4, #12]
 8003bac:	bd10      	pop	{r4, pc}

08003bae <__swrite>:
 8003bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb2:	461f      	mov	r7, r3
 8003bb4:	898b      	ldrh	r3, [r1, #12]
 8003bb6:	05db      	lsls	r3, r3, #23
 8003bb8:	4605      	mov	r5, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	d505      	bpl.n	8003bcc <__swrite+0x1e>
 8003bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f000 f836 	bl	8003c38 <_lseek_r>
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bd6:	81a3      	strh	r3, [r4, #12]
 8003bd8:	4632      	mov	r2, r6
 8003bda:	463b      	mov	r3, r7
 8003bdc:	4628      	mov	r0, r5
 8003bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003be2:	f000 b85d 	b.w	8003ca0 <_write_r>

08003be6 <__sseek>:
 8003be6:	b510      	push	{r4, lr}
 8003be8:	460c      	mov	r4, r1
 8003bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bee:	f000 f823 	bl	8003c38 <_lseek_r>
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	bf15      	itete	ne
 8003bf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003bfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c02:	81a3      	strheq	r3, [r4, #12]
 8003c04:	bf18      	it	ne
 8003c06:	81a3      	strhne	r3, [r4, #12]
 8003c08:	bd10      	pop	{r4, pc}

08003c0a <__sclose>:
 8003c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0e:	f000 b859 	b.w	8003cc4 <_close_r>
	...

08003c14 <fiprintf>:
 8003c14:	b40e      	push	{r1, r2, r3}
 8003c16:	b503      	push	{r0, r1, lr}
 8003c18:	4601      	mov	r1, r0
 8003c1a:	ab03      	add	r3, sp, #12
 8003c1c:	4805      	ldr	r0, [pc, #20]	@ (8003c34 <fiprintf+0x20>)
 8003c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c22:	6800      	ldr	r0, [r0, #0]
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	f000 f8d9 	bl	8003ddc <_vfiprintf_r>
 8003c2a:	b002      	add	sp, #8
 8003c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c30:	b003      	add	sp, #12
 8003c32:	4770      	bx	lr
 8003c34:	20000190 	.word	0x20000190

08003c38 <_lseek_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d07      	ldr	r5, [pc, #28]	@ (8003c58 <_lseek_r+0x20>)
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	4608      	mov	r0, r1
 8003c40:	4611      	mov	r1, r2
 8003c42:	2200      	movs	r2, #0
 8003c44:	602a      	str	r2, [r5, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7fd fe2d 	bl	80018a6 <_lseek>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_lseek_r+0x1e>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_lseek_r+0x1e>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	200003c8 	.word	0x200003c8

08003c5c <_read_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4d07      	ldr	r5, [pc, #28]	@ (8003c7c <_read_r+0x20>)
 8003c60:	4604      	mov	r4, r0
 8003c62:	4608      	mov	r0, r1
 8003c64:	4611      	mov	r1, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	602a      	str	r2, [r5, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f7fd fdbb 	bl	80017e6 <_read>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_read_r+0x1e>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_read_r+0x1e>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	200003c8 	.word	0x200003c8

08003c80 <_sbrk_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4d06      	ldr	r5, [pc, #24]	@ (8003c9c <_sbrk_r+0x1c>)
 8003c84:	2300      	movs	r3, #0
 8003c86:	4604      	mov	r4, r0
 8003c88:	4608      	mov	r0, r1
 8003c8a:	602b      	str	r3, [r5, #0]
 8003c8c:	f7fd fe18 	bl	80018c0 <_sbrk>
 8003c90:	1c43      	adds	r3, r0, #1
 8003c92:	d102      	bne.n	8003c9a <_sbrk_r+0x1a>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	b103      	cbz	r3, 8003c9a <_sbrk_r+0x1a>
 8003c98:	6023      	str	r3, [r4, #0]
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	200003c8 	.word	0x200003c8

08003ca0 <_write_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4d07      	ldr	r5, [pc, #28]	@ (8003cc0 <_write_r+0x20>)
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	4608      	mov	r0, r1
 8003ca8:	4611      	mov	r1, r2
 8003caa:	2200      	movs	r2, #0
 8003cac:	602a      	str	r2, [r5, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f7fd fdb6 	bl	8001820 <_write>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_write_r+0x1e>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_write_r+0x1e>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	200003c8 	.word	0x200003c8

08003cc4 <_close_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	4d06      	ldr	r5, [pc, #24]	@ (8003ce0 <_close_r+0x1c>)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	f7fd fdc2 	bl	8001858 <_close>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_close_r+0x1a>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_close_r+0x1a>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	200003c8 	.word	0x200003c8

08003ce4 <abort>:
 8003ce4:	b508      	push	{r3, lr}
 8003ce6:	2006      	movs	r0, #6
 8003ce8:	f000 fc3a 	bl	8004560 <raise>
 8003cec:	2001      	movs	r0, #1
 8003cee:	f7fd fd6f 	bl	80017d0 <_exit>
	...

08003cf4 <_free_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4605      	mov	r5, r0
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	d041      	beq.n	8003d80 <_free_r+0x8c>
 8003cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d00:	1f0c      	subs	r4, r1, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bfb8      	it	lt
 8003d06:	18e4      	addlt	r4, r4, r3
 8003d08:	f7ff ff34 	bl	8003b74 <__malloc_lock>
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003d84 <_free_r+0x90>)
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	b933      	cbnz	r3, 8003d20 <_free_r+0x2c>
 8003d12:	6063      	str	r3, [r4, #4]
 8003d14:	6014      	str	r4, [r2, #0]
 8003d16:	4628      	mov	r0, r5
 8003d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d1c:	f7ff bf30 	b.w	8003b80 <__malloc_unlock>
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d908      	bls.n	8003d36 <_free_r+0x42>
 8003d24:	6820      	ldr	r0, [r4, #0]
 8003d26:	1821      	adds	r1, r4, r0
 8003d28:	428b      	cmp	r3, r1
 8003d2a:	bf01      	itttt	eq
 8003d2c:	6819      	ldreq	r1, [r3, #0]
 8003d2e:	685b      	ldreq	r3, [r3, #4]
 8003d30:	1809      	addeq	r1, r1, r0
 8003d32:	6021      	streq	r1, [r4, #0]
 8003d34:	e7ed      	b.n	8003d12 <_free_r+0x1e>
 8003d36:	461a      	mov	r2, r3
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	b10b      	cbz	r3, 8003d40 <_free_r+0x4c>
 8003d3c:	42a3      	cmp	r3, r4
 8003d3e:	d9fa      	bls.n	8003d36 <_free_r+0x42>
 8003d40:	6811      	ldr	r1, [r2, #0]
 8003d42:	1850      	adds	r0, r2, r1
 8003d44:	42a0      	cmp	r0, r4
 8003d46:	d10b      	bne.n	8003d60 <_free_r+0x6c>
 8003d48:	6820      	ldr	r0, [r4, #0]
 8003d4a:	4401      	add	r1, r0
 8003d4c:	1850      	adds	r0, r2, r1
 8003d4e:	4283      	cmp	r3, r0
 8003d50:	6011      	str	r1, [r2, #0]
 8003d52:	d1e0      	bne.n	8003d16 <_free_r+0x22>
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	6053      	str	r3, [r2, #4]
 8003d5a:	4408      	add	r0, r1
 8003d5c:	6010      	str	r0, [r2, #0]
 8003d5e:	e7da      	b.n	8003d16 <_free_r+0x22>
 8003d60:	d902      	bls.n	8003d68 <_free_r+0x74>
 8003d62:	230c      	movs	r3, #12
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	e7d6      	b.n	8003d16 <_free_r+0x22>
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	1821      	adds	r1, r4, r0
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	bf04      	itt	eq
 8003d70:	6819      	ldreq	r1, [r3, #0]
 8003d72:	685b      	ldreq	r3, [r3, #4]
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	bf04      	itt	eq
 8003d78:	1809      	addeq	r1, r1, r0
 8003d7a:	6021      	streq	r1, [r4, #0]
 8003d7c:	6054      	str	r4, [r2, #4]
 8003d7e:	e7ca      	b.n	8003d16 <_free_r+0x22>
 8003d80:	bd38      	pop	{r3, r4, r5, pc}
 8003d82:	bf00      	nop
 8003d84:	200003c4 	.word	0x200003c4

08003d88 <__sfputc_r>:
 8003d88:	6893      	ldr	r3, [r2, #8]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	b410      	push	{r4}
 8003d90:	6093      	str	r3, [r2, #8]
 8003d92:	da08      	bge.n	8003da6 <__sfputc_r+0x1e>
 8003d94:	6994      	ldr	r4, [r2, #24]
 8003d96:	42a3      	cmp	r3, r4
 8003d98:	db01      	blt.n	8003d9e <__sfputc_r+0x16>
 8003d9a:	290a      	cmp	r1, #10
 8003d9c:	d103      	bne.n	8003da6 <__sfputc_r+0x1e>
 8003d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003da2:	f000 babf 	b.w	8004324 <__swbuf_r>
 8003da6:	6813      	ldr	r3, [r2, #0]
 8003da8:	1c58      	adds	r0, r3, #1
 8003daa:	6010      	str	r0, [r2, #0]
 8003dac:	7019      	strb	r1, [r3, #0]
 8003dae:	4608      	mov	r0, r1
 8003db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <__sfputs_r>:
 8003db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db8:	4606      	mov	r6, r0
 8003dba:	460f      	mov	r7, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	18d5      	adds	r5, r2, r3
 8003dc0:	42ac      	cmp	r4, r5
 8003dc2:	d101      	bne.n	8003dc8 <__sfputs_r+0x12>
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e007      	b.n	8003dd8 <__sfputs_r+0x22>
 8003dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dcc:	463a      	mov	r2, r7
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f7ff ffda 	bl	8003d88 <__sfputc_r>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d1f3      	bne.n	8003dc0 <__sfputs_r+0xa>
 8003dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ddc <_vfiprintf_r>:
 8003ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de0:	460d      	mov	r5, r1
 8003de2:	b09d      	sub	sp, #116	@ 0x74
 8003de4:	4614      	mov	r4, r2
 8003de6:	4698      	mov	r8, r3
 8003de8:	4606      	mov	r6, r0
 8003dea:	b118      	cbz	r0, 8003df4 <_vfiprintf_r+0x18>
 8003dec:	6a03      	ldr	r3, [r0, #32]
 8003dee:	b90b      	cbnz	r3, 8003df4 <_vfiprintf_r+0x18>
 8003df0:	f7ff fce0 	bl	80037b4 <__sinit>
 8003df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003df6:	07d9      	lsls	r1, r3, #31
 8003df8:	d405      	bmi.n	8003e06 <_vfiprintf_r+0x2a>
 8003dfa:	89ab      	ldrh	r3, [r5, #12]
 8003dfc:	059a      	lsls	r2, r3, #22
 8003dfe:	d402      	bmi.n	8003e06 <_vfiprintf_r+0x2a>
 8003e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e02:	f7ff fd40 	bl	8003886 <__retarget_lock_acquire_recursive>
 8003e06:	89ab      	ldrh	r3, [r5, #12]
 8003e08:	071b      	lsls	r3, r3, #28
 8003e0a:	d501      	bpl.n	8003e10 <_vfiprintf_r+0x34>
 8003e0c:	692b      	ldr	r3, [r5, #16]
 8003e0e:	b99b      	cbnz	r3, 8003e38 <_vfiprintf_r+0x5c>
 8003e10:	4629      	mov	r1, r5
 8003e12:	4630      	mov	r0, r6
 8003e14:	f000 fac4 	bl	80043a0 <__swsetup_r>
 8003e18:	b170      	cbz	r0, 8003e38 <_vfiprintf_r+0x5c>
 8003e1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e1c:	07dc      	lsls	r4, r3, #31
 8003e1e:	d504      	bpl.n	8003e2a <_vfiprintf_r+0x4e>
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e24:	b01d      	add	sp, #116	@ 0x74
 8003e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2a:	89ab      	ldrh	r3, [r5, #12]
 8003e2c:	0598      	lsls	r0, r3, #22
 8003e2e:	d4f7      	bmi.n	8003e20 <_vfiprintf_r+0x44>
 8003e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e32:	f7ff fd29 	bl	8003888 <__retarget_lock_release_recursive>
 8003e36:	e7f3      	b.n	8003e20 <_vfiprintf_r+0x44>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e46:	2330      	movs	r3, #48	@ 0x30
 8003e48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ff8 <_vfiprintf_r+0x21c>
 8003e4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e50:	f04f 0901 	mov.w	r9, #1
 8003e54:	4623      	mov	r3, r4
 8003e56:	469a      	mov	sl, r3
 8003e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e5c:	b10a      	cbz	r2, 8003e62 <_vfiprintf_r+0x86>
 8003e5e:	2a25      	cmp	r2, #37	@ 0x25
 8003e60:	d1f9      	bne.n	8003e56 <_vfiprintf_r+0x7a>
 8003e62:	ebba 0b04 	subs.w	fp, sl, r4
 8003e66:	d00b      	beq.n	8003e80 <_vfiprintf_r+0xa4>
 8003e68:	465b      	mov	r3, fp
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f7ff ffa1 	bl	8003db6 <__sfputs_r>
 8003e74:	3001      	adds	r0, #1
 8003e76:	f000 80a7 	beq.w	8003fc8 <_vfiprintf_r+0x1ec>
 8003e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e7c:	445a      	add	r2, fp
 8003e7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e80:	f89a 3000 	ldrb.w	r3, [sl]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 809f 	beq.w	8003fc8 <_vfiprintf_r+0x1ec>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e94:	f10a 0a01 	add.w	sl, sl, #1
 8003e98:	9304      	str	r3, [sp, #16]
 8003e9a:	9307      	str	r3, [sp, #28]
 8003e9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ea0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ea2:	4654      	mov	r4, sl
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eaa:	4853      	ldr	r0, [pc, #332]	@ (8003ff8 <_vfiprintf_r+0x21c>)
 8003eac:	f7fc f990 	bl	80001d0 <memchr>
 8003eb0:	9a04      	ldr	r2, [sp, #16]
 8003eb2:	b9d8      	cbnz	r0, 8003eec <_vfiprintf_r+0x110>
 8003eb4:	06d1      	lsls	r1, r2, #27
 8003eb6:	bf44      	itt	mi
 8003eb8:	2320      	movmi	r3, #32
 8003eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ebe:	0713      	lsls	r3, r2, #28
 8003ec0:	bf44      	itt	mi
 8003ec2:	232b      	movmi	r3, #43	@ 0x2b
 8003ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ece:	d015      	beq.n	8003efc <_vfiprintf_r+0x120>
 8003ed0:	9a07      	ldr	r2, [sp, #28]
 8003ed2:	4654      	mov	r4, sl
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f04f 0c0a 	mov.w	ip, #10
 8003eda:	4621      	mov	r1, r4
 8003edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ee0:	3b30      	subs	r3, #48	@ 0x30
 8003ee2:	2b09      	cmp	r3, #9
 8003ee4:	d94b      	bls.n	8003f7e <_vfiprintf_r+0x1a2>
 8003ee6:	b1b0      	cbz	r0, 8003f16 <_vfiprintf_r+0x13a>
 8003ee8:	9207      	str	r2, [sp, #28]
 8003eea:	e014      	b.n	8003f16 <_vfiprintf_r+0x13a>
 8003eec:	eba0 0308 	sub.w	r3, r0, r8
 8003ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	9304      	str	r3, [sp, #16]
 8003ef8:	46a2      	mov	sl, r4
 8003efa:	e7d2      	b.n	8003ea2 <_vfiprintf_r+0xc6>
 8003efc:	9b03      	ldr	r3, [sp, #12]
 8003efe:	1d19      	adds	r1, r3, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	9103      	str	r1, [sp, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bfbb      	ittet	lt
 8003f08:	425b      	neglt	r3, r3
 8003f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f0e:	9307      	strge	r3, [sp, #28]
 8003f10:	9307      	strlt	r3, [sp, #28]
 8003f12:	bfb8      	it	lt
 8003f14:	9204      	strlt	r2, [sp, #16]
 8003f16:	7823      	ldrb	r3, [r4, #0]
 8003f18:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f1a:	d10a      	bne.n	8003f32 <_vfiprintf_r+0x156>
 8003f1c:	7863      	ldrb	r3, [r4, #1]
 8003f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f20:	d132      	bne.n	8003f88 <_vfiprintf_r+0x1ac>
 8003f22:	9b03      	ldr	r3, [sp, #12]
 8003f24:	1d1a      	adds	r2, r3, #4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	9203      	str	r2, [sp, #12]
 8003f2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f2e:	3402      	adds	r4, #2
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004008 <_vfiprintf_r+0x22c>
 8003f36:	7821      	ldrb	r1, [r4, #0]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	f7fc f948 	bl	80001d0 <memchr>
 8003f40:	b138      	cbz	r0, 8003f52 <_vfiprintf_r+0x176>
 8003f42:	9b04      	ldr	r3, [sp, #16]
 8003f44:	eba0 000a 	sub.w	r0, r0, sl
 8003f48:	2240      	movs	r2, #64	@ 0x40
 8003f4a:	4082      	lsls	r2, r0
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	3401      	adds	r4, #1
 8003f50:	9304      	str	r3, [sp, #16]
 8003f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f56:	4829      	ldr	r0, [pc, #164]	@ (8003ffc <_vfiprintf_r+0x220>)
 8003f58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f5c:	2206      	movs	r2, #6
 8003f5e:	f7fc f937 	bl	80001d0 <memchr>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d03f      	beq.n	8003fe6 <_vfiprintf_r+0x20a>
 8003f66:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <_vfiprintf_r+0x224>)
 8003f68:	bb1b      	cbnz	r3, 8003fb2 <_vfiprintf_r+0x1d6>
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	3307      	adds	r3, #7
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	3308      	adds	r3, #8
 8003f74:	9303      	str	r3, [sp, #12]
 8003f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f78:	443b      	add	r3, r7
 8003f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f7c:	e76a      	b.n	8003e54 <_vfiprintf_r+0x78>
 8003f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f82:	460c      	mov	r4, r1
 8003f84:	2001      	movs	r0, #1
 8003f86:	e7a8      	b.n	8003eda <_vfiprintf_r+0xfe>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	3401      	adds	r4, #1
 8003f8c:	9305      	str	r3, [sp, #20]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	f04f 0c0a 	mov.w	ip, #10
 8003f94:	4620      	mov	r0, r4
 8003f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f9a:	3a30      	subs	r2, #48	@ 0x30
 8003f9c:	2a09      	cmp	r2, #9
 8003f9e:	d903      	bls.n	8003fa8 <_vfiprintf_r+0x1cc>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0c6      	beq.n	8003f32 <_vfiprintf_r+0x156>
 8003fa4:	9105      	str	r1, [sp, #20]
 8003fa6:	e7c4      	b.n	8003f32 <_vfiprintf_r+0x156>
 8003fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fac:	4604      	mov	r4, r0
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e7f0      	b.n	8003f94 <_vfiprintf_r+0x1b8>
 8003fb2:	ab03      	add	r3, sp, #12
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	462a      	mov	r2, r5
 8003fb8:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <_vfiprintf_r+0x228>)
 8003fba:	a904      	add	r1, sp, #16
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	f3af 8000 	nop.w
 8003fc2:	4607      	mov	r7, r0
 8003fc4:	1c78      	adds	r0, r7, #1
 8003fc6:	d1d6      	bne.n	8003f76 <_vfiprintf_r+0x19a>
 8003fc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fca:	07d9      	lsls	r1, r3, #31
 8003fcc:	d405      	bmi.n	8003fda <_vfiprintf_r+0x1fe>
 8003fce:	89ab      	ldrh	r3, [r5, #12]
 8003fd0:	059a      	lsls	r2, r3, #22
 8003fd2:	d402      	bmi.n	8003fda <_vfiprintf_r+0x1fe>
 8003fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fd6:	f7ff fc57 	bl	8003888 <__retarget_lock_release_recursive>
 8003fda:	89ab      	ldrh	r3, [r5, #12]
 8003fdc:	065b      	lsls	r3, r3, #25
 8003fde:	f53f af1f 	bmi.w	8003e20 <_vfiprintf_r+0x44>
 8003fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fe4:	e71e      	b.n	8003e24 <_vfiprintf_r+0x48>
 8003fe6:	ab03      	add	r3, sp, #12
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	462a      	mov	r2, r5
 8003fec:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <_vfiprintf_r+0x228>)
 8003fee:	a904      	add	r1, sp, #16
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f000 f879 	bl	80040e8 <_printf_i>
 8003ff6:	e7e4      	b.n	8003fc2 <_vfiprintf_r+0x1e6>
 8003ff8:	08004703 	.word	0x08004703
 8003ffc:	0800470d 	.word	0x0800470d
 8004000:	00000000 	.word	0x00000000
 8004004:	08003db7 	.word	0x08003db7
 8004008:	08004709 	.word	0x08004709

0800400c <_printf_common>:
 800400c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	4616      	mov	r6, r2
 8004012:	4698      	mov	r8, r3
 8004014:	688a      	ldr	r2, [r1, #8]
 8004016:	690b      	ldr	r3, [r1, #16]
 8004018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800401c:	4293      	cmp	r3, r2
 800401e:	bfb8      	it	lt
 8004020:	4613      	movlt	r3, r2
 8004022:	6033      	str	r3, [r6, #0]
 8004024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004028:	4607      	mov	r7, r0
 800402a:	460c      	mov	r4, r1
 800402c:	b10a      	cbz	r2, 8004032 <_printf_common+0x26>
 800402e:	3301      	adds	r3, #1
 8004030:	6033      	str	r3, [r6, #0]
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	0699      	lsls	r1, r3, #26
 8004036:	bf42      	ittt	mi
 8004038:	6833      	ldrmi	r3, [r6, #0]
 800403a:	3302      	addmi	r3, #2
 800403c:	6033      	strmi	r3, [r6, #0]
 800403e:	6825      	ldr	r5, [r4, #0]
 8004040:	f015 0506 	ands.w	r5, r5, #6
 8004044:	d106      	bne.n	8004054 <_printf_common+0x48>
 8004046:	f104 0a19 	add.w	sl, r4, #25
 800404a:	68e3      	ldr	r3, [r4, #12]
 800404c:	6832      	ldr	r2, [r6, #0]
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	42ab      	cmp	r3, r5
 8004052:	dc26      	bgt.n	80040a2 <_printf_common+0x96>
 8004054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004058:	6822      	ldr	r2, [r4, #0]
 800405a:	3b00      	subs	r3, #0
 800405c:	bf18      	it	ne
 800405e:	2301      	movne	r3, #1
 8004060:	0692      	lsls	r2, r2, #26
 8004062:	d42b      	bmi.n	80040bc <_printf_common+0xb0>
 8004064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004068:	4641      	mov	r1, r8
 800406a:	4638      	mov	r0, r7
 800406c:	47c8      	blx	r9
 800406e:	3001      	adds	r0, #1
 8004070:	d01e      	beq.n	80040b0 <_printf_common+0xa4>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	f003 0306 	and.w	r3, r3, #6
 800407a:	2b04      	cmp	r3, #4
 800407c:	bf02      	ittt	eq
 800407e:	68e5      	ldreq	r5, [r4, #12]
 8004080:	6833      	ldreq	r3, [r6, #0]
 8004082:	1aed      	subeq	r5, r5, r3
 8004084:	68a3      	ldr	r3, [r4, #8]
 8004086:	bf0c      	ite	eq
 8004088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800408c:	2500      	movne	r5, #0
 800408e:	4293      	cmp	r3, r2
 8004090:	bfc4      	itt	gt
 8004092:	1a9b      	subgt	r3, r3, r2
 8004094:	18ed      	addgt	r5, r5, r3
 8004096:	2600      	movs	r6, #0
 8004098:	341a      	adds	r4, #26
 800409a:	42b5      	cmp	r5, r6
 800409c:	d11a      	bne.n	80040d4 <_printf_common+0xc8>
 800409e:	2000      	movs	r0, #0
 80040a0:	e008      	b.n	80040b4 <_printf_common+0xa8>
 80040a2:	2301      	movs	r3, #1
 80040a4:	4652      	mov	r2, sl
 80040a6:	4641      	mov	r1, r8
 80040a8:	4638      	mov	r0, r7
 80040aa:	47c8      	blx	r9
 80040ac:	3001      	adds	r0, #1
 80040ae:	d103      	bne.n	80040b8 <_printf_common+0xac>
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b8:	3501      	adds	r5, #1
 80040ba:	e7c6      	b.n	800404a <_printf_common+0x3e>
 80040bc:	18e1      	adds	r1, r4, r3
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	2030      	movs	r0, #48	@ 0x30
 80040c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040c6:	4422      	add	r2, r4
 80040c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040d0:	3302      	adds	r3, #2
 80040d2:	e7c7      	b.n	8004064 <_printf_common+0x58>
 80040d4:	2301      	movs	r3, #1
 80040d6:	4622      	mov	r2, r4
 80040d8:	4641      	mov	r1, r8
 80040da:	4638      	mov	r0, r7
 80040dc:	47c8      	blx	r9
 80040de:	3001      	adds	r0, #1
 80040e0:	d0e6      	beq.n	80040b0 <_printf_common+0xa4>
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7d9      	b.n	800409a <_printf_common+0x8e>
	...

080040e8 <_printf_i>:
 80040e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	7e0f      	ldrb	r7, [r1, #24]
 80040ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040f0:	2f78      	cmp	r7, #120	@ 0x78
 80040f2:	4691      	mov	r9, r2
 80040f4:	4680      	mov	r8, r0
 80040f6:	460c      	mov	r4, r1
 80040f8:	469a      	mov	sl, r3
 80040fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040fe:	d807      	bhi.n	8004110 <_printf_i+0x28>
 8004100:	2f62      	cmp	r7, #98	@ 0x62
 8004102:	d80a      	bhi.n	800411a <_printf_i+0x32>
 8004104:	2f00      	cmp	r7, #0
 8004106:	f000 80d1 	beq.w	80042ac <_printf_i+0x1c4>
 800410a:	2f58      	cmp	r7, #88	@ 0x58
 800410c:	f000 80b8 	beq.w	8004280 <_printf_i+0x198>
 8004110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004118:	e03a      	b.n	8004190 <_printf_i+0xa8>
 800411a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800411e:	2b15      	cmp	r3, #21
 8004120:	d8f6      	bhi.n	8004110 <_printf_i+0x28>
 8004122:	a101      	add	r1, pc, #4	@ (adr r1, 8004128 <_printf_i+0x40>)
 8004124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004128:	08004181 	.word	0x08004181
 800412c:	08004195 	.word	0x08004195
 8004130:	08004111 	.word	0x08004111
 8004134:	08004111 	.word	0x08004111
 8004138:	08004111 	.word	0x08004111
 800413c:	08004111 	.word	0x08004111
 8004140:	08004195 	.word	0x08004195
 8004144:	08004111 	.word	0x08004111
 8004148:	08004111 	.word	0x08004111
 800414c:	08004111 	.word	0x08004111
 8004150:	08004111 	.word	0x08004111
 8004154:	08004293 	.word	0x08004293
 8004158:	080041bf 	.word	0x080041bf
 800415c:	0800424d 	.word	0x0800424d
 8004160:	08004111 	.word	0x08004111
 8004164:	08004111 	.word	0x08004111
 8004168:	080042b5 	.word	0x080042b5
 800416c:	08004111 	.word	0x08004111
 8004170:	080041bf 	.word	0x080041bf
 8004174:	08004111 	.word	0x08004111
 8004178:	08004111 	.word	0x08004111
 800417c:	08004255 	.word	0x08004255
 8004180:	6833      	ldr	r3, [r6, #0]
 8004182:	1d1a      	adds	r2, r3, #4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6032      	str	r2, [r6, #0]
 8004188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800418c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004190:	2301      	movs	r3, #1
 8004192:	e09c      	b.n	80042ce <_printf_i+0x1e6>
 8004194:	6833      	ldr	r3, [r6, #0]
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	1d19      	adds	r1, r3, #4
 800419a:	6031      	str	r1, [r6, #0]
 800419c:	0606      	lsls	r6, r0, #24
 800419e:	d501      	bpl.n	80041a4 <_printf_i+0xbc>
 80041a0:	681d      	ldr	r5, [r3, #0]
 80041a2:	e003      	b.n	80041ac <_printf_i+0xc4>
 80041a4:	0645      	lsls	r5, r0, #25
 80041a6:	d5fb      	bpl.n	80041a0 <_printf_i+0xb8>
 80041a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041ac:	2d00      	cmp	r5, #0
 80041ae:	da03      	bge.n	80041b8 <_printf_i+0xd0>
 80041b0:	232d      	movs	r3, #45	@ 0x2d
 80041b2:	426d      	negs	r5, r5
 80041b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041b8:	4858      	ldr	r0, [pc, #352]	@ (800431c <_printf_i+0x234>)
 80041ba:	230a      	movs	r3, #10
 80041bc:	e011      	b.n	80041e2 <_printf_i+0xfa>
 80041be:	6821      	ldr	r1, [r4, #0]
 80041c0:	6833      	ldr	r3, [r6, #0]
 80041c2:	0608      	lsls	r0, r1, #24
 80041c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80041c8:	d402      	bmi.n	80041d0 <_printf_i+0xe8>
 80041ca:	0649      	lsls	r1, r1, #25
 80041cc:	bf48      	it	mi
 80041ce:	b2ad      	uxthmi	r5, r5
 80041d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80041d2:	4852      	ldr	r0, [pc, #328]	@ (800431c <_printf_i+0x234>)
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	bf14      	ite	ne
 80041d8:	230a      	movne	r3, #10
 80041da:	2308      	moveq	r3, #8
 80041dc:	2100      	movs	r1, #0
 80041de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041e2:	6866      	ldr	r6, [r4, #4]
 80041e4:	60a6      	str	r6, [r4, #8]
 80041e6:	2e00      	cmp	r6, #0
 80041e8:	db05      	blt.n	80041f6 <_printf_i+0x10e>
 80041ea:	6821      	ldr	r1, [r4, #0]
 80041ec:	432e      	orrs	r6, r5
 80041ee:	f021 0104 	bic.w	r1, r1, #4
 80041f2:	6021      	str	r1, [r4, #0]
 80041f4:	d04b      	beq.n	800428e <_printf_i+0x1a6>
 80041f6:	4616      	mov	r6, r2
 80041f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80041fc:	fb03 5711 	mls	r7, r3, r1, r5
 8004200:	5dc7      	ldrb	r7, [r0, r7]
 8004202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004206:	462f      	mov	r7, r5
 8004208:	42bb      	cmp	r3, r7
 800420a:	460d      	mov	r5, r1
 800420c:	d9f4      	bls.n	80041f8 <_printf_i+0x110>
 800420e:	2b08      	cmp	r3, #8
 8004210:	d10b      	bne.n	800422a <_printf_i+0x142>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	07df      	lsls	r7, r3, #31
 8004216:	d508      	bpl.n	800422a <_printf_i+0x142>
 8004218:	6923      	ldr	r3, [r4, #16]
 800421a:	6861      	ldr	r1, [r4, #4]
 800421c:	4299      	cmp	r1, r3
 800421e:	bfde      	ittt	le
 8004220:	2330      	movle	r3, #48	@ 0x30
 8004222:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004226:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800422a:	1b92      	subs	r2, r2, r6
 800422c:	6122      	str	r2, [r4, #16]
 800422e:	f8cd a000 	str.w	sl, [sp]
 8004232:	464b      	mov	r3, r9
 8004234:	aa03      	add	r2, sp, #12
 8004236:	4621      	mov	r1, r4
 8004238:	4640      	mov	r0, r8
 800423a:	f7ff fee7 	bl	800400c <_printf_common>
 800423e:	3001      	adds	r0, #1
 8004240:	d14a      	bne.n	80042d8 <_printf_i+0x1f0>
 8004242:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004246:	b004      	add	sp, #16
 8004248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f043 0320 	orr.w	r3, r3, #32
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	4832      	ldr	r0, [pc, #200]	@ (8004320 <_printf_i+0x238>)
 8004256:	2778      	movs	r7, #120	@ 0x78
 8004258:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	6831      	ldr	r1, [r6, #0]
 8004260:	061f      	lsls	r7, r3, #24
 8004262:	f851 5b04 	ldr.w	r5, [r1], #4
 8004266:	d402      	bmi.n	800426e <_printf_i+0x186>
 8004268:	065f      	lsls	r7, r3, #25
 800426a:	bf48      	it	mi
 800426c:	b2ad      	uxthmi	r5, r5
 800426e:	6031      	str	r1, [r6, #0]
 8004270:	07d9      	lsls	r1, r3, #31
 8004272:	bf44      	itt	mi
 8004274:	f043 0320 	orrmi.w	r3, r3, #32
 8004278:	6023      	strmi	r3, [r4, #0]
 800427a:	b11d      	cbz	r5, 8004284 <_printf_i+0x19c>
 800427c:	2310      	movs	r3, #16
 800427e:	e7ad      	b.n	80041dc <_printf_i+0xf4>
 8004280:	4826      	ldr	r0, [pc, #152]	@ (800431c <_printf_i+0x234>)
 8004282:	e7e9      	b.n	8004258 <_printf_i+0x170>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	f023 0320 	bic.w	r3, r3, #32
 800428a:	6023      	str	r3, [r4, #0]
 800428c:	e7f6      	b.n	800427c <_printf_i+0x194>
 800428e:	4616      	mov	r6, r2
 8004290:	e7bd      	b.n	800420e <_printf_i+0x126>
 8004292:	6833      	ldr	r3, [r6, #0]
 8004294:	6825      	ldr	r5, [r4, #0]
 8004296:	6961      	ldr	r1, [r4, #20]
 8004298:	1d18      	adds	r0, r3, #4
 800429a:	6030      	str	r0, [r6, #0]
 800429c:	062e      	lsls	r6, r5, #24
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	d501      	bpl.n	80042a6 <_printf_i+0x1be>
 80042a2:	6019      	str	r1, [r3, #0]
 80042a4:	e002      	b.n	80042ac <_printf_i+0x1c4>
 80042a6:	0668      	lsls	r0, r5, #25
 80042a8:	d5fb      	bpl.n	80042a2 <_printf_i+0x1ba>
 80042aa:	8019      	strh	r1, [r3, #0]
 80042ac:	2300      	movs	r3, #0
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	4616      	mov	r6, r2
 80042b2:	e7bc      	b.n	800422e <_printf_i+0x146>
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	6032      	str	r2, [r6, #0]
 80042ba:	681e      	ldr	r6, [r3, #0]
 80042bc:	6862      	ldr	r2, [r4, #4]
 80042be:	2100      	movs	r1, #0
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7fb ff85 	bl	80001d0 <memchr>
 80042c6:	b108      	cbz	r0, 80042cc <_printf_i+0x1e4>
 80042c8:	1b80      	subs	r0, r0, r6
 80042ca:	6060      	str	r0, [r4, #4]
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	6123      	str	r3, [r4, #16]
 80042d0:	2300      	movs	r3, #0
 80042d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042d6:	e7aa      	b.n	800422e <_printf_i+0x146>
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	4632      	mov	r2, r6
 80042dc:	4649      	mov	r1, r9
 80042de:	4640      	mov	r0, r8
 80042e0:	47d0      	blx	sl
 80042e2:	3001      	adds	r0, #1
 80042e4:	d0ad      	beq.n	8004242 <_printf_i+0x15a>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	079b      	lsls	r3, r3, #30
 80042ea:	d413      	bmi.n	8004314 <_printf_i+0x22c>
 80042ec:	68e0      	ldr	r0, [r4, #12]
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	4298      	cmp	r0, r3
 80042f2:	bfb8      	it	lt
 80042f4:	4618      	movlt	r0, r3
 80042f6:	e7a6      	b.n	8004246 <_printf_i+0x15e>
 80042f8:	2301      	movs	r3, #1
 80042fa:	4632      	mov	r2, r6
 80042fc:	4649      	mov	r1, r9
 80042fe:	4640      	mov	r0, r8
 8004300:	47d0      	blx	sl
 8004302:	3001      	adds	r0, #1
 8004304:	d09d      	beq.n	8004242 <_printf_i+0x15a>
 8004306:	3501      	adds	r5, #1
 8004308:	68e3      	ldr	r3, [r4, #12]
 800430a:	9903      	ldr	r1, [sp, #12]
 800430c:	1a5b      	subs	r3, r3, r1
 800430e:	42ab      	cmp	r3, r5
 8004310:	dcf2      	bgt.n	80042f8 <_printf_i+0x210>
 8004312:	e7eb      	b.n	80042ec <_printf_i+0x204>
 8004314:	2500      	movs	r5, #0
 8004316:	f104 0619 	add.w	r6, r4, #25
 800431a:	e7f5      	b.n	8004308 <_printf_i+0x220>
 800431c:	08004714 	.word	0x08004714
 8004320:	08004725 	.word	0x08004725

08004324 <__swbuf_r>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	460e      	mov	r6, r1
 8004328:	4614      	mov	r4, r2
 800432a:	4605      	mov	r5, r0
 800432c:	b118      	cbz	r0, 8004336 <__swbuf_r+0x12>
 800432e:	6a03      	ldr	r3, [r0, #32]
 8004330:	b90b      	cbnz	r3, 8004336 <__swbuf_r+0x12>
 8004332:	f7ff fa3f 	bl	80037b4 <__sinit>
 8004336:	69a3      	ldr	r3, [r4, #24]
 8004338:	60a3      	str	r3, [r4, #8]
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	071a      	lsls	r2, r3, #28
 800433e:	d501      	bpl.n	8004344 <__swbuf_r+0x20>
 8004340:	6923      	ldr	r3, [r4, #16]
 8004342:	b943      	cbnz	r3, 8004356 <__swbuf_r+0x32>
 8004344:	4621      	mov	r1, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f82a 	bl	80043a0 <__swsetup_r>
 800434c:	b118      	cbz	r0, 8004356 <__swbuf_r+0x32>
 800434e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004352:	4638      	mov	r0, r7
 8004354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	6922      	ldr	r2, [r4, #16]
 800435a:	1a98      	subs	r0, r3, r2
 800435c:	6963      	ldr	r3, [r4, #20]
 800435e:	b2f6      	uxtb	r6, r6
 8004360:	4283      	cmp	r3, r0
 8004362:	4637      	mov	r7, r6
 8004364:	dc05      	bgt.n	8004372 <__swbuf_r+0x4e>
 8004366:	4621      	mov	r1, r4
 8004368:	4628      	mov	r0, r5
 800436a:	f7ff fbdb 	bl	8003b24 <_fflush_r>
 800436e:	2800      	cmp	r0, #0
 8004370:	d1ed      	bne.n	800434e <__swbuf_r+0x2a>
 8004372:	68a3      	ldr	r3, [r4, #8]
 8004374:	3b01      	subs	r3, #1
 8004376:	60a3      	str	r3, [r4, #8]
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	6022      	str	r2, [r4, #0]
 800437e:	701e      	strb	r6, [r3, #0]
 8004380:	6962      	ldr	r2, [r4, #20]
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	429a      	cmp	r2, r3
 8004386:	d004      	beq.n	8004392 <__swbuf_r+0x6e>
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	07db      	lsls	r3, r3, #31
 800438c:	d5e1      	bpl.n	8004352 <__swbuf_r+0x2e>
 800438e:	2e0a      	cmp	r6, #10
 8004390:	d1df      	bne.n	8004352 <__swbuf_r+0x2e>
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f7ff fbc5 	bl	8003b24 <_fflush_r>
 800439a:	2800      	cmp	r0, #0
 800439c:	d0d9      	beq.n	8004352 <__swbuf_r+0x2e>
 800439e:	e7d6      	b.n	800434e <__swbuf_r+0x2a>

080043a0 <__swsetup_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4b29      	ldr	r3, [pc, #164]	@ (8004448 <__swsetup_r+0xa8>)
 80043a4:	4605      	mov	r5, r0
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	460c      	mov	r4, r1
 80043aa:	b118      	cbz	r0, 80043b4 <__swsetup_r+0x14>
 80043ac:	6a03      	ldr	r3, [r0, #32]
 80043ae:	b90b      	cbnz	r3, 80043b4 <__swsetup_r+0x14>
 80043b0:	f7ff fa00 	bl	80037b4 <__sinit>
 80043b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043b8:	0719      	lsls	r1, r3, #28
 80043ba:	d422      	bmi.n	8004402 <__swsetup_r+0x62>
 80043bc:	06da      	lsls	r2, r3, #27
 80043be:	d407      	bmi.n	80043d0 <__swsetup_r+0x30>
 80043c0:	2209      	movs	r2, #9
 80043c2:	602a      	str	r2, [r5, #0]
 80043c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043c8:	81a3      	strh	r3, [r4, #12]
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043ce:	e033      	b.n	8004438 <__swsetup_r+0x98>
 80043d0:	0758      	lsls	r0, r3, #29
 80043d2:	d512      	bpl.n	80043fa <__swsetup_r+0x5a>
 80043d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043d6:	b141      	cbz	r1, 80043ea <__swsetup_r+0x4a>
 80043d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043dc:	4299      	cmp	r1, r3
 80043de:	d002      	beq.n	80043e6 <__swsetup_r+0x46>
 80043e0:	4628      	mov	r0, r5
 80043e2:	f7ff fc87 	bl	8003cf4 <_free_r>
 80043e6:	2300      	movs	r3, #0
 80043e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80043f0:	81a3      	strh	r3, [r4, #12]
 80043f2:	2300      	movs	r3, #0
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	f043 0308 	orr.w	r3, r3, #8
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	6923      	ldr	r3, [r4, #16]
 8004404:	b94b      	cbnz	r3, 800441a <__swsetup_r+0x7a>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800440c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004410:	d003      	beq.n	800441a <__swsetup_r+0x7a>
 8004412:	4621      	mov	r1, r4
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f83f 	bl	8004498 <__smakebuf_r>
 800441a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800441e:	f013 0201 	ands.w	r2, r3, #1
 8004422:	d00a      	beq.n	800443a <__swsetup_r+0x9a>
 8004424:	2200      	movs	r2, #0
 8004426:	60a2      	str	r2, [r4, #8]
 8004428:	6962      	ldr	r2, [r4, #20]
 800442a:	4252      	negs	r2, r2
 800442c:	61a2      	str	r2, [r4, #24]
 800442e:	6922      	ldr	r2, [r4, #16]
 8004430:	b942      	cbnz	r2, 8004444 <__swsetup_r+0xa4>
 8004432:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004436:	d1c5      	bne.n	80043c4 <__swsetup_r+0x24>
 8004438:	bd38      	pop	{r3, r4, r5, pc}
 800443a:	0799      	lsls	r1, r3, #30
 800443c:	bf58      	it	pl
 800443e:	6962      	ldrpl	r2, [r4, #20]
 8004440:	60a2      	str	r2, [r4, #8]
 8004442:	e7f4      	b.n	800442e <__swsetup_r+0x8e>
 8004444:	2000      	movs	r0, #0
 8004446:	e7f7      	b.n	8004438 <__swsetup_r+0x98>
 8004448:	20000190 	.word	0x20000190

0800444c <__swhatbuf_r>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	460c      	mov	r4, r1
 8004450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004454:	2900      	cmp	r1, #0
 8004456:	b096      	sub	sp, #88	@ 0x58
 8004458:	4615      	mov	r5, r2
 800445a:	461e      	mov	r6, r3
 800445c:	da0d      	bge.n	800447a <__swhatbuf_r+0x2e>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004464:	f04f 0100 	mov.w	r1, #0
 8004468:	bf14      	ite	ne
 800446a:	2340      	movne	r3, #64	@ 0x40
 800446c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004470:	2000      	movs	r0, #0
 8004472:	6031      	str	r1, [r6, #0]
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	b016      	add	sp, #88	@ 0x58
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	466a      	mov	r2, sp
 800447c:	f000 f89c 	bl	80045b8 <_fstat_r>
 8004480:	2800      	cmp	r0, #0
 8004482:	dbec      	blt.n	800445e <__swhatbuf_r+0x12>
 8004484:	9901      	ldr	r1, [sp, #4]
 8004486:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800448a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800448e:	4259      	negs	r1, r3
 8004490:	4159      	adcs	r1, r3
 8004492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004496:	e7eb      	b.n	8004470 <__swhatbuf_r+0x24>

08004498 <__smakebuf_r>:
 8004498:	898b      	ldrh	r3, [r1, #12]
 800449a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800449c:	079d      	lsls	r5, r3, #30
 800449e:	4606      	mov	r6, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	d507      	bpl.n	80044b4 <__smakebuf_r+0x1c>
 80044a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	6123      	str	r3, [r4, #16]
 80044ac:	2301      	movs	r3, #1
 80044ae:	6163      	str	r3, [r4, #20]
 80044b0:	b003      	add	sp, #12
 80044b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b4:	ab01      	add	r3, sp, #4
 80044b6:	466a      	mov	r2, sp
 80044b8:	f7ff ffc8 	bl	800444c <__swhatbuf_r>
 80044bc:	9f00      	ldr	r7, [sp, #0]
 80044be:	4605      	mov	r5, r0
 80044c0:	4639      	mov	r1, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	f7ff fa2a 	bl	800391c <_malloc_r>
 80044c8:	b948      	cbnz	r0, 80044de <__smakebuf_r+0x46>
 80044ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ce:	059a      	lsls	r2, r3, #22
 80044d0:	d4ee      	bmi.n	80044b0 <__smakebuf_r+0x18>
 80044d2:	f023 0303 	bic.w	r3, r3, #3
 80044d6:	f043 0302 	orr.w	r3, r3, #2
 80044da:	81a3      	strh	r3, [r4, #12]
 80044dc:	e7e2      	b.n	80044a4 <__smakebuf_r+0xc>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	6020      	str	r0, [r4, #0]
 80044e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	9b01      	ldr	r3, [sp, #4]
 80044ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044ee:	b15b      	cbz	r3, 8004508 <__smakebuf_r+0x70>
 80044f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044f4:	4630      	mov	r0, r6
 80044f6:	f000 f83b 	bl	8004570 <_isatty_r>
 80044fa:	b128      	cbz	r0, 8004508 <__smakebuf_r+0x70>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	431d      	orrs	r5, r3
 800450c:	81a5      	strh	r5, [r4, #12]
 800450e:	e7cf      	b.n	80044b0 <__smakebuf_r+0x18>

08004510 <_raise_r>:
 8004510:	291f      	cmp	r1, #31
 8004512:	b538      	push	{r3, r4, r5, lr}
 8004514:	4605      	mov	r5, r0
 8004516:	460c      	mov	r4, r1
 8004518:	d904      	bls.n	8004524 <_raise_r+0x14>
 800451a:	2316      	movs	r3, #22
 800451c:	6003      	str	r3, [r0, #0]
 800451e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004526:	b112      	cbz	r2, 800452e <_raise_r+0x1e>
 8004528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800452c:	b94b      	cbnz	r3, 8004542 <_raise_r+0x32>
 800452e:	4628      	mov	r0, r5
 8004530:	f000 f840 	bl	80045b4 <_getpid_r>
 8004534:	4622      	mov	r2, r4
 8004536:	4601      	mov	r1, r0
 8004538:	4628      	mov	r0, r5
 800453a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800453e:	f000 b827 	b.w	8004590 <_kill_r>
 8004542:	2b01      	cmp	r3, #1
 8004544:	d00a      	beq.n	800455c <_raise_r+0x4c>
 8004546:	1c59      	adds	r1, r3, #1
 8004548:	d103      	bne.n	8004552 <_raise_r+0x42>
 800454a:	2316      	movs	r3, #22
 800454c:	6003      	str	r3, [r0, #0]
 800454e:	2001      	movs	r0, #1
 8004550:	e7e7      	b.n	8004522 <_raise_r+0x12>
 8004552:	2100      	movs	r1, #0
 8004554:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004558:	4620      	mov	r0, r4
 800455a:	4798      	blx	r3
 800455c:	2000      	movs	r0, #0
 800455e:	e7e0      	b.n	8004522 <_raise_r+0x12>

08004560 <raise>:
 8004560:	4b02      	ldr	r3, [pc, #8]	@ (800456c <raise+0xc>)
 8004562:	4601      	mov	r1, r0
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f7ff bfd3 	b.w	8004510 <_raise_r>
 800456a:	bf00      	nop
 800456c:	20000190 	.word	0x20000190

08004570 <_isatty_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4d06      	ldr	r5, [pc, #24]	@ (800458c <_isatty_r+0x1c>)
 8004574:	2300      	movs	r3, #0
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	602b      	str	r3, [r5, #0]
 800457c:	f7fd f988 	bl	8001890 <_isatty>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_isatty_r+0x1a>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_isatty_r+0x1a>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	200003c8 	.word	0x200003c8

08004590 <_kill_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4d07      	ldr	r5, [pc, #28]	@ (80045b0 <_kill_r+0x20>)
 8004594:	2300      	movs	r3, #0
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	4611      	mov	r1, r2
 800459c:	602b      	str	r3, [r5, #0]
 800459e:	f7fd f907 	bl	80017b0 <_kill>
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	d102      	bne.n	80045ac <_kill_r+0x1c>
 80045a6:	682b      	ldr	r3, [r5, #0]
 80045a8:	b103      	cbz	r3, 80045ac <_kill_r+0x1c>
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	bd38      	pop	{r3, r4, r5, pc}
 80045ae:	bf00      	nop
 80045b0:	200003c8 	.word	0x200003c8

080045b4 <_getpid_r>:
 80045b4:	f7fd b8f4 	b.w	80017a0 <_getpid>

080045b8 <_fstat_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	4d07      	ldr	r5, [pc, #28]	@ (80045d8 <_fstat_r+0x20>)
 80045bc:	2300      	movs	r3, #0
 80045be:	4604      	mov	r4, r0
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	f7fd f953 	bl	8001870 <_fstat>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	d102      	bne.n	80045d4 <_fstat_r+0x1c>
 80045ce:	682b      	ldr	r3, [r5, #0]
 80045d0:	b103      	cbz	r3, 80045d4 <_fstat_r+0x1c>
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	bd38      	pop	{r3, r4, r5, pc}
 80045d6:	bf00      	nop
 80045d8:	200003c8 	.word	0x200003c8

080045dc <_init>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

080045e8 <_fini>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr
